import streamlit as st
from analyzer import analyze_stock, export_to_excel
import os
import pandas as pd
from datetime import date
from vnstock import Vnstock
import plotly.graph_objects as go
import plotly.express as px
import matplotlib.pyplot as plt
import seaborn as sns
from concurrent.futures import ThreadPoolExecutor
import math
import streamlit.components.v1 as components


st.set_page_config(page_title='Ph√¢n T√≠ch C·ªï Phi·∫øu', layout='wide')
tab1, tab2, tab3, tab4, tab5, tab6, tab7 = st.tabs([
    'üíß Ph√¢n T√≠ch D√≤ng Ti·ªÅn C·ªï Phi·∫øu',
    'üìù Ph√¢n T√≠ch D√≤ng Ti·ªÅn Theo Nh√≥m',    
    'üìâ Bi·ªÉu ƒê·ªì Gi√°',
    'üìà C·∫≠p nh·∫≠t Gi√° C·ªï Phi·∫øu Realtime',
    'üìä Ph√¢n T√≠ch C∆° B·∫£n',
    'üìä Bi·ªÉu ƒë·ªì Treemap',
    'üìä Treemap real time'
    
])
# H√†m chuy·ªÉn ƒë·ªïi s·ªë th√†nh d·∫°ng r√∫t g·ªçn K, M, B
def format_number(value):
    if abs(value) >= 1_000_000_000:
        return f"{value / 1_000_000_000:.1f}B"  # T·ª∑ (Billion)
    elif abs(value) >= 1_000_000:
        return f"{value / 1_000_000:.1f}M"  # Tri·ªáu (Million)
    elif abs(value) >= 1_000:
        return f"{value / 1_000:.1f}K"  # Ngh√¨n (Thousand)
    else:
        return f"{value:.0f}"  # Kh√¥ng thay ƒë·ªïi n·∫øu nh·ªè h∆°n 1000

# ==== TAB 2 ====
with tab2:
    # Define the function for processing stock data
    def process_symbol(symbol, selected_date):
        try:
            # Kh·ªüi t·∫°o ƒë·ªëi t∆∞·ª£ng l·∫•y d·ªØ li·ªáu intraday
            stock = Vnstock().stock(symbol=symbol, source='VCI')
            df_intraday = stock.quote.intraday(symbol=symbol, page_size=10000)

            if df_intraday is None or df_intraday.empty:
                st.warning(f"Kh√¥ng c√≥ d·ªØ li·ªáu intraday cho m√£ {symbol}.")
                return None

            # Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu v·ªÅ d·∫°ng th·ªùi gian
            df_intraday['time'] = pd.to_datetime(df_intraday['time'])
            df_intraday.set_index('time', inplace=True)

            # G·ªôp theo t·ª´ng ph√∫t
            df_intraday['minute'] = df_intraday.index.floor('T')

            # T√≠nh volume mua & b√°n
            df_intraday['volume_buy'] = df_intraday.apply(lambda x: x['volume'] if x['match_type'] == 'Buy' else 0, axis=1)
            df_intraday['volume_sell'] = df_intraday.apply(lambda x: x['volume'] if x['match_type'] == 'Sell' else 0, axis=1)

            # Nh√≥m theo t·ª´ng ph√∫t
            df_min = df_intraday.groupby('minute').agg(
                volume_buy=('volume_buy', 'sum'),
                volume_sell=('volume_sell', 'sum'),
                avg_price=('price', 'mean')
            ).reset_index()

            # T√≠nh d√≤ng ti·ªÅn (Value = Gi√° * Volume)
            df_min['value_buy'] = df_min['volume_buy'] * df_min['avg_price'] * 1000
            df_min['value_sell'] = df_min['volume_sell'] * df_min['avg_price'] * 1000
            df_min['net'] = df_min['volume_buy'] - df_min['volume_sell']
            df_min['net_value'] = df_min['value_buy'] - df_min['value_sell']

            # T√≠nh kh·ªëi l∆∞·ª£ng mua/b√°n l≈©y k·∫ø
            df_min['cumulative_value_buy'] = df_min['value_buy'].cumsum()
            df_min['cumulative_value_sell'] = df_min['value_sell'].cumsum()
            df_min['cumulative_value_net'] = df_min['net_value'].cumsum()
            
            # T√≠nh volume mua/b√°n l≈©y k·∫ø
            df_min['cumulative_volume_buy'] = df_min['volume_buy'].cumsum()
            df_min['cumulative_volume_sell'] = df_min['volume_sell'].cumsum()
            df_min['cumulative_volume_net'] = df_min['net'].cumsum()

            # T√≠nh d√≤ng ti·ªÅn l≈©y k·∫ø
            df_min['cumulative_net'] = df_min['cumulative_value_buy'] - df_min['cumulative_value_sell']

            # L·∫•y c√°c d√≤ng ti·ªÅn l≈©y k·∫ø cu·ªëi c√πng
            cumulative_buy = df_min['cumulative_value_buy'].iloc[-1] if not df_min.empty else 0
            cumulative_sell = df_min['cumulative_value_sell'].iloc[-1] if not df_min.empty else 0
            cumulative_net = df_min['cumulative_net'].iloc[-1] if not df_min.empty else 0
            cumulative_volume_buy = df_min['cumulative_volume_buy'].iloc[-1] if not df_min.empty else 0
            cumulative_volume_sell = df_min['cumulative_volume_sell'].iloc[-1] if not df_min.empty else 0
            cumulative_volume_net = df_min['cumulative_volume_net'].iloc[-1] if not df_min.empty else 0


            return {
                "symbol": symbol,
                "cumulative_value_buy": cumulative_buy,
                "cumulative_value_sell": cumulative_sell,
                "cumulative_value_net": cumulative_net,
                "cumulative_volume_buy": cumulative_volume_buy,
                "cumulative_volume_sell": cumulative_volume_sell,
                "cumulative_volume_net": cumulative_volume_net  # Th√™m v√†o c·ªôt volume r√≤ng l≈©y k·∫ø
            }
        except Exception:
            return None

    # Main Streamlit code
    st.title('üìä Ph√¢n T√≠ch D√≤ng Ti·ªÅn C·ªï Phi·∫øu')

    # Option 1: Upload CSV file with stock symbols
    uploaded_file = st.file_uploader("T·∫£i l√™n file CSV ch·ª©a m√£ c·ªï phi·∫øu", type="csv")

    # Option 2: Manual input of stock symbols
    manual_input = st.text_input("Nh·∫≠p m√£ c·ªï phi·∫øu (c√°ch nhau b·∫±ng d·∫•u ph·∫©y):", "")

    # Option 3: Select sector (optional)
    sector_map = {
        'VN30': ['ACB','BCM','BID','BVH','CTG',	'FPT','GAS','GVR','HDB','HPG',	'LPB','MBB','MSN', 'MWG', 'PLX','SAB','SHB','SSB','SSI','STB','TCB','TPB','VCB','VHM','VIB','VIC', 'VJC','VNM','VPB','VRE'],
        'Ng√¢n h√†ng': ['ACB', 'BID', 'CTG', 'EIB', 'MBB', 'NVB', 'SHB', 'STB', 'VCB', 'VIB', 'LPB', 'TPB', 'OCB', 'SSB', 'HDB', 'TCB', 'VPB'],
        'Ch·ª©ng kho√°n': ['AGR', 'ART', 'BSI', 'BVS', 'CTS', 'FTS', 'HCM', 'MBS', 'SBS', 'SHS', 'SSI', 'TVB', 'TVS', 'VCI', 'VDS', 'VIX', 'VND'],
        'Th√©p': ['HPG', 'HSG', 'NKG', 'POM', 'SHA', 'TIS', 'TVN', 'VGS', 'HMC', 'SHI', 'SMC', 'TLH'],
        'B·∫•t ƒë·ªông s·∫£n': ['IJC', 'LDG', 'NVT', 'AMD', 'C21', 'CEO', 'D2D', 'DIG', 'DRH', 'DXG', 'FLC', 'HAR', 'HDC', 'HDG', 'HLD', 'HQC', 'ITC', 'KDH', 'NBB', 'NDN', 'NLG', 'NTL', 'NVL', 'PDR', 'QCG', 'SCR', 'SJS', 'TDH', 'TIG', 'VIC', 'VPH', 'IDV', 'ITA', 'KBC', 'LHG', 'VC3', 'LGL'],
        'C√¥ng ngh·ªá': ['CMG', 'SGT', 'ITD', 'VEC', 'FPT', 'ELC', 'ABC'],
        'B√°n l·∫ª': ['MSN', 'MWG', 'DGW', 'PNJ', 'FRT'],
        'ƒêi·ªán n∆∞·ªõc': ['BWE', 'VCW', 'DQC', 'GDT', 'RAL', 'CHP', 'NT2', 'PPC', 'SBA', 'SJD', 'VSH'],
        'D·∫ßu kh√≠': ['PVB', 'PVC', 'PVD', 'PVS', 'ASP', 'CNG', 'GAS', 'PGC', 'PGS', 'PLX', 'PVG', 'PVO'],
        'X√¢y d·ª±ng': ['C32', 'C47', 'CII', 'CTD', 'CTI', 'FCN', 'HBC', 'HC3', 'HTI', 'HUT', 'L14', 'MCG', 'LCG', 'PC1', 'DPG', 'PHC', 'PVX', 'PXS', 'SD5', 'SD6', 'SD9', 'TCD', 'UIC', 'VCG', 'VMC', 'VNE', 'THG', 'VPD', 'TV2'],
        'ƒê·∫ßu t∆∞ c√¥ng': ['HHV', 'LCG', 'HTI', 'DPG', 'EVG'],
        'Th·ª±c ph·∫©m': ['MSN', 'TNA', 'VNM', 'LSS', 'QNS', 'SBT', 'MCH', 'VOC', 'NAF', 'SCD', 'SAB', 'SMB', 'KDC'],
        'B·∫£o hi·ªÉm': ['VNR', 'ABI', 'BIC', 'BMI', 'MIG', 'PGI', 'PVI', 'BVH'],
        'Th·ªßy s·∫£n': ['ANV', 'ASM', 'FMC', 'HVG', 'IDI', 'SSN', 'VHC'],
        'D·ªát may': ['ADS', 'EVE', 'FTM', 'GMC', 'HTG', 'KMR', 'STK', 'TCM', 'TNG', 'TVT', 'VGG', 'VGT'],
        'Cao su': ['DPR', 'DRI', 'HRC', 'PHR', 'TRC'],
        'D∆∞·ª£c ph·∫©m': ['DCL', 'DHG', 'DHT', 'IMP', 'TRA', 'DVN', 'DBD'],
        'V·∫≠n t·∫£i': ['PVT', 'GSP', 'SWC', 'VIP', 'VOS', 'VTO', 'SKG', 'SRT', 'VNS', 'SAS'],
        'C·∫£ng bi·ªÉn': ['HAH', 'STG', 'GMD', 'PDN', 'PHP', 'SGP', 'VSC'],
        'Nh·ª±a': ['AAA', 'BMP', 'DAG', 'DNP', 'NTP', 'RDP'],
        'Khu CN': ['KBC', 'SZC', 'TIP', 'BCM', 'VGC', 'IDC'],
        'Ph√¢n b√≥n': ['HAI', 'LTG', 'TSC', 'VFG', 'BFC', 'DCM', 'DDV', 'DPM', 'LAS', 'QBS', 'SFG', 'CSM', 'DRC', 'SRC', 'CSV', 'DGC', 'PLC', 'LIX', 'NET']
        # Add other sectors as required...
    }

    selected_sector = st.selectbox('Ch·ªçn nh√≥m ng√†nh:', options=list(sector_map.keys()), index=0, key="sector_select")

    # Select a date for analysis
    selected_date = st.date_input('Ch·ªçn ng√†y giao d·ªãch:', value=date.today(), key='date')

    # Define button to trigger analysis
    analyze_button = st.button('üîç Ph√¢n T√≠ch D√≤ng Ti·ªÅn')

    # Process the symbols based on the input
    if analyze_button:
        st.info(f"ƒêang ph√¢n t√≠ch c√°c m√£ c·ªï phi·∫øu...")

        if uploaded_file is not None:
            # Read CSV file and extract stock symbols
            df_csv = pd.read_csv(uploaded_file)
            symbols = df_csv['symbol'].dropna().tolist()  # Assuming the CSV has a column 'symbol'
        elif manual_input:
            # Process manual input
            symbols = [sym.strip() for sym in manual_input.split(',')]
        elif selected_sector:
            # Default to selected sector symbols if no CSV or manual input
            symbols = sector_map.get(selected_sector, [])
        else:
            st.warning("Vui l√≤ng nh·∫≠p m√£ c·ªï phi·∫øu ho·∫∑c ch·ªçn nh√≥m ng√†nh.")
            symbols = []

        if symbols:
            with st.spinner("ƒêang x·ª≠ l√Ω..."):
                with ThreadPoolExecutor(max_workers=6) as executor:
                    futures = [executor.submit(process_symbol, sym, selected_date) for sym in symbols]
                    results = [f.result() for f in futures if f.result() is not None]

            if results:
                df_symbols = pd.DataFrame(results)

                # Format the numbers to display as "1.000.000" instead of "1000000"
                df_display = df_symbols.copy()
                for col in ['cumulative_value_buy', 'cumulative_value_sell', 'cumulative_value_net', 'cumulative_volume_buy', 'cumulative_volume_sell', 'cumulative_volume_net']:
                    df_display[col] = df_display[col].map(lambda x: f"{x:,.0f}".replace(",", "."))

                st.subheader("üìã B·∫£ng D√≤ng Ti·ªÅn L≈©y K·∫ø")
                st.dataframe(df_display, use_container_width=True)

                # Split the screen into two columns
                col1, col2 = st.columns(2)

                with col1:
                    # Top 10 stocks with the highest net cash flow
                    top_10_net_positive = df_symbols.nlargest(10, 'cumulative_value_net')
                    st.subheader("üîù Top 10 C·ªï Phi·∫øu C√≥ D√≤ng Ti·ªÅn R√≤ng L·ªõn Nh·∫•t")
                    top_10_net_positive_display = top_10_net_positive[['symbol', 'cumulative_value_net']]
                    top_10_net_positive_display['cumulative_value_net'] = top_10_net_positive_display['cumulative_value_net'].map(lambda x: f"{x:,.0f}".replace(",", "."))
                    st.dataframe(top_10_net_positive_display, use_container_width=True)

                with col2:
                    # Top 10 stocks with the lowest net cash flow
                    top_10_net_negative = df_symbols.nsmallest(10, 'cumulative_value_net')
                    st.subheader("üîª Top 10 C·ªï Phi·∫øu C√≥ D√≤ng Ti·ªÅn R√≤ng Th·∫•p Nh·∫•t")
                    top_10_net_negative_display = top_10_net_negative[['symbol', 'cumulative_value_net']]
                    top_10_net_negative_display['cumulative_value_net'] = top_10_net_negative_display['cumulative_value_net'].map(lambda x: f"{x:,.0f}".replace(",", "."))
                    st.dataframe(top_10_net_negative_display, use_container_width=True)
                    
                # K·∫øt h·ª£p top 10 m√£ d√≤ng ti·ªÅn r√≤ng l·ªõn nh·∫•t v√† nh·ªè nh·∫•t
                top_10_positive = df_symbols.nlargest(10, 'cumulative_value_net')
                top_10_negative = df_symbols.nsmallest(10, 'cumulative_value_net')
                combined = pd.concat([top_10_positive, top_10_negative])
                combined = combined.drop_duplicates(subset='symbol')

                # S·∫Øp x·∫øp theo d√≤ng ti·ªÅn r√≤ng gi·∫£m d·∫ßn ƒë·ªÉ bi·ªÉu ƒë·ªì d·ªÖ ƒë·ªçc
                combined_sorted = combined.sort_values(by='cumulative_value_net', ascending=False)

                # T·∫°o bi·ªÉu ƒë·ªì c·ªôt
                fig = go.Figure()

                fig.add_trace(go.Bar(
                    x=combined_sorted['symbol'],
                    y=combined_sorted['cumulative_value_net'],
                    marker_color=['#2ECC71' if val >= 0 else '#E74C3C' for val in combined_sorted['cumulative_value_net']],
                    text=[format_number(x) for x in combined_sorted['cumulative_value_net']],  # S·ª≠ d·ª•ng h√†m ƒë·ªãnh d·∫°ng s·ªë
                    textposition='auto',
                    name='D√≤ng ti·ªÅn r√≤ng'
                ))

                fig.update_layout(
                    title="üí∞ Top 10 D√≤ng Ti·ªÅn R√≤ng L·ªõn Nh·∫•t v√† Nh·ªè Nh·∫•t",
                    xaxis_title="M√£ c·ªï phi·∫øu",
                    yaxis_title="D√≤ng ti·ªÅn r√≤ng (VND)",
                    plot_bgcolor='rgba(0,0,0,0)',
                    paper_bgcolor='rgba(0,0,0,0)',
                    height=500
                )

                st.plotly_chart(fig, use_container_width=True)
                
                # ===== BI·ªÇU ƒê·ªí D√íNG TI·ªÄN L≈®Y K·∫æ NH√ìM =====
                st.subheader("üìà Bi·ªÉu ƒê·ªì D√≤ng Ti·ªÅn L≈©y K·∫ø Nh√≥m Ng√†nh")

                # S·∫Øp x·∫øp ƒë·ªÉ bi·ªÉu ƒë·ªì ƒë·∫πp h∆°n
                df_symbols_sorted = df_symbols.sort_values(by='cumulative_value_net', ascending=False)

                fig_group = go.Figure()

                # Th√™m c·ªôt mua l≈©y k·∫ø
                fig_group.add_trace(go.Bar(
                    x=df_symbols_sorted['symbol'],
                    y=df_symbols_sorted['cumulative_value_buy'],
                    name='Mua l≈©y k·∫ø',
                    marker_color='#2ECC71'
                ))

                # Th√™m c·ªôt b√°n l≈©y k·∫ø
                fig_group.add_trace(go.Bar(
                    x=df_symbols_sorted['symbol'],
                    y=df_symbols_sorted['cumulative_value_sell'],
                    name='B√°n l≈©y k·∫ø',
                    marker_color='#E74C3C'
                ))

                # Th√™m ƒë∆∞·ªùng d√≤ng ti·ªÅn r√≤ng l≈©y k·∫ø
                fig_group.add_trace(go.Scatter(
                    x=df_symbols_sorted['symbol'],
                    y=df_symbols_sorted['cumulative_value_net'],
                    name='R√≤ng l≈©y k·∫ø',
                    mode='lines+markers',
                    line=dict(color='#9B59B6', width=3)
                ))

                fig_group.update_layout(
                    barmode='group',
                    title='üíº D√≤ng Ti·ªÅn L≈©y K·∫ø Theo Nh√≥m C·ªï Phi·∫øu',
                    xaxis_title='M√£ c·ªï phi·∫øu',
                    yaxis_title='Gi√° tr·ªã (VND)',
                    plot_bgcolor='rgba(0,0,0,0)',
                    paper_bgcolor='rgba(0,0,0,0)',
                    height=550,
                    legend=dict(orientation="h", yanchor="bottom", y=1.02, xanchor="right", x=1)
                )

                st.plotly_chart(fig_group, use_container_width=True)


            else:
                st.warning("Kh√¥ng th·ªÉ ph√¢n t√≠ch d√≤ng ti·ªÅn c√°c m√£ c·ªï phi·∫øu n√†y.")
        else:
            st.warning("Kh√¥ng c√≥ m√£ c·ªï phi·∫øu n√†o ƒë·ªÉ ph√¢n t√≠ch.")

                
# ==== TAB 5 ====

with tab5:
    st.title("üìä Ph√¢n T√≠ch Ch·ªâ S·ªë T√†i Ch√≠nh C∆° B·∫£n")

    st.markdown("""
    Nh·∫≠p m√£ c·ªï phi·∫øu ƒë·ªÉ xem c√°c ch·ªâ s·ªë t√†i ch√≠nh nh∆∞ ROE, ROA, EPS, N·ª£/V·ªën ch·ªß s·ªü h·ªØu, v.v.  
    Ngu·ªìn d·ªØ li·ªáu: VCI (vnstock)
    """)

    symbol = st.text_input("Nh·∫≠p m√£ c·ªï phi·∫øu:", value="VNM", key="symbol_tab4").strip().upper()
    period = st.selectbox("Ch·ªçn chu k·ª≥:", ["year", "quarter"], index=0)
    lang = st.radio("Ng√¥n ng·ªØ hi·ªÉn th·ªã:", ["vi", "en"], horizontal=True)
    
    def format_number(x):
        """ƒê·ªãnh d·∫°ng s·ªë v·ªõi d·∫•u ch·∫•m ph√¢n c√°ch h√†ng ngh√¨n"""
        if isinstance(x, (int, float)):
            return f"{x:,.0f}".replace(",", ".")  # ƒê·ªãnh d·∫°ng s·ªë v√† thay d·∫•u ph·∫©y b·∫±ng d·∫•u ch·∫•m
        return x

    if st.button("üîç L·∫•y d·ªØ li·ªáu", key="analyze_tab4"):
        try:
            from vnstock import Vnstock
            stock = Vnstock().stock(symbol=symbol, source='VCI')
            
            
            # 1. Hi·ªÉn th·ªã b·∫£ng ch·ªâ s·ªë t√†i ch√≠nh
            st.subheader("üìà Ch·ªâ s·ªë t√†i ch√≠nh")
            df_ratio = stock.finance.ratio(period=period, lang=lang, dropna=True)
            
            if df_ratio is not None and not df_ratio.empty:
                st.success("D·ªØ li·ªáu ch·ªâ s·ªë t√†i ch√≠nh ƒë√£ ƒë∆∞·ª£c l·∫•y th√†nh c√¥ng!")
                st.dataframe(df_ratio, use_container_width=True)
                                                
            else:
                st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu ch·ªâ s·ªë t√†i ch√≠nh cho m√£ n√†y.")

                    
            # 2. B·∫£ng c√¢n ƒë·ªëi k·∫ø to√°n
            st.subheader("üí∞ B·∫£ng c√¢n ƒë·ªëi k·∫ø to√°n")
            df_balance = stock.finance.balance_sheet(period=period, lang=lang, dropna=True)
            if df_balance is not None and not df_balance.empty:
                st.dataframe(df_balance, use_container_width=True)
            else:
                st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu b·∫£ng c√¢n ƒë·ªëi k·∫ø to√°n.")
            
            # 3. B√°o c√°o k·∫øt qu·∫£ kinh doanh
            st.subheader("üìä B√°o c√°o k·∫øt qu·∫£ kinh doanh")
            df_income = stock.finance.income_statement(period=period, lang=lang, dropna=True)
            if df_income is not None and not df_income.empty:
                st.dataframe(df_income, use_container_width=True)
            else:
                st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu b√°o c√°o k·∫øt qu·∫£ kinh doanh.")
            
            # 4. B√°o c√°o l∆∞u chuy·ªÉn ti·ªÅn t·ªá
            st.subheader("üíµ B√°o c√°o l∆∞u chuy·ªÉn ti·ªÅn t·ªá")
            df_cashflow = stock.finance.cash_flow(period=period, lang=lang, dropna=True)
            if df_cashflow is not None and not df_cashflow.empty:
                st.dataframe(df_cashflow, use_container_width=True)
            else:
                st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu b√°o c√°o l∆∞u chuy·ªÉn ti·ªÅn t·ªá.")
            
        except Exception as e:
            st.error(f"ƒê√£ x·∫£y ra l·ªói khi l·∫•y d·ªØ li·ªáu: {e}")
            
            
          
# ==== TAB 3 ====            
with tab3:
    st.title("üìâ Bi·ªÉu ƒê·ªì N·∫øn Nh·∫≠t ‚Äì Gi√° C·ªï Phi·∫øu")

    st.markdown("Ch·ªçn m√£ c·ªï phi·∫øu, kho·∫£ng th·ªùi gian v√† khung th·ªùi gian ƒë·ªÉ xem bi·ªÉu ƒë·ªì gi√°.")

    symbol = st.text_input("Nh·∫≠p m√£ c·ªï phi·∫øu:", value="VNM", key="symbol_tab5").strip().upper()
    start_date = st.date_input("Ng√†y b·∫Øt ƒë·∫ßu", value=date(2025, 1, 1))
    end_date = st.date_input("Ng√†y k·∫øt th√∫c", value=date.today())

    timeframe = st.selectbox("Khung th·ªùi gian:", options=["D", "W", "M"], index=0, 
                             format_func=lambda x: {"D": "Ng√†y", "W": "Tu·∫ßn", "M": "Th√°ng"}[x])

    # T√πy ch·ªçn hi·ªÉn th·ªã c√°c ƒë∆∞·ªùng MA
    show_ma5 = st.checkbox("Hi·ªÉn th·ªã MA 5", value=True)
    show_ma20 = st.checkbox("Hi·ªÉn th·ªã MA 20", value=True)
    show_ma50 = st.checkbox("Hi·ªÉn th·ªã MA 50", value=True)

    if st.button("üìä Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì", key="btn_tab5"):
        try:
            from vnstock import Vnstock
            import plotly.graph_objects as go

            stock = Vnstock().stock(symbol=symbol, source='VCI')
            df_candle = stock.quote.history(start=str(start_date), end=str(end_date))

            if df_candle is None or df_candle.empty or 'time' not in df_candle.columns:
                st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu cho m√£ c·ªï phi·∫øu v√† kho·∫£ng th·ªùi gian ƒë√£ ch·ªçn.")
            else:
                df_candle['time'] = pd.to_datetime(df_candle['time'])
                df_candle.set_index('time', inplace=True)

                if timeframe in ['W', 'M']:
                    df_candle = df_candle.resample(timeframe).agg({
                        'open': 'first',
                        'high': 'max',
                        'low': 'min',
                        'close': 'last',
                        'volume': 'sum'
                    }).dropna()

                df_candle.reset_index(inplace=True)
                
                # Chuy·ªÉn ƒë·ªïi th·ªùi gian sang ƒë·ªãnh d·∫°ng ng√†y ng·∫Øn g·ªçn
                df_candle['time'] = pd.to_datetime(df_candle['time']).dt.strftime('%d-%m')

                # T√≠nh c√°c ƒë∆∞·ªùng MA
                df_candle['MA5'] = df_candle['close'].rolling(window=5).mean()
                df_candle['MA20'] = df_candle['close'].rolling(window=20).mean()
                df_candle['MA50'] = df_candle['close'].rolling(window=50).mean()

                fig = go.Figure(data=[go.Candlestick(
                    x=df_candle['time'],
                    open=df_candle['open'],
                    high=df_candle['high'],
                    low=df_candle['low'],
                    close=df_candle['close'],
                    increasing_line_color='green',
                    decreasing_line_color='red',
                    name='N·∫øn Nh·∫≠t'
                )])

                # Th√™m c√°c ƒë∆∞·ªùng MA n·∫øu ng∆∞·ªùi d√πng ch·ªçn hi·ªÉn th·ªã
                if show_ma5:
                    fig.add_trace(go.Scatter(
                        x=df_candle['time'],
                        y=df_candle['MA5'],
                        mode='lines',
                        name='MA 5',
                        line=dict(color='blue', width=2)
                    ))

                if show_ma20:
                    fig.add_trace(go.Scatter(
                        x=df_candle['time'],
                        y=df_candle['MA20'],
                        mode='lines',
                        name='MA 20',
                        line=dict(color='orange', width=2)
                    ))

                if show_ma50:
                    fig.add_trace(go.Scatter(
                        x=df_candle['time'],
                        y=df_candle['MA50'],
                        mode='lines',
                        name='MA 50',
                        line=dict(color='purple', width=2)
                    ))

                fig.update_layout(
                    title=f'Bi·ªÉu ƒë·ªì N·∫øn Nh·∫≠t: {symbol} ({ {"D":"Ng√†y","W":"Tu·∫ßn","M":"Th√°ng"}[timeframe] })',
                    xaxis_title='Ng√†y',
                    yaxis_title='Gi√°',
                    xaxis_rangeslider_visible=False,
                    height=500,
                    margin=dict(l=0, r=0, t=40, b=0),  # Lo·∫°i b·ªè c√°c kho·∫£ng tr·ªëng
                    xaxis=dict(
                        showgrid=False,
                        zeroline=False,
                        type='category',  # Lo·∫°i b·ªè c√°c ng√†y kh√¥ng c√≥ giao d·ªãch
                        tickmode='array',
                        tickvals=df_candle['time'],  # Hi·ªÉn th·ªã c√°c gi√° tr·ªã c√≥ d·ªØ li·ªáu
                        tickangle=45  # G√≥c quay c√°c nh√£n ƒë·ªÉ tr√°nh ch·ªìng ch√©o
                    ),
                    yaxis=dict(
                        showgrid=False,
                        zeroline=False
                    )
                )

                st.plotly_chart(fig, use_container_width=True)
                
                # Bi·ªÉu ƒë·ªì kh·ªëi l∆∞·ª£ng
                fig_volume = go.Figure()
                fig_volume.add_trace(go.Bar(
                    x=df_candle['time'],
                    y=df_candle['volume'],
                    marker_color='orange',
                    name='Kh·ªëi l∆∞·ª£ng'
                ))

                fig_volume.update_layout(
                    title='üìä Kh·ªëi L∆∞·ª£ng Giao D·ªãch',
                    xaxis_title='Ng√†y',
                    yaxis_title='Kh·ªëi l∆∞·ª£ng',
                    height=300,
                    margin=dict(l=0, r=0, t=40, b=0),  # Lo·∫°i b·ªè c√°c kho·∫£ng tr·ªëng
                    xaxis=dict(
                        showgrid=False,
                        zeroline=False,
                        type='category',  # Lo·∫°i b·ªè c√°c ng√†y kh√¥ng c√≥ giao d·ªãch
                        tickmode='array',
                        tickvals=df_candle['time'],  # Hi·ªÉn th·ªã c√°c gi√° tr·ªã c√≥ d·ªØ li·ªáu
                        tickangle=45  # G√≥c quay c√°c nh√£n ƒë·ªÉ tr√°nh ch·ªìng ch√©o
                    ),
                    yaxis=dict(
                        showgrid=False,
                        zeroline=False
                    )
                )

                # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì kh·ªëi l∆∞·ª£ng
                st.plotly_chart(fig_volume, use_container_width=True)

                st.download_button(
                    label="üì• T·∫£i d·ªØ li·ªáu gi√° l·ªãch s·ª≠ (.CSV)",
                    data=df_candle.to_csv(index=False).encode("utf-8"),
                    file_name=f"{symbol}_gia_lich_su_{timeframe}.csv",
                    mime="text/csv"
                )

        except Exception as e:
            st.error(f"ƒê√£ x·∫£y ra l·ªói: {e}")

# ==== TAB 4 ====  
with tab4:
    st.title("üìà C·∫≠p nh·∫≠t Gi√° C·ªï Phi·∫øu Realtime")
    
    st.markdown("Nh·∫≠p m√£ c·ªï phi·∫øu ƒë·ªÉ xem d·ªØ li·ªáu giao d·ªãch realtime theo 5 ph√∫t.")
    
    symbol = st.text_input("Nh·∫≠p m√£ c·ªï phi·∫øu:", value="VNM", key="symbol_tab6").strip().upper()
    
    # T√πy ch·ªçn s·ªë l∆∞·ª£ng d·ªØ li·ªáu tr·∫£ v·ªÅ
    page_size = st.number_input("Ch·ªçn s·ªë l∆∞·ª£ng b·∫£n ghi:", min_value=1, max_value=50000, value=10000)
    
    # L·∫•y v√† hi·ªÉn th·ªã th√¥ng tin realtime khi nh·∫•n n√∫t
    if st.button("üìä Hi·ªÉn th·ªã gi√° c·ªï phi·∫øu realtime", key="btn_tab6"):
        try:
            # Kh·ªüi t·∫°o ƒë·ªëi t∆∞·ª£ng stock
            stock = Vnstock().stock(symbol=symbol, source='VCI')

            # L·∫•y d·ªØ li·ªáu giao d·ªãch intraday (th·ªùi gian th·ª±c)
            df_realtime = stock.quote.intraday(symbol=symbol, page_size=page_size)

            if df_realtime is None or df_realtime.empty:
                st.warning(f"Kh√¥ng c√≥ d·ªØ li·ªáu giao d·ªãch realtime cho m√£ c·ªï phi·∫øu {symbol}.")
            else:
                # Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu th·ªùi gian v·ªÅ ƒë√∫ng ƒë·ªãnh d·∫°ng
                df_realtime['time'] = pd.to_datetime(df_realtime['time'])
                
                # Thi·∫øt l·∫≠p th·ªùi gian 5 ph√∫t
                df_realtime.set_index('time', inplace=True)
                df_realtime['5_min_interval'] = df_realtime.index.floor('5T')  # Chuy·ªÉn c√°c th·ªùi gian v·ªÅ khung 5 ph√∫t
                
                # T√≠nh to√°n volume buy v√† volume sell d·ª±a tr√™n match_type
                df_realtime['volume_buy'] = df_realtime.apply(lambda row: row['volume'] if row['match_type'] == 'Buy' else 0, axis=1)
                df_realtime['volume_sell'] = df_realtime.apply(lambda row: row['volume'] if row['match_type'] == 'Sell' else 0, axis=1)
                
                # Nh√≥m theo khung th·ªùi gian 5 ph√∫t v√† t√≠nh to√°n c√°c gi√° tr·ªã c·∫ßn thi·∫øt
                df_grouped = df_realtime.groupby('5_min_interval').agg(
                    volume_buy=('volume_buy', 'sum'),  # T·ªïng volume c·ªßa c√°c giao d·ªãch mua
                    volume_sell=('volume_sell', 'sum'),  # T·ªïng volume c·ªßa c√°c giao d·ªãch b√°n
                    avg_price=('price', 'mean')  # T√≠nh gi√° trung b√¨nh (mean)
                ).reset_index()

                # T√≠nh to√°n net (volume_buy - volume_sell)
                df_grouped['net'] = df_grouped['volume_buy'] - df_grouped['volume_sell']
                
                
                # T√≠nh t·ªïng c√°c gi√° tr·ªã
                total_volume_buy = df_grouped['volume_buy'].sum()
                total_volume_sell = df_grouped['volume_sell'].sum()
                total_net = df_grouped['net'].sum()
                avg_price_total = df_grouped['avg_price'].mean()
                
                # Hi·ªÉn th·ªã t·ªïng c√°c gi√° tr·ªã
                st.markdown(f"### T·ªïng D·ªØ Li·ªáu Giao D·ªãch (C·ªï Phi·∫øu: {symbol})")
                st.markdown(f"- **T·ªïng volume mua:** {total_volume_buy:,.0f}")
                st.markdown(f"- **T·ªïng volume b√°n:** {total_volume_sell:,.0f}")
                st.markdown(f"- **T·ªïng net (Mua - B√°n):** {total_net:,.0f}")
                st.markdown(f"- **Gi√° trung b√¨nh:** {avg_price_total:,.2f}")

                # S·∫Øp x·∫øp c·ªôt theo th·ª© t·ª± y√™u c·∫ßu
                df_grouped = df_grouped[['5_min_interval', 'avg_price', 'volume_buy', 'volume_sell', 'net']]
                df_grouped.rename(columns={'5_min_interval': 'time'}, inplace=True)

                # Hi·ªÉn th·ªã b·∫£ng d·ªØ li·ªáu theo y√™u c·∫ßu
                st.write(f"Th√¥ng tin gi√° c·ªï phi·∫øu {symbol} realtime theo t·ª´ng kho·∫£ng 5 ph√∫t:")
                st.dataframe(df_grouped.style.format({'avg_price': '{:,.2f}', 'volume_buy': '{:,.0f}', 'volume_sell': '{:,.0f}', 'net': '{:,.0f}'}), use_container_width=True)
                
                # T√πy ch·ªçn t·∫£i v·ªÅ d·ªØ li·ªáu
                st.download_button(
                    label="üì• T·∫£i d·ªØ li·ªáu realtime (.CSV)",
                    data=df_grouped.to_csv(index=False).encode("utf-8"),
                    file_name=f"{symbol}_gia_realtime_5phut.csv",
                    mime="text/csv"
                )

        except Exception as e:
            st.error(f"ƒê√£ x·∫£y ra l·ªói khi l·∫•y d·ªØ li·ªáu realtime: {e}")

            
# ==== TAB 1 ====
with tab1:
    st.title("üìä Ph√¢n T√≠ch C·ªï Phi·∫øu (D·ªØ li·ªáu Intraday)")

    st.markdown("Nh·∫≠p m√£ c·ªï phi·∫øu v√† s·ªë b·∫£n ghi ƒë·ªÉ ph√¢n t√≠ch d·ªØ li·ªáu c·ªï phi·∫øu theo t·ª´ng ph√∫t.")

    symbol = st.text_input("Nh·∫≠p m√£ c·ªï phi·∫øu:", value="VNM", key="symbol_tab7").strip().upper()
    page_size = st.number_input("Ch·ªçn s·ªë l∆∞·ª£ng b·∫£n ghi (giao d·ªãch):", min_value=1, max_value=50000, value=10000)

    if st.button("üìà Ph√¢n t√≠ch c·ªï phi·∫øu", key="btn_tab7"):
        try:
            # Kh·ªüi t·∫°o ƒë·ªëi t∆∞·ª£ng l·∫•y d·ªØ li·ªáu
            stock = Vnstock().stock(symbol=symbol, source='VCI')
            df_intraday = stock.quote.intraday(symbol=symbol, page_size=page_size)

            if df_intraday is None or df_intraday.empty:
                st.warning(f"Kh√¥ng c√≥ d·ªØ li·ªáu intraday cho m√£ {symbol}.")
            else:
                df_intraday['time'] = pd.to_datetime(df_intraday['time'])
                df_intraday.set_index('time', inplace=True)

                # G·ªôp theo t·ª´ng ph√∫t
                df_intraday['minute'] = df_intraday.index.floor('T')  # 'T' l√† vi·∫øt t·∫Øt cho 'minutely'

                # T√≠nh volume mua & b√°n
                df_intraday['volume_buy'] = df_intraday.apply(lambda x: x['volume'] if x['match_type'] == 'Buy' else 0, axis=1)
                df_intraday['volume_sell'] = df_intraday.apply(lambda x: x['volume'] if x['match_type'] == 'Sell' else 0, axis=1)

                # Nh√≥m theo t·ª´ng ph√∫t
                df_min = df_intraday.groupby('minute').agg(
                    volume_buy=('volume_buy', 'sum'),
                    volume_sell=('volume_sell', 'sum'),
                    avg_price=('price', 'mean')
                ).reset_index()

                # T√≠nh d√≤ng ti·ªÅn (Value = Gi√° * Volume)
                df_min['value_buy'] = df_min['volume_buy'] * df_min['avg_price'] * 1000
                df_min['value_sell'] = df_min['volume_sell'] * df_min['avg_price'] * 1000
                df_min['net'] = df_min['volume_buy'] - df_min['volume_sell']
                df_min['net_value'] = df_min['value_buy'] - df_min['value_sell'] 
                
                # T√≠nh kh·ªëi l∆∞·ª£ng mua/b√°n l≈©y k·∫ø
                df_min['cumulative_volume_buy'] = df_min['volume_buy'].cumsum()
                df_min['cumulative_volume_sell'] = df_min['volume_sell'].cumsum()
                df_min['cumulative_volume_net'] = df_min['cumulative_volume_buy'] - df_min['cumulative_volume_sell']

                # T√≠nh d√≤ng ti·ªÅn l≈©y k·∫ø
                df_min['cumulative_volume_net'] = df_min['net'].cumsum()
                df_min['cumulative_net'] = df_min['net_value'].cumsum()
                
                
                # Hi·ªÉn th·ªã b·∫£ng
                st.markdown(f"### D·ªØ li·ªáu c·ªï phi·∫øu theo ph√∫t cho m√£: **{symbol}**")
                st.dataframe(df_min.style.format({'avg_price': '{:,.2f}', 'volume_buy': '{:,.0f}', 'volume_sell': '{:,.0f}', 'net': '{:,.0f}', 'value_buy': '{:,.2f}',
                'value_sell': '{:,.2f}', 'net_value': '{:,.2f}', 'cumulative_volume_buy': '{:,.2f}','cumulative_volume_sell': '{:,.2f}','cumulative_volume_net': '{:,.2f}', 'cumulative_net': '{:,.2f}'}), use_container_width=True)

                #1 Bi·ªÉu ƒë·ªì d√≤ng ti·ªÅn theo Volume
                st.markdown("### üìä Bi·ªÉu ƒë·ªì d√≤ng ti·ªÅn theo ph√∫t")

                fig = go.Figure()

                # Volume mua - m√†u xanh (d∆∞∆°ng)
                fig.add_trace(go.Bar(
                    x=df_min['minute'],
                    y=df_min['volume_buy'],
                    name='Volume Mua',
                    marker=dict(color='#2ECC71', line=dict(width=0))
                ))

                # Volume b√°n - m√†u ƒë·ªè (√¢m)
                fig.add_trace(go.Bar(
                    x=df_min['minute'],
                    y=-df_min['volume_sell'],  # √¢m ƒë·ªÉ hi·ªÉn th·ªã b√™n d∆∞·ªõi tr·ª•c
                    name='Volume B√°n',
                    marker=dict(color='#E74C3C', line=dict(width=0))
                ))

                # Net Volume - ch·ªâ l√† line kh√¥ng c√≥ markers
                fig.add_trace(go.Scatter(
                    x=df_min['minute'],
                    y=df_min['volume_buy'] - df_min['volume_sell'],  # Net Volume
                    mode='lines',
                    name='Net Volume',
                    line=dict(color='#9B59B6', width=2),
                    yaxis='y2'
                ))

                # C·∫≠p nh·∫≠t layout
                fig.update_layout(
                    barmode='relative',
                    title=f"üìä D√≤ng ti·ªÅn theo ph√∫t - {symbol}",
                    xaxis_title="Th·ªùi gian",
                    yaxis=dict(
                        title="Volume (C·ªï phi·∫øu)",
                        side="left"
                    ),
                    yaxis2=dict(
                        title="Net Volume",
                        overlaying='y',
                        side='right',
                        showgrid=False
                    ),
                    template='plotly_dark',
                    hovermode='x unified',
                    legend=dict(orientation='h', yanchor='bottom', y=1.02, xanchor='right', x=1)
                )

                st.plotly_chart(fig, use_container_width=True)
                
                
                #2 Bi·ªÉu ƒë·ªì d√≤ng ti·ªÅn theo gi√° tr·ªã
                fig2 = go.Figure()

                # Gi√° tr·ªã mua - c·ªôt m√†u xanh
                fig2.add_trace(go.Bar(
                    x=df_min['minute'],
                    y=df_min['value_buy'],
                    name='Gi√° tr·ªã Mua (VND)',
                    marker=dict(color='#2ECC71', line=dict(width=0)),
                    yaxis='y'
                ))

                # Gi√° tr·ªã b√°n - c·ªôt m√†u ƒë·ªè
                fig2.add_trace(go.Bar(
                    x=df_min['minute'],
                    y=-df_min['value_sell'],  # Hi·ªÉn th·ªã gi√° tr·ªã b√°n d∆∞·ªõi tr·ª•c
                    name='Gi√° tr·ªã B√°n (VND)',
                    marker=dict(color='#E74C3C', line=dict(width=0)),
                    yaxis='y'
                ))

                # Net Value - ƒë∆∞·ªùng m√†u t√≠m
                fig2.add_trace(go.Scatter(
                    x=df_min['minute'],
                    y=df_min['value_buy'] - df_min['value_sell'],
                    mode='lines',
                    name='Net Value (VND)',
                    line=dict(color='#9B59B6', width=2),
                    yaxis='y'
                ))

                # C·∫≠p nh·∫≠t layout
                fig2.update_layout(
                    title="üí∞ D√≤ng ti·ªÅn theo gi√° tr·ªã (VND) theo ph√∫t",
                    xaxis_title="Th·ªùi gian",
                    yaxis_title="Gi√° tr·ªã (VND)",
                    template='plotly_dark',
                    barmode='relative',  # Cho ph√©p c·ªôt √¢m v√† d∆∞∆°ng ch·ªìng l√™n nhau
                    hovermode='x unified',
                    legend=dict(orientation='h', yanchor='bottom', y=1.02, xanchor='right', x=1)
                )

                st.plotly_chart(fig2, use_container_width=True)
                
                              

                # Bi·ªÉu ƒë·ªì Kh·ªëi l∆∞·ª£ng l≈©y k·∫ø
                fig5 = go.Figure()

                # Kh·ªëi l∆∞·ª£ng mua l≈©y k·∫ø - c·ªôt d∆∞∆°ng
                fig5.add_trace(go.Bar(
                    x=df_min['minute'],
                    y=df_min['cumulative_volume_buy'],
                    name='Kh·ªëi l∆∞·ª£ng Mua l≈©y k·∫ø',
                    marker=dict(color='#2ECC71', line=dict(width=0)),
                    yaxis='y'
                ))

                # Kh·ªëi l∆∞·ª£ng b√°n l≈©y k·∫ø - c·ªôt √¢m
                fig5.add_trace(go.Bar(
                    x=df_min['minute'],
                    y=-df_min['cumulative_volume_sell'],
                    name='Kh·ªëi l∆∞·ª£ng B√°n l≈©y k·∫ø',
                    marker=dict(color='#E74C3C', line=dict(width=0)),
                    yaxis='y'
                ))

                # Kh·ªëi l∆∞·ª£ng r√≤ng l≈©y k·∫ø - line m√†u xanh d∆∞∆°ng ƒë·∫≠m
                fig5.add_trace(go.Scatter(
                    x=df_min['minute'],
                    y=df_min['cumulative_volume_net'],
                    mode='lines',
                    name='Kh·ªëi l∆∞·ª£ng r√≤ng l≈©y k·∫ø',
                    line=dict(color='#9B59B6', width=2),
                    yaxis='y'
                ))

                fig5.update_layout(
                    title="üìà Kh·ªëi l∆∞·ª£ng r√≤ng l≈©y k·∫ø theo ph√∫t",
                    xaxis_title="Th·ªùi gian",
                    yaxis_title="Kh·ªëi l∆∞·ª£ng (C·ªï phi·∫øu)",
                    template='plotly_dark',
                    barmode='relative',
                    hovermode='x unified',
                    legend=dict(orientation='h', yanchor='bottom', y=1.02, xanchor='right', x=1)
                )

                st.plotly_chart(fig5, use_container_width=True)
                
                #4 Bi·ªÉu ƒë·ªì d√≤ng ti·ªÅn l≈©y k·∫ø
                fig6 = px.line(
                    df_min, x='minute', y='cumulative_net',
                    title="üìà Gi√° tr·ªã D√≤ng ti·ªÅn r√≤ng l≈©y k·∫ø theo ph√∫t",
                    labels={'cumulative_net': 'D√≤ng ti·ªÅn r√≤ng l≈©y k·∫ø (VND)', 'minute': 'Th·ªùi gian'}
                )
                fig6.update_traces(line=dict(color='#2980B9', width=2))
                st.plotly_chart(fig6, use_container_width=True)

                # 1. T√≠nh to√°n Volume mua, b√°n v√† volume r√≤ng theo m·ª©c gi√° (Net Volume theo Price Level)
                df_price_level = df_intraday.groupby('price').agg(
                    volume_buy=('volume_buy', 'sum'),
                    volume_sell=('volume_sell', 'sum'),
                ).reset_index()

                # T√≠nh volume r√≤ng theo gi√°
                df_price_level['net_volume'] = df_price_level['volume_buy'] - df_price_level['volume_sell']

                # T√≠nh gi√° tr·ªã r√≤ng = volume * gi√°
                df_price_level['net_value'] = df_price_level['net_volume'] * df_price_level['price'] *1000

                # T√≠nh gi√° tr·ªã mua v√† b√°n
                df_price_level['buy_value'] = df_price_level['volume_buy'] * df_price_level['price'] *1000
                df_price_level['sell_value'] = df_price_level['volume_sell'] * df_price_level['price'] *1000

                # 2. V·∫Ω bi·ªÉu ƒë·ªì Volume mua, b√°n, v√† volume r√≤ng theo m·ª©c gi√° (ƒê·ªì th·ªã 1)
                fig8 = go.Figure()

                # Volume mua theo m·ª©c gi√° - m√†u xanh d∆∞∆°ng
                fig8.add_trace(go.Bar(
                    x=df_price_level['price'],
                    y=df_price_level['volume_buy'],
                    name='Volume Mua',
                    marker=dict(color='#2ECC71', line=dict(width=0)),
                ))

                # Volume b√°n theo m·ª©c gi√° - m√†u ƒë·ªè
                fig8.add_trace(go.Bar(
                    x=df_price_level['price'],
                    y=-df_price_level['volume_sell'],  # D√πng d·∫•u √¢m ƒë·ªÉ hi·ªÉn th·ªã d∆∞·ªõi tr·ª•c
                    name='Volume B√°n',
                    marker=dict(color='#E74C3C', line=dict(width=0)),
                ))

                # Volume r√≤ng theo m·ª©c gi√° - ƒë∆∞·ªùng m√†u t√≠m
                fig8.add_trace(go.Scatter(
                    x=df_price_level['price'],
                    y=df_price_level['net_volume'],
                    mode='lines+markers',
                    name='Net Volume',
                    line=dict(color='#9B59B6', width=2),
                    marker=dict(color='#9B59B6', size=6, symbol='circle')  # Dot v·ªõi ƒë∆∞·ªùng tr√≤n
                ))

                # C·∫≠p nh·∫≠t layout cho bi·ªÉu ƒë·ªì Volume
                fig8.update_layout(
                    title="üìä Volume Mua, B√°n v√† Volume R√≤ng theo M·ª©c Gi√°",
                    xaxis_title="M·ª©c Gi√° (VND)",
                    yaxis_title="Volume (C·ªï phi·∫øu)",
                    template='plotly_dark',
                    hovermode='x unified',
                    barmode='relative',
                    legend=dict(orientation='h', yanchor='bottom', y=1.02, xanchor='right', x=1)
                )

                # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì Volume
                st.plotly_chart(fig8, use_container_width=True)

                # 3. V·∫Ω bi·ªÉu ƒë·ªì Gi√° tr·ªã mua, b√°n, v√† gi√° tr·ªã r√≤ng theo m·ª©c gi√° (ƒê·ªì th·ªã 2)
                fig9 = go.Figure()

                # Gi√° tr·ªã mua theo m·ª©c gi√° - m√†u xanh l√°
                fig9.add_trace(go.Bar(
                    x=df_price_level['price'],
                    y=df_price_level['buy_value'],
                    name='Gi√° Tr·ªã Mua',
                    marker=dict(color='#2ECC71', line=dict(width=0)),
                ))

                # Gi√° tr·ªã b√°n theo m·ª©c gi√° - m√†u cam
                fig9.add_trace(go.Bar(
                    x=df_price_level['price'],
                    y=-df_price_level['sell_value'],  # D√πng d·∫•u √¢m ƒë·ªÉ hi·ªÉn th·ªã d∆∞·ªõi tr·ª•c
                    name='Gi√° Tr·ªã B√°n',
                    marker=dict(color='#E74C3C', line=dict(width=0)),
                ))

                # Gi√° tr·ªã r√≤ng theo m·ª©c gi√° - ƒë∆∞·ªùng m√†u v√†ng
                fig9.add_trace(go.Scatter(
                    x=df_price_level['price'],
                    y=df_price_level['net_value'],
                    mode='lines+markers',
                    name='Net Value',
                    line=dict(color='#9B59B6', width=2, dash='dot'),
                    marker=dict(color='#9B59B6', size=6, symbol='circle')  # Dot v·ªõi ƒë∆∞·ªùng tr√≤n
                ))

                # C·∫≠p nh·∫≠t layout cho bi·ªÉu ƒë·ªì Gi√° tr·ªã
                fig9.update_layout(
                    title="üìä Gi√° Tr·ªã Mua, B√°n v√† Gi√° Tr·ªã R√≤ng theo M·ª©c Gi√°",
                    xaxis_title="M·ª©c Gi√° (VND)",
                    yaxis_title="Gi√° Tr·ªã (VND)",
                    template='plotly_dark',
                    hovermode='x unified',
                    barmode='relative',
                    legend=dict(orientation='h', yanchor='bottom', y=1.02, xanchor='right', x=1)
                )

                # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì Gi√° tr·ªã
                st.plotly_chart(fig9, use_container_width=True)                

        except Exception as e:
            st.error(f"ƒê√£ x·∫£y ra l·ªói: {str(e)}")


# ==== TAB 6 ====
# ==== TAB 6 ====
with tab6:
    with st.expander("üìä Bi·ªÉu ƒë·ªì Treemap", expanded=True):
        st.title("üìä Treemap ‚Äì Gi√° C·ªï Phi·∫øu Theo Ng√†nh")
        st.markdown("Ch·ªçn nh√≥m ng√†nh v√† ng√†y ƒë·ªÉ xem bi·ªÉu ƒë·ªì gi√° tr·ªã giao d·ªãch c·ªßa c√°c c·ªï phi·∫øu.")
        
        # T·∫°o t·ª´ ƒëi·ªÉn ch·ª©a c√°c nh√≥m ng√†nh v√† m√£ c·ªï phi·∫øu
        sector_map = {
            'VN30': ['ACB','BCM','BID','BVH','CTG', 'FPT','GAS','GVR','HDB','HPG', 'LPB','MBB','MSN', 'MWG','PLX','SAB','SHB','SSB','SSI','STB','TCB','TPB','VCB','VHM','VIB','VIC', 'VJC','VNM','VPB','VRE'],
            'Ng√¢n h√†ng': ['ACB', 'BID', 'CTG', 'EIB', 'MBB', 'NVB', 'SHB', 'STB', 'VCB', 'VIB', 'LPB', 'TPB', 'OCB', 'SSB', 'HDB', 'TCB', 'VPB'],
            'Ch·ª©ng kho√°n': ['AGR', 'ART', 'BSI', 'BVS', 'CTS', 'FTS', 'HCM', 'MBS', 'SBS', 'SHS', 'SSI', 'TVB', 'TVS', 'VCI', 'VDS', 'VIX', 'VND'],
            'Th√©p': ['HPG', 'HSG', 'NKG', 'POM', 'SHA', 'TIS', 'TVN', 'VGS', 'HMC', 'SHI', 'SMC', 'TLH'],
            'B·∫•t ƒë·ªông s·∫£n': ['IJC', 'LDG', 'NVT', 'AMD', 'C21', 'CEO', 'D2D', 'DIG', 'DRH', 'DXG', 'FLC', 'HAR', 'HDC', 'HDG', 'HLD', 'HQC', 'ITC', 'KDH', 'NBB', 'NDN', 'NLG', 'NTL', 'NVL', 'PDR', 'QCG', 'SCR', 'SJS', 'TDH', 'TIG', 'VIC', 'VPH', 'IDV', 'ITA', 'KBC', 'LHG', 'VC3', 'LGL'],
            'C√¥ng ngh·ªá': ['CMG', 'SGT', 'ITD', 'VEC', 'FPT', 'ELC', 'ABC'],
            'B√°n l·∫ª': ['MSN', 'MWG', 'DGW', 'PNJ', 'FRT'],
            'ƒêi·ªán n∆∞·ªõc': ['BWE', 'VCW', 'DQC', 'GDT', 'RAL', 'CHP', 'NT2', 'PPC', 'SBA', 'SJD', 'VSH'],
            'D·∫ßu kh√≠': ['PVB', 'PVC', 'PVD', 'PVS', 'ASP', 'CNG', 'GAS', 'PGC', 'PGS', 'PLX', 'PVG', 'PVO'],
            'X√¢y d·ª±ng': ['C32', 'C47', 'CII', 'CTD', 'CTI', 'FCN', 'HBC', 'HC3', 'HTI', 'HUT', 'L14', 'MCG', 'LCG', 'PC1', 'DPG', 'PHC', 'PVX', 'PXS', 'SD5', 'SD6', 'SD9', 'TCD', 'UIC', 'VCG', 'VMC', 'VNE', 'THG', 'VPD', 'TV2'],
            'ƒê·∫ßu t∆∞ c√¥ng': ['HHV', 'LCG', 'HTI', 'DPG', 'EVG'],
            'Th·ª±c ph·∫©m': ['MSN', 'TNA', 'VNM', 'LSS', 'QNS', 'SBT', 'MCH', 'VOC', 'NAF', 'SCD', 'SAB', 'SMB', 'KDC'],
            'B·∫£o hi·ªÉm': ['VNR', 'ABI', 'BIC', 'BMI', 'MIG', 'PGI', 'PVI', 'BVH'],
            'Th·ªßy s·∫£n': ['ANV', 'ASM', 'FMC', 'HVG', 'IDI', 'SSN', 'VHC'],
            'D·ªát may': ['ADS', 'EVE', 'FTM', 'GMC', 'HTG', 'KMR', 'STK', 'TCM', 'TNG', 'TVT', 'VGG', 'VGT'],
            'Cao su': ['DPR', 'DRI', 'HRC', 'PHR', 'TRC'],
            'D∆∞·ª£c ph·∫©m': ['DCL', 'DHG', 'DHT', 'IMP', 'TRA', 'DVN', 'DBD'],
            'V·∫≠n t·∫£i': ['PVT', 'GSP', 'SWC', 'VIP', 'VOS', 'VTO', 'SKG', 'SRT', 'VNS', 'SAS'],
            'C·∫£ng bi·ªÉn': ['HAH', 'STG', 'GMD', 'PDN', 'PHP', 'SGP', 'VSC'],
            'Nh·ª±a': ['AAA', 'BMP', 'DAG', 'DNP', 'NTP', 'RDP'],
            'Khu CN': ['KBC', 'SZC', 'TIP', 'BCM', 'VGC', 'IDC'],
            'Ph√¢n b√≥n': ['HAI', 'LTG', 'TSC', 'VFG', 'BFC', 'DCM', 'DDV', 'DPM', 'LAS', 'QBS', 'SFG', 'CSM', 'DRC', 'SRC', 'CSV', 'DGC', 'PLC', 'LIX', 'NET']
            # Add other sectors as required...
        }

        # Ch·ªçn nh√≥m ng√†nh t·ª´ dropdown
        selected_sector = st.selectbox('Ch·ªçn nh√≥m ng√†nh:', options=list(sector_map.keys()), index=0, key="sector_select_1")

        # Ch·ªçn ng√†y
        selected_date = st.date_input("Ch·ªçn ng√†y", value=date.today(), key="date_input_1")

        # L·∫•y danh s√°ch m√£ c·ªï phi·∫øu theo nh√≥m ng√†nh ƒë√£ ch·ªçn
        stock_symbols = sector_map.get(selected_sector, [])

        if st.button("üìä Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì"):
            try:
                # Kh·ªüi t·∫°o ƒë·ªëi t∆∞·ª£ng Vnstock
                vn = Vnstock()

                df_list = []
                for symbol in stock_symbols:
                    stock = vn.stock(symbol=symbol, source='VCI')
                    df = stock.quote.history(start='2020-01-01', end=str(selected_date))
                    if df is not None and not df.empty:
                        df['symbol'] = symbol
                        df_list.append(df)

                df_all = pd.concat(df_list, ignore_index=True)
                df_all['time'] = pd.to_datetime(df_all['time'])

                # L·ªçc ra c√°c d√≤ng d·ªØ li·ªáu tr∆∞·ªõc ho·∫∑c b·∫±ng ng√†y ƒë∆∞·ª£c ch·ªçn
                df_filtered = df_all[df_all['time'] <= pd.to_datetime(selected_date)]

                # L·∫•y 2 d√≤ng g·∫ßn nh·∫•t (ng√†y ƒë∆∞·ª£c ch·ªçn v√† ng√†y tr∆∞·ªõc ƒë√≥) cho m·ªói m√£
                df_latest = df_filtered.sort_values(['symbol', 'time']).groupby('symbol').tail(2)

                # T√≠nh close_previous
                df_latest = df_latest.sort_values(['symbol', 'time'])
                df_latest['close_previous'] = df_latest.groupby('symbol')['close'].shift(1)

                # T√≠nh thay ƒë·ªïi
                df_latest['change'] = df_latest['close'] - df_latest['close_previous']
                df_latest['change_pct'] = (df_latest['change'] / df_latest['close_previous']) * 100
                df_latest['color'] = df_latest['change'].apply(
                    lambda x: 'green' if x > 0 else ('red' if x < 0 else 'yellow')
                )

                # Ch·ªâ l·∫•y d√≤ng m·ªõi nh·∫•t ƒë·ªÉ v·∫Ω treemap
                df_latest = df_latest.groupby('symbol').tail(1)

                # Chu·∫©n b·ªã d·ªØ li·ªáu v·∫Ω treemap
                treemap_data = df_latest[['symbol', 'color', 'close', 'change_pct', 'volume']]
                
                # ƒê·ªãnh d·∫°ng gi√° tr·ªã hi·ªÉn th·ªã
                treemap_data['close_formatted'] = treemap_data['close'].apply(lambda x: f"{x:.2f}")
                treemap_data['volume_formatted'] = treemap_data['volume'].apply(lambda x: f"{x:,.0f}")

                # T·∫°o bi·ªÉu ƒë·ªì Treemap
                fig = go.Figure(go.Treemap(
                    labels=treemap_data['symbol'],
                    parents=[''] * len(treemap_data),
                    values=treemap_data['volume'],
                    
                    text=treemap_data['change_pct'].apply(lambda x: f"({x:.2f}%)"),  # Ph·∫ßn trƒÉm thay ƒë·ªïi trong √¥
                    textinfo="label+text",
                    textfont=dict(color='white', size=16),

                    customdata=treemap_data[['change_pct', 'close_formatted', 'volume_formatted']].values,

                    hovertemplate=(
                        "<b>%{label}</b><br>"
                        "Thay ƒë·ªïi: (%{customdata[0]:.2f}%)<br>"
                        "Gi√° ƒë√≥ng c·ª≠a: %{customdata[1]}<br>"
                        "Kh·ªëi l∆∞·ª£ng: %{customdata[2]}<br>"
                        "<extra></extra>"
                    ),

                    marker=dict(
                        colors=treemap_data['color'].apply(
                            lambda x: '#2ECC71' if x == 'green' else ('#E74C3C' if x == 'red' else '#F1C40F')
                        )
                    )
                ))

                fig.update_layout(
                    title=f"Bi·ªÉu ƒë·ªì Treemap ‚Äì Ng√†nh: {selected_sector} | Ng√†y: {selected_date}",
                    margin=dict(t=50, l=25, r=25, b=25)
                )

                st.plotly_chart(fig, use_container_width=True)

            except Exception as e:
                st.error(f"ƒê√£ x·∫£y ra l·ªói: {e}")   
                
# ==== TAB 7 ====            
with tab7:
    with st.expander("üìä Bi·ªÉu ƒë·ªì Treemap", expanded=True):
        st.title("üìä Treemap ‚Äì Gi√° C·ªï Phi·∫øu Theo Ng√†nh (Realtime)")
        st.markdown("Ch·ªçn nh√≥m ng√†nh v√† ng√†y ƒë·ªÉ xem bi·ªÉu ƒë·ªì gi√° tr·ªã giao d·ªãch c·ªßa c√°c c·ªï phi·∫øu.")

        selected_sector = st.selectbox('Ch·ªçn nh√≥m ng√†nh:', options=list(sector_map.keys()), index=0, key="sector_select_2_unique")
        selected_date = st.date_input("Ch·ªçn ng√†y", value=date.today(), key="date_input_2_unique")
        stock_symbols = sector_map.get(selected_sector, [])

        if st.button("üìä Hi·ªÉn th·ªã"):
            try:
                vn = Vnstock()
                df_hist_list = []
                df_realtime_list = []

                for symbol in stock_symbols:
                    stock = vn.stock(symbol=symbol, source='VCI')

                    # D·ªØ li·ªáu l·ªãch s·ª≠ ƒë·ªÉ l·∫•y gi√° h√¥m tr∆∞·ªõc
                    df_hist = stock.quote.history(start='2020-01-01', end=str(selected_date))
                    if df_hist is not None and not df_hist.empty:
                        df_hist['symbol'] = symbol
                        df_hist_list.append(df_hist)

                    # D·ªØ li·ªáu realtime ƒë·ªÉ l·∫•y gi√° cu·ªëi c√πng v√† volume l≈©y k·∫ø
                    df_intraday = stock.quote.intraday(symbol=symbol, page_size=10000)
                    if df_intraday is not None and not df_intraday.empty:
                        df_intraday['symbol'] = symbol
                        last_price = df_intraday.iloc[-1]['price']
                        total_volume = df_intraday['volume'].sum()
                        df_realtime_list.append({
                            'symbol': symbol,
                            'last_price': last_price,
                            'volume': total_volume
                        })

                # T·ªïng h·ª£p d·ªØ li·ªáu realtime
                df_realtime = pd.DataFrame(df_realtime_list)

                # T√≠nh gi√° h√¥m tr∆∞·ªõc t·ª´ d·ªØ li·ªáu l·ªãch s·ª≠
                df_all = pd.concat(df_hist_list, ignore_index=True)
                df_all['time'] = pd.to_datetime(df_all['time'])
                df_filtered = df_all[df_all['time'] <= pd.to_datetime(selected_date)]
                df_latest = df_filtered.sort_values(['symbol', 'time']).groupby('symbol').tail(2)
                df_latest = df_latest.sort_values(['symbol', 'time'])
                df_latest['close_previous'] = df_latest.groupby('symbol')['close'].shift(1)
                df_previous = df_latest.groupby('symbol').tail(1)[['symbol', 'close_previous']]

                # G·ªôp d·ªØ li·ªáu realtime v√† close_previous
                df_merged = pd.merge(df_realtime, df_previous, on='symbol', how='left')
                df_merged['change'] = df_merged['last_price'] - df_merged['close_previous']
                df_merged['change_pct'] = (df_merged['change'] / df_merged['close_previous']) * 100
                df_merged['color'] = df_merged['change'].apply(
                    lambda x: 'green' if x > 0 else ('red' if x < 0 else 'yellow')
                )

                # ƒê·ªãnh d·∫°ng hi·ªÉn th·ªã
                df_merged['close_formatted'] = df_merged['last_price'].apply(lambda x: f"{x:,.2f}")
                df_merged['volume_formatted'] = df_merged['volume'].apply(lambda x: f"{x:,.0f}")
                
                # Chu·∫©n b·ªã b·∫£ng hi·ªÉn th·ªã
                df_merged_display = df_merged[['symbol', 'last_price', 'volume', 'close_previous', 'change', 'change_pct']]
                df_merged_display.columns = ['M√£ CP', 'Gi√° hi·ªán t·∫°i', 'Kh·ªëi l∆∞·ª£ng l≈©y k·∫ø', 'Gi√° h√¥m tr∆∞·ªõc', 'Thay ƒë·ªïi', 'Thay ƒë·ªïi (%)']
                df_merged_display['Gi√° hi·ªán t·∫°i'] = df_merged_display['Gi√° hi·ªán t·∫°i'].apply(lambda x: f"{x:,.2f}")
                df_merged_display['Kh·ªëi l∆∞·ª£ng l≈©y k·∫ø'] = df_merged_display['Kh·ªëi l∆∞·ª£ng l≈©y k·∫ø'].apply(lambda x: f"{x:,.0f}")
                df_merged_display['Gi√° h√¥m tr∆∞·ªõc'] = df_merged_display['Gi√° h√¥m tr∆∞·ªõc'].apply(lambda x: f"{x:,.2f}")
                df_merged_display['Thay ƒë·ªïi'] = df_merged_display['Thay ƒë·ªïi'].apply(lambda x: f"{x:,.2f}")
                df_merged_display['Thay ƒë·ªïi (%)'] = df_merged_display['Thay ƒë·ªïi (%)'].apply(lambda x: f"{x:.2f}%")

                # Hi·ªÉn th·ªã b·∫£ng
                st.markdown("### üìã B·∫£ng d·ªØ li·ªáu chi ti·∫øt")
                st.dataframe(df_merged_display, use_container_width=True)

                # V·∫Ω Treemap
                fig = go.Figure(go.Treemap(
                    labels=df_merged['symbol'],
                    parents=[''] * len(df_merged),
                    values=df_merged['volume'],
                    text=df_merged['change_pct'].apply(lambda x: f"({x:.2f}%)"),
                    textinfo="label+text",
                    textfont=dict(color='white', size=16),
                    customdata=df_merged[['change_pct', 'close_formatted', 'volume_formatted']].values,
                    hovertemplate=(
                        "<b>%{label}</b><br>"
                        "Thay ƒë·ªïi: (%{customdata[0]:.2f}%)<br>"
                        "Gi√° hi·ªán t·∫°i: %{customdata[1]}<br>"
                        "Kh·ªëi l∆∞·ª£ng: %{customdata[2]}<br>"
                        "<extra></extra>"
                    ),
                    marker=dict(
                        colors=df_merged['color'].apply(
                            lambda x: '#2ECC71' if x == 'green' else ('#E74C3C' if x == 'red' else '#F1C40F')
                        )
                    )
                ))

                fig.update_layout(
                    title=f"Bi·ªÉu ƒë·ªì Treemap ‚Äì Ng√†nh: {selected_sector} | Ng√†y: {selected_date}",
                    margin=dict(t=50, l=25, r=25, b=25)
                )

                st.plotly_chart(fig, use_container_width=True)

            except Exception as e:
                st.error(f"ƒê√£ x·∫£y ra l·ªói: {e}")
                
