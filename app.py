from analyzer import analyze_stock, export_to_excel
from datetime import date
from vnstock import Vnstock
from concurrent.futures import ThreadPoolExecutor
from plotly.subplots import make_subplots
from io import StringIO
from datetime import timedelta
import plotly.graph_objects as go
import plotly.express as px
import matplotlib.pyplot as plt
import seaborn as sns
import math
import streamlit.components.v1 as components
import time
import os
import pandas as pd
import streamlit as st
import seaborn as sns
import re
import plotly.figure_factory as ff



st.set_page_config(page_title='Ph√¢n T√≠ch C·ªï Phi·∫øu', layout='wide')
tab1, tab2, tab3, tab4, tab6, tab8 = st.tabs([
    'üí∞ Ph√¢n T√≠ch D√≤ng Ti·ªÅn C·ªï Phi·∫øu',
    'üóÉÔ∏è Ph√¢n T√≠ch D√≤ng Ti·ªÅn Theo Nh√≥m',    
    'üìä Bi·ªÉu ƒê·ªì Gi√°',
    'üìà C·∫≠p nh·∫≠t Gi√° C·ªï Phi·∫øu Realtime',
    'üíπ Ph√¢n T√≠ch Th·ªã Tr∆∞·ªùng',
    'üíº Ph√¢n T√≠ch T√†i Ch√≠nh Doanh Nghi·ªáp'
    
])
# H√†m chuy·ªÉn ƒë·ªïi s·ªë th√†nh d·∫°ng r√∫t g·ªçn K, M, B
def format_number(value):
    if abs(value) >= 1_000_000_000:
        return f"{value / 1_000_000_000:.1f}B"  # T·ª∑ (Billion)
    elif abs(value) >= 1_000_000:
        return f"{value / 1_000_000:.1f}M"  # Tri·ªáu (Million)
    elif abs(value) >= 1_000:
        return f"{value / 1_000:.1f}K"  # Ngh√¨n (Thousand)
    else:
        return f"{value:.0f}"  # Kh√¥ng thay ƒë·ªïi n·∫øu nh·ªè h∆°n 1000
        
# ==== TAB 1 ====
with tab1:
    st.title("üí∞ Ph√¢n T√≠ch C·ªï Phi·∫øu (D·ªØ li·ªáu Intraday)")

    st.markdown("Nh·∫≠p m√£ c·ªï phi·∫øu v√† s·ªë b·∫£n ghi ƒë·ªÉ ph√¢n t√≠ch d·ªØ li·ªáu c·ªï phi·∫øu theo t·ª´ng ph√∫t.")

    symbol = st.text_input("Nh·∫≠p m√£ c·ªï phi·∫øu:", value="VNM", key="symbol_tab7").strip().upper()
    page_size = st.number_input("Ch·ªçn s·ªë l∆∞·ª£ng b·∫£n ghi (giao d·ªãch):", min_value=1, max_value=50000, value=10000)

    if st.button("üí∞ Ph√¢n t√≠ch c·ªï phi·∫øu", key="btn_tab7"):
        try:
            # Kh·ªüi t·∫°o ƒë·ªëi t∆∞·ª£ng l·∫•y d·ªØ li·ªáu
            stock = Vnstock().stock(symbol=symbol, source='VCI')
            df_intraday = stock.quote.intraday(symbol=symbol, page_size=page_size)

            if df_intraday is None or df_intraday.empty:
                st.warning(f"Kh√¥ng c√≥ d·ªØ li·ªáu intraday cho m√£ {symbol}.")
            else:
                df_intraday['time'] = pd.to_datetime(df_intraday['time'])
                df_intraday.set_index('time', inplace=True)

                # G·ªôp theo t·ª´ng ph√∫t
                df_intraday['minute'] = df_intraday.index.floor('T')  # 'T' l√† vi·∫øt t·∫Øt cho 'minutely'

                # T√≠nh volume mua & b√°n
                df_intraday['volume_buy'] = df_intraday.apply(lambda x: x['volume'] if x['match_type'] == 'Buy' else 0, axis=1)
                df_intraday['volume_sell'] = df_intraday.apply(lambda x: x['volume'] if x['match_type'] == 'Sell' else 0, axis=1)

                # Nh√≥m theo t·ª´ng ph√∫t
                df_min = df_intraday.groupby('minute').agg(
                    volume_buy=('volume_buy', 'sum'),
                    volume_sell=('volume_sell', 'sum'),
                    avg_price=('price', 'mean')
                ).reset_index()

                # T√≠nh d√≤ng ti·ªÅn (Value = Gi√° * Volume)
                df_min['value_buy'] = df_min['volume_buy'] * df_min['avg_price'] * 1000
                df_min['value_sell'] = df_min['volume_sell'] * df_min['avg_price'] * 1000
                df_min['net'] = df_min['volume_buy'] - df_min['volume_sell']
                df_min['net_value'] = df_min['value_buy'] - df_min['value_sell'] 
                
                # T√≠nh kh·ªëi l∆∞·ª£ng mua/b√°n l≈©y k·∫ø
                df_min['cumulative_volume_buy'] = df_min['volume_buy'].cumsum()
                df_min['cumulative_volume_sell'] = df_min['volume_sell'].cumsum()
                df_min['cumulative_volume_net'] = df_min['cumulative_volume_buy'] - df_min['cumulative_volume_sell']

                # T√≠nh d√≤ng ti·ªÅn l≈©y k·∫ø
                df_min['cumulative_volume_net'] = df_min['net'].cumsum()
                df_min['cumulative_net'] = df_min['net_value'].cumsum()
                
                
                # Hi·ªÉn th·ªã b·∫£ng
                st.markdown(f"### D·ªØ li·ªáu c·ªï phi·∫øu theo ph√∫t cho m√£: **{symbol}**")
                st.dataframe(df_min.style.format({'avg_price': '{:,.2f}', 'volume_buy': '{:,.0f}', 'volume_sell': '{:,.0f}', 'net': '{:,.0f}', 'value_buy': '{:,.2f}',
                'value_sell': '{:,.2f}', 'net_value': '{:,.2f}', 'cumulative_volume_buy': '{:,.2f}','cumulative_volume_sell': '{:,.2f}','cumulative_volume_net': '{:,.2f}', 'cumulative_net': '{:,.2f}'}), use_container_width=True)

                #1 Bi·ªÉu ƒë·ªì d√≤ng ti·ªÅn theo Volume
                st.markdown("### üìä Bi·ªÉu ƒë·ªì d√≤ng ti·ªÅn theo ph√∫t")

                fig = go.Figure()

                # Volume mua - m√†u xanh (d∆∞∆°ng)
                fig.add_trace(go.Bar(
                    x=df_min['minute'],
                    y=df_min['volume_buy'],
                    name='Volume Mua',
                    marker=dict(color='#2ECC71', line=dict(width=0))
                ))

                # Volume b√°n - m√†u ƒë·ªè (√¢m)
                fig.add_trace(go.Bar(
                    x=df_min['minute'],
                    y=-df_min['volume_sell'],  # √¢m ƒë·ªÉ hi·ªÉn th·ªã b√™n d∆∞·ªõi tr·ª•c
                    name='Volume B√°n',
                    marker=dict(color='#E74C3C', line=dict(width=0))
                ))

                # Net Volume - ch·ªâ l√† line kh√¥ng c√≥ markers
                fig.add_trace(go.Scatter(
                    x=df_min['minute'],
                    y=df_min['volume_buy'] - df_min['volume_sell'],  # Net Volume
                    mode='lines',
                    name='Net Volume',
                    line=dict(color='#9B59B6', width=2),
                    yaxis='y2'
                ))

                # C·∫≠p nh·∫≠t layout
                fig.update_layout(
                    barmode='relative',
                    title=f"üìä D√≤ng ti·ªÅn theo ph√∫t - {symbol}",
                    xaxis_title="Th·ªùi gian",
                    yaxis=dict(
                        title="Volume (C·ªï phi·∫øu)",
                        side="left"
                    ),
                    yaxis2=dict(
                        title="Net Volume",
                        overlaying='y',
                        side='right',
                        showgrid=False
                    ),
                    template='plotly_dark',
                    hovermode='x unified',
                    legend=dict(orientation='h', yanchor='bottom', y=1.02, xanchor='right', x=1)
                )

                st.plotly_chart(fig, use_container_width=True)
                
                
                #2 Bi·ªÉu ƒë·ªì d√≤ng ti·ªÅn theo gi√° tr·ªã
                fig2 = go.Figure()

                # Gi√° tr·ªã mua - c·ªôt m√†u xanh
                fig2.add_trace(go.Bar(
                    x=df_min['minute'],
                    y=df_min['value_buy'],
                    name='Gi√° tr·ªã Mua (VND)',
                    marker=dict(color='#2ECC71', line=dict(width=0)),
                    yaxis='y'
                ))

                # Gi√° tr·ªã b√°n - c·ªôt m√†u ƒë·ªè
                fig2.add_trace(go.Bar(
                    x=df_min['minute'],
                    y=-df_min['value_sell'],  # Hi·ªÉn th·ªã gi√° tr·ªã b√°n d∆∞·ªõi tr·ª•c
                    name='Gi√° tr·ªã B√°n (VND)',
                    marker=dict(color='#E74C3C', line=dict(width=0)),
                    yaxis='y'
                ))

                # Net Value - ƒë∆∞·ªùng m√†u t√≠m
                fig2.add_trace(go.Scatter(
                    x=df_min['minute'],
                    y=df_min['value_buy'] - df_min['value_sell'],
                    mode='lines',
                    name='Net Value (VND)',
                    line=dict(color='#9B59B6', width=2),
                    yaxis='y'
                ))

                # C·∫≠p nh·∫≠t layout
                fig2.update_layout(
                    title="üí∞ D√≤ng ti·ªÅn theo gi√° tr·ªã (VND) theo ph√∫t",
                    xaxis_title="Th·ªùi gian",
                    yaxis_title="Gi√° tr·ªã (VND)",
                    template='plotly_dark',
                    barmode='relative',  # Cho ph√©p c·ªôt √¢m v√† d∆∞∆°ng ch·ªìng l√™n nhau
                    hovermode='x unified',
                    legend=dict(orientation='h', yanchor='bottom', y=1.02, xanchor='right', x=1)
                )

                st.plotly_chart(fig2, use_container_width=True)
                
                              

                # Bi·ªÉu ƒë·ªì Kh·ªëi l∆∞·ª£ng l≈©y k·∫ø
                fig5 = go.Figure()

                # Kh·ªëi l∆∞·ª£ng mua l≈©y k·∫ø - c·ªôt d∆∞∆°ng
                fig5.add_trace(go.Bar(
                    x=df_min['minute'],
                    y=df_min['cumulative_volume_buy'],
                    name='Kh·ªëi l∆∞·ª£ng Mua l≈©y k·∫ø',
                    marker=dict(color='#2ECC71', line=dict(width=0)),
                    yaxis='y'
                ))

                # Kh·ªëi l∆∞·ª£ng b√°n l≈©y k·∫ø - c·ªôt √¢m
                fig5.add_trace(go.Bar(
                    x=df_min['minute'],
                    y=-df_min['cumulative_volume_sell'],
                    name='Kh·ªëi l∆∞·ª£ng B√°n l≈©y k·∫ø',
                    marker=dict(color='#E74C3C', line=dict(width=0)),
                    yaxis='y'
                ))

                # Kh·ªëi l∆∞·ª£ng r√≤ng l≈©y k·∫ø - line m√†u xanh d∆∞∆°ng ƒë·∫≠m
                fig5.add_trace(go.Scatter(
                    x=df_min['minute'],
                    y=df_min['cumulative_volume_net'],
                    mode='lines',
                    name='Kh·ªëi l∆∞·ª£ng r√≤ng l≈©y k·∫ø',
                    line=dict(color='#9B59B6', width=2),
                    yaxis='y'
                ))

                fig5.update_layout(
                    title="üìà Kh·ªëi l∆∞·ª£ng r√≤ng l≈©y k·∫ø theo ph√∫t",
                    xaxis_title="Th·ªùi gian",
                    yaxis_title="Kh·ªëi l∆∞·ª£ng (C·ªï phi·∫øu)",
                    template='plotly_dark',
                    barmode='relative',
                    hovermode='x unified',
                    legend=dict(orientation='h', yanchor='bottom', y=1.02, xanchor='right', x=1)
                )

                st.plotly_chart(fig5, use_container_width=True)
                
                #4 Bi·ªÉu ƒë·ªì d√≤ng ti·ªÅn l≈©y k·∫ø
                fig6 = px.line(
                    df_min, x='minute', y='cumulative_net',
                    title="üìà Gi√° tr·ªã D√≤ng ti·ªÅn r√≤ng l≈©y k·∫ø theo ph√∫t",
                    labels={'cumulative_net': 'D√≤ng ti·ªÅn r√≤ng l≈©y k·∫ø (VND)', 'minute': 'Th·ªùi gian'}
                )
                fig6.update_traces(line=dict(color='#2980B9', width=2))
                st.plotly_chart(fig6, use_container_width=True)

                # 1. T√≠nh to√°n Volume mua, b√°n v√† volume r√≤ng theo m·ª©c gi√° (Net Volume theo Price Level)
                df_price_level = df_intraday.groupby('price').agg(
                    volume_buy=('volume_buy', 'sum'),
                    volume_sell=('volume_sell', 'sum'),
                ).reset_index()

                # T√≠nh volume r√≤ng theo gi√°
                df_price_level['net_volume'] = df_price_level['volume_buy'] - df_price_level['volume_sell']

                # T√≠nh gi√° tr·ªã r√≤ng = volume * gi√°
                df_price_level['net_value'] = df_price_level['net_volume'] * df_price_level['price'] *1000

                # T√≠nh gi√° tr·ªã mua v√† b√°n
                df_price_level['buy_value'] = df_price_level['volume_buy'] * df_price_level['price'] *1000
                df_price_level['sell_value'] = df_price_level['volume_sell'] * df_price_level['price'] *1000

                # 2. V·∫Ω bi·ªÉu ƒë·ªì Volume mua, b√°n, v√† volume r√≤ng theo m·ª©c gi√° (ƒê·ªì th·ªã 1)
                fig8 = go.Figure()

                # Volume mua theo m·ª©c gi√° - m√†u xanh d∆∞∆°ng
                fig8.add_trace(go.Bar(
                    x=df_price_level['price'],
                    y=df_price_level['volume_buy'],
                    name='Volume Mua',
                    marker=dict(color='#2ECC71', line=dict(width=0)),
                ))

                # Volume b√°n theo m·ª©c gi√° - m√†u ƒë·ªè
                fig8.add_trace(go.Bar(
                    x=df_price_level['price'],
                    y=-df_price_level['volume_sell'],  # D√πng d·∫•u √¢m ƒë·ªÉ hi·ªÉn th·ªã d∆∞·ªõi tr·ª•c
                    name='Volume B√°n',
                    marker=dict(color='#E74C3C', line=dict(width=0)),
                ))

                # Volume r√≤ng theo m·ª©c gi√° - ƒë∆∞·ªùng m√†u t√≠m
                fig8.add_trace(go.Scatter(
                    x=df_price_level['price'],
                    y=df_price_level['net_volume'],
                    mode='lines+markers',
                    name='Net Volume',
                    line=dict(color='#9B59B6', width=2),
                    marker=dict(color='#9B59B6', size=6, symbol='circle')  # Dot v·ªõi ƒë∆∞·ªùng tr√≤n
                ))

                # C·∫≠p nh·∫≠t layout cho bi·ªÉu ƒë·ªì Volume
                fig8.update_layout(
                    title="üìä Volume Mua, B√°n v√† Volume R√≤ng theo M·ª©c Gi√°",
                    xaxis_title="M·ª©c Gi√° (VND)",
                    yaxis_title="Volume (C·ªï phi·∫øu)",
                    template='plotly_dark',
                    hovermode='x unified',
                    barmode='relative',
                    legend=dict(orientation='h', yanchor='bottom', y=1.02, xanchor='right', x=1)
                )

                # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì Volume
                st.plotly_chart(fig8, use_container_width=True)

                # 3. V·∫Ω bi·ªÉu ƒë·ªì Gi√° tr·ªã mua, b√°n, v√† gi√° tr·ªã r√≤ng theo m·ª©c gi√° (ƒê·ªì th·ªã 2)
                fig9 = go.Figure()

                # Gi√° tr·ªã mua theo m·ª©c gi√° - m√†u xanh l√°
                fig9.add_trace(go.Bar(
                    x=df_price_level['price'],
                    y=df_price_level['buy_value'],
                    name='Gi√° Tr·ªã Mua',
                    marker=dict(color='#2ECC71', line=dict(width=0)),
                ))

                # Gi√° tr·ªã b√°n theo m·ª©c gi√° - m√†u cam
                fig9.add_trace(go.Bar(
                    x=df_price_level['price'],
                    y=-df_price_level['sell_value'],  # D√πng d·∫•u √¢m ƒë·ªÉ hi·ªÉn th·ªã d∆∞·ªõi tr·ª•c
                    name='Gi√° Tr·ªã B√°n',
                    marker=dict(color='#E74C3C', line=dict(width=0)),
                ))

                # Gi√° tr·ªã r√≤ng theo m·ª©c gi√° - ƒë∆∞·ªùng m√†u v√†ng
                fig9.add_trace(go.Scatter(
                    x=df_price_level['price'],
                    y=df_price_level['net_value'],
                    mode='lines+markers',
                    name='Net Value',
                    line=dict(color='#9B59B6', width=2, dash='dot'),
                    marker=dict(color='#9B59B6', size=6, symbol='circle')  # Dot v·ªõi ƒë∆∞·ªùng tr√≤n
                ))

                # C·∫≠p nh·∫≠t layout cho bi·ªÉu ƒë·ªì Gi√° tr·ªã
                fig9.update_layout(
                    title="üìä Gi√° Tr·ªã Mua, B√°n v√† Gi√° Tr·ªã R√≤ng theo M·ª©c Gi√°",
                    xaxis_title="M·ª©c Gi√° (VND)",
                    yaxis_title="Gi√° Tr·ªã (VND)",
                    template='plotly_dark',
                    hovermode='x unified',
                    barmode='relative',
                    legend=dict(orientation='h', yanchor='bottom', y=1.02, xanchor='right', x=1)
                )

                # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì Gi√° tr·ªã
                st.plotly_chart(fig9, use_container_width=True)                

        except Exception as e:
            st.error(f"ƒê√£ x·∫£y ra l·ªói: {str(e)}")        

# ==== TAB 2 ====
with tab2:
    # Define the function for processing stock data
    def process_symbol(symbol, selected_date):
        try:
            # Kh·ªüi t·∫°o ƒë·ªëi t∆∞·ª£ng l·∫•y d·ªØ li·ªáu intraday
            stock = Vnstock().stock(symbol=symbol, source='VCI')
            df_intraday = stock.quote.intraday(symbol=symbol, page_size=10000)

            if df_intraday is None or df_intraday.empty:
                st.warning(f"Kh√¥ng c√≥ d·ªØ li·ªáu intraday cho m√£ {symbol}.")
                return None

            # Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu v·ªÅ d·∫°ng th·ªùi gian
            df_intraday['time'] = pd.to_datetime(df_intraday['time'])
            df_intraday.set_index('time', inplace=True)

            # G·ªôp theo t·ª´ng ph√∫t
            df_intraday['minute'] = df_intraday.index.floor('T')

            # T√≠nh volume mua & b√°n
            df_intraday['volume_buy'] = df_intraday.apply(lambda x: x['volume'] if x['match_type'] == 'Buy' else 0, axis=1)
            df_intraday['volume_sell'] = df_intraday.apply(lambda x: x['volume'] if x['match_type'] == 'Sell' else 0, axis=1)

            # Nh√≥m theo t·ª´ng ph√∫t
            df_min = df_intraday.groupby('minute').agg(
                volume_buy=('volume_buy', 'sum'),
                volume_sell=('volume_sell', 'sum'),
                avg_price=('price', 'mean')
            ).reset_index()

            # T√≠nh d√≤ng ti·ªÅn (Value = Gi√° * Volume)
            df_min['value_buy'] = df_min['volume_buy'] * df_min['avg_price'] * 1000
            df_min['value_sell'] = df_min['volume_sell'] * df_min['avg_price'] * 1000
            df_min['net'] = df_min['volume_buy'] - df_min['volume_sell']
            df_min['net_value'] = df_min['value_buy'] - df_min['value_sell']

            # T√≠nh kh·ªëi l∆∞·ª£ng mua/b√°n l≈©y k·∫ø
            df_min['cumulative_value_buy'] = df_min['value_buy'].cumsum()
            df_min['cumulative_value_sell'] = df_min['value_sell'].cumsum()
            df_min['cumulative_value_net'] = df_min['net_value'].cumsum()
            
            # T√≠nh volume mua/b√°n l≈©y k·∫ø
            df_min['cumulative_volume_buy'] = df_min['volume_buy'].cumsum()
            df_min['cumulative_volume_sell'] = df_min['volume_sell'].cumsum()
            df_min['cumulative_volume_net'] = df_min['net'].cumsum()

            # T√≠nh d√≤ng ti·ªÅn l≈©y k·∫ø
            df_min['cumulative_net'] = df_min['cumulative_value_buy'] - df_min['cumulative_value_sell']

            # L·∫•y c√°c d√≤ng ti·ªÅn l≈©y k·∫ø cu·ªëi c√πng
            cumulative_buy = df_min['cumulative_value_buy'].iloc[-1] if not df_min.empty else 0
            cumulative_sell = df_min['cumulative_value_sell'].iloc[-1] if not df_min.empty else 0
            cumulative_net = df_min['cumulative_net'].iloc[-1] if not df_min.empty else 0
            cumulative_volume_buy = df_min['cumulative_volume_buy'].iloc[-1] if not df_min.empty else 0
            cumulative_volume_sell = df_min['cumulative_volume_sell'].iloc[-1] if not df_min.empty else 0
            cumulative_volume_net = df_min['cumulative_volume_net'].iloc[-1] if not df_min.empty else 0


            return {
                "symbol": symbol,
                "cumulative_value_buy": cumulative_buy,
                "cumulative_value_sell": cumulative_sell,
                "cumulative_value_net": cumulative_net,
                "cumulative_volume_buy": cumulative_volume_buy,
                "cumulative_volume_sell": cumulative_volume_sell,
                "cumulative_volume_net": cumulative_volume_net  # Th√™m v√†o c·ªôt volume r√≤ng l≈©y k·∫ø
            }
        except Exception:
            return None

    # Main Streamlit code
    st.title('üìä Ph√¢n T√≠ch D√≤ng Ti·ªÅn C·ªï Phi·∫øu')

    # Option 1: Upload CSV file with stock symbols
    uploaded_file = st.file_uploader("T·∫£i l√™n file CSV ch·ª©a m√£ c·ªï phi·∫øu", type="csv")

    # Option 2: Manual input of stock symbols
    manual_input = st.text_input("Nh·∫≠p m√£ c·ªï phi·∫øu (c√°ch nhau b·∫±ng d·∫•u ph·∫©y):", "")

    # Option 3: Select sector (optional)
    sector_map = {
        'VN30': ['ACB','BCM','BID','BVH','CTG',	'FPT','GAS','GVR','HDB','HPG',	'LPB','MBB','MSN', 'MWG', 'PLX','SAB','SHB','SSB','SSI','STB','TCB','TPB','VCB','VHM','VIB','VIC', 'VJC','VNM','VPB','VRE'],
        'Ng√¢n h√†ng': ['ACB', 'BID', 'CTG', 'EIB', 'MBB', 'NVB', 'SHB', 'STB', 'VCB', 'VIB', 'LPB', 'TPB', 'OCB', 'SSB', 'HDB', 'TCB', 'VPB'],
        'Ch·ª©ng kho√°n': ['AGR', 'ART', 'BSI', 'BVS', 'CTS', 'FTS', 'HCM', 'MBS', 'SBS', 'SHS', 'SSI', 'TVB', 'TVS', 'VCI', 'VDS', 'VIX', 'VND'],
        'Th√©p': ['HPG', 'HSG', 'NKG', 'POM', 'SHA', 'TIS', 'TVN', 'VGS', 'HMC', 'SHI', 'SMC', 'TLH'],
        'B·∫•t ƒë·ªông s·∫£n': ['IJC', 'LDG', 'NVT', 'AMD', 'C21', 'CEO', 'D2D', 'DIG', 'DRH', 'DXG', 'FLC', 'HAR', 'HDC', 'HDG', 'HLD', 'HQC', 'ITC', 'KDH', 'NBB', 'NDN', 'NLG', 'NTL', 'NVL', 'PDR', 'QCG', 'SCR', 'SJS', 'TDH', 'TIG', 'VIC', 'VPH', 'IDV', 'ITA', 'KBC', 'LHG', 'VC3', 'LGL'],
        'C√¥ng ngh·ªá': ['CMG', 'SGT', 'ITD', 'VEC', 'FPT', 'ELC', 'ABC'],
        'B√°n l·∫ª': ['MSN', 'MWG', 'DGW', 'PNJ', 'FRT'],
        'ƒêi·ªán n∆∞·ªõc': ['BWE', 'VCW', 'DQC', 'GDT', 'RAL', 'CHP', 'NT2', 'PPC', 'SBA', 'SJD', 'VSH'],
        'D·∫ßu kh√≠': ['PVB', 'PVC', 'PVD', 'PVS', 'ASP', 'CNG', 'GAS', 'PGC', 'PGS', 'PLX', 'PVG', 'PVO'],
        'X√¢y d·ª±ng': ['C32', 'C47', 'CII', 'CTD', 'CTI', 'FCN', 'HBC', 'HC3', 'HTI', 'HUT', 'L14', 'MCG', 'LCG', 'PC1', 'DPG', 'PHC', 'PVX', 'PXS', 'SD5', 'SD6', 'SD9', 'TCD', 'UIC', 'VCG', 'VMC', 'VNE', 'THG', 'VPD', 'TV2'],
        'ƒê·∫ßu t∆∞ c√¥ng': ['HHV', 'LCG', 'HTI', 'DPG', 'EVG'],
        'Th·ª±c ph·∫©m': ['MSN', 'TNA', 'VNM', 'LSS', 'QNS', 'SBT', 'MCH', 'VOC', 'NAF', 'SCD', 'SAB', 'SMB', 'KDC'],
        'B·∫£o hi·ªÉm': ['VNR', 'ABI', 'BIC', 'BMI', 'MIG', 'PGI', 'PVI', 'BVH'],
        'Th·ªßy s·∫£n': ['ANV', 'ASM', 'FMC', 'HVG', 'IDI', 'SSN', 'VHC'],
        'D·ªát may': ['ADS', 'EVE', 'FTM', 'GMC', 'HTG', 'KMR', 'STK', 'TCM', 'TNG', 'TVT', 'VGG', 'VGT'],
        'Cao su': ['DPR', 'DRI', 'HRC', 'PHR', 'TRC'],
        'D∆∞·ª£c ph·∫©m': ['DCL', 'DHG', 'DHT', 'IMP', 'TRA', 'DVN', 'DBD'],
        'V·∫≠n t·∫£i': ['PVT', 'GSP', 'SWC', 'VIP', 'VOS', 'VTO', 'SKG', 'SRT', 'VNS', 'SAS'],
        'C·∫£ng bi·ªÉn': ['HAH', 'STG', 'GMD', 'PDN', 'PHP', 'SGP', 'VSC'],
        'Nh·ª±a': ['AAA', 'BMP', 'DAG', 'DNP', 'NTP', 'RDP'],
        'Khu CN': ['KBC', 'SZC', 'TIP', 'BCM', 'VGC', 'IDC'],
        'Ph√¢n b√≥n': ['HAI', 'LTG', 'TSC', 'VFG', 'BFC', 'DCM', 'DDV', 'DPM', 'LAS', 'QBS', 'SFG', 'CSM', 'DRC', 'SRC', 'CSV', 'DGC', 'PLC', 'LIX', 'NET']
        # Add other sectors as required...
    }

    selected_sector = st.selectbox('Ch·ªçn nh√≥m ng√†nh:', options=list(sector_map.keys()), index=0, key="sector_select")

    # Select a date for analysis
    selected_date = st.date_input('Ch·ªçn ng√†y giao d·ªãch:', value=date.today(), key='date')
    
    # --- Ch·ªçn th·ªùi gian refresh ---
    #col1, col2 = st.columns([1, 2])
    #with col1:
        #auto_refresh = st.checkbox("üîÑ T·ª± ƒë·ªông refresh")
    #with col2:
        #refresh_interval = st.slider("‚è± Th·ªùi gian refresh (gi√¢y):", min_value=30, max_value=600, value=60)

    # --- Th·ª±c hi·ªán auto refresh ---
    #if auto_refresh:
        #st.markdown(f"<p style='color:green;'>T·ª± ƒë·ªông l√†m m·ªõi sau m·ªói {refresh_interval} gi√¢y...</p>", unsafe_allow_html=True)
        #time.sleep(refresh_interval)
        #st.rerun()

    # Define button to trigger analysis
    analyze_button = st.button('üîç Ph√¢n T√≠ch D√≤ng Ti·ªÅn')

    # Process the symbols based on the input
    if analyze_button:
        st.info(f"ƒêang ph√¢n t√≠ch c√°c m√£ c·ªï phi·∫øu...")

        if uploaded_file is not None:
            # Read CSV file and extract stock symbols
            df_csv = pd.read_csv(uploaded_file)
            symbols = df_csv['symbol'].dropna().tolist()  # Assuming the CSV has a column 'symbol'
        elif manual_input:
            # Process manual input
            symbols = [sym.strip() for sym in manual_input.split(',')]
        elif selected_sector:
            # Default to selected sector symbols if no CSV or manual input
            symbols = sector_map.get(selected_sector, [])
        else:
            st.warning("Vui l√≤ng nh·∫≠p m√£ c·ªï phi·∫øu ho·∫∑c ch·ªçn nh√≥m ng√†nh.")
            symbols = []

        if symbols:
            with st.spinner("ƒêang x·ª≠ l√Ω..."):
                with ThreadPoolExecutor(max_workers=6) as executor:
                    futures = [executor.submit(process_symbol, sym, selected_date) for sym in symbols]
                    results = [f.result() for f in futures if f.result() is not None]

            if results:
                df_symbols = pd.DataFrame(results)

                # Format the numbers to display as "1.000.000" instead of "1000000"
                df_display = df_symbols.copy()
                for col in ['cumulative_value_buy', 'cumulative_value_sell', 'cumulative_value_net', 'cumulative_volume_buy', 'cumulative_volume_sell', 'cumulative_volume_net']:
                    df_display[col] = df_display[col].map(lambda x: f"{x:,.0f}".replace(",", "."))

                st.subheader("üìã B·∫£ng D√≤ng Ti·ªÅn L≈©y K·∫ø")
                st.dataframe(df_display, use_container_width=True)

                # Split the screen into two columns
                col1, col2 = st.columns(2)

                with col1:
                    # Top 10 stocks with the highest net cash flow
                    top_10_net_positive = df_symbols.nlargest(10, 'cumulative_value_net')
                    st.subheader("üîù Top 10 C·ªï Phi·∫øu C√≥ D√≤ng Ti·ªÅn R√≤ng L·ªõn Nh·∫•t")
                    top_10_net_positive_display = top_10_net_positive[['symbol', 'cumulative_value_net']]
                    top_10_net_positive_display['cumulative_value_net'] = top_10_net_positive_display['cumulative_value_net'].map(lambda x: f"{x:,.0f}".replace(",", "."))
                    st.dataframe(top_10_net_positive_display, use_container_width=True)

                with col2:
                    # Top 10 stocks with the lowest net cash flow
                    top_10_net_negative = df_symbols.nsmallest(10, 'cumulative_value_net')
                    st.subheader("üîª Top 10 C·ªï Phi·∫øu C√≥ D√≤ng Ti·ªÅn R√≤ng Th·∫•p Nh·∫•t")
                    top_10_net_negative_display = top_10_net_negative[['symbol', 'cumulative_value_net']]
                    top_10_net_negative_display['cumulative_value_net'] = top_10_net_negative_display['cumulative_value_net'].map(lambda x: f"{x:,.0f}".replace(",", "."))
                    st.dataframe(top_10_net_negative_display, use_container_width=True)
                    
                # K·∫øt h·ª£p top 10 m√£ d√≤ng ti·ªÅn r√≤ng l·ªõn nh·∫•t v√† nh·ªè nh·∫•t
                top_10_positive = df_symbols.nlargest(10, 'cumulative_value_net')
                top_10_negative = df_symbols.nsmallest(10, 'cumulative_value_net')
                combined = pd.concat([top_10_positive, top_10_negative])
                combined = combined.drop_duplicates(subset='symbol')

                # S·∫Øp x·∫øp theo d√≤ng ti·ªÅn r√≤ng gi·∫£m d·∫ßn ƒë·ªÉ bi·ªÉu ƒë·ªì d·ªÖ ƒë·ªçc
                combined_sorted = combined.sort_values(by='cumulative_value_net', ascending=False)

                # T·∫°o bi·ªÉu ƒë·ªì c·ªôt
                fig = go.Figure()

                fig.add_trace(go.Bar(
                    x=combined_sorted['symbol'],
                    y=combined_sorted['cumulative_value_net'],
                    marker_color=['#2ECC71' if val >= 0 else '#E74C3C' for val in combined_sorted['cumulative_value_net']],
                    text=[format_number(x) for x in combined_sorted['cumulative_value_net']],  # S·ª≠ d·ª•ng h√†m ƒë·ªãnh d·∫°ng s·ªë
                    textposition='auto',
                    name='D√≤ng ti·ªÅn r√≤ng'
                ))

                fig.update_layout(
                    title="üí∞ Top 10 D√≤ng Ti·ªÅn R√≤ng L·ªõn Nh·∫•t v√† Nh·ªè Nh·∫•t",
                    xaxis_title="M√£ c·ªï phi·∫øu",
                    yaxis_title="D√≤ng ti·ªÅn r√≤ng (VND)",
                    plot_bgcolor='rgba(0,0,0,0)',
                    paper_bgcolor='rgba(0,0,0,0)',
                    height=500
                )

                st.plotly_chart(fig, use_container_width=True)
                
                # ===== BI·ªÇU ƒê·ªí D√íNG TI·ªÄN L≈®Y K·∫æ NH√ìM =====
                st.subheader("üìà Bi·ªÉu ƒê·ªì D√≤ng Ti·ªÅn L≈©y K·∫ø Nh√≥m Ng√†nh")

                # S·∫Øp x·∫øp ƒë·ªÉ bi·ªÉu ƒë·ªì ƒë·∫πp h∆°n
                df_symbols_sorted = df_symbols.sort_values(by='cumulative_value_net', ascending=False)

                fig_group = go.Figure()

                # Th√™m c·ªôt mua l≈©y k·∫ø
                fig_group.add_trace(go.Bar(
                    x=df_symbols_sorted['symbol'],
                    y=df_symbols_sorted['cumulative_value_buy'],
                    name='Mua l≈©y k·∫ø',
                    marker_color='#2ECC71'
                ))

                # Th√™m c·ªôt b√°n l≈©y k·∫ø
                fig_group.add_trace(go.Bar(
                    x=df_symbols_sorted['symbol'],
                    y=df_symbols_sorted['cumulative_value_sell'],
                    name='B√°n l≈©y k·∫ø',
                    marker_color='#E74C3C'
                ))

                # Th√™m ƒë∆∞·ªùng d√≤ng ti·ªÅn r√≤ng l≈©y k·∫ø
                fig_group.add_trace(go.Scatter(
                    x=df_symbols_sorted['symbol'],
                    y=df_symbols_sorted['cumulative_value_net'],
                    name='R√≤ng l≈©y k·∫ø',
                    mode='lines+markers',
                    line=dict(color='#9B59B6', width=3)
                ))

                fig_group.update_layout(
                    barmode='group',
                    title='üíº D√≤ng Ti·ªÅn L≈©y K·∫ø Theo Nh√≥m C·ªï Phi·∫øu',
                    xaxis_title='M√£ c·ªï phi·∫øu',
                    yaxis_title='Gi√° tr·ªã (VND)',
                    plot_bgcolor='rgba(0,0,0,0)',
                    paper_bgcolor='rgba(0,0,0,0)',
                    height=550,
                    legend=dict(orientation="h", yanchor="bottom", y=1.02, xanchor="right", x=1)
                )

                st.plotly_chart(fig_group, use_container_width=True)


            else:
                st.warning("Kh√¥ng th·ªÉ ph√¢n t√≠ch d√≤ng ti·ªÅn c√°c m√£ c·ªï phi·∫øu n√†y.")
        else:
            st.warning("Kh√¥ng c√≥ m√£ c·ªï phi·∫øu n√†o ƒë·ªÉ ph√¢n t√≠ch.")

          
# ==== TAB 3 ====            
with tab3:
    st.title("üìä Bi·ªÉu ƒê·ªì N·∫øn Nh·∫≠t ‚Äì Gi√° C·ªï Phi·∫øu")

    st.markdown("Ch·ªçn m√£ c·ªï phi·∫øu, kho·∫£ng th·ªùi gian v√† khung th·ªùi gian ƒë·ªÉ xem bi·ªÉu ƒë·ªì gi√°.")

    symbol = st.text_input("Nh·∫≠p m√£ c·ªï phi·∫øu:", value="VNM", key="symbol_tab5").strip().upper()
    start_date = st.date_input("Ng√†y b·∫Øt ƒë·∫ßu", value=date(2025, 1, 1))
    end_date = st.date_input("Ng√†y k·∫øt th√∫c", value=date.today())

    timeframe = st.selectbox("Khung th·ªùi gian:", options=["D", "W", "M"], index=0, 
                             format_func=lambda x: {"D": "Ng√†y", "W": "Tu·∫ßn", "M": "Th√°ng"}[x])

    # T√πy ch·ªçn hi·ªÉn th·ªã c√°c ƒë∆∞·ªùng MA
    show_ma5 = st.checkbox("Hi·ªÉn th·ªã MA 5", value=True)
    show_ma20 = st.checkbox("Hi·ªÉn th·ªã MA 20", value=True)
    show_ma50 = st.checkbox("Hi·ªÉn th·ªã MA 50", value=True)

    if st.button("üìä Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì", key="btn_tab5"):
        try:
            from vnstock import Vnstock
            import plotly.graph_objects as go

            stock = Vnstock().stock(symbol=symbol, source='VCI')
            df_candle = stock.quote.history(start=str(start_date), end=str(end_date))

            if df_candle is None or df_candle.empty or 'time' not in df_candle.columns:
                st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu cho m√£ c·ªï phi·∫øu v√† kho·∫£ng th·ªùi gian ƒë√£ ch·ªçn.")
            else:
                df_candle['time'] = pd.to_datetime(df_candle['time'])  # GI·ªÆ nguy√™n datetime
                df_candle.set_index('time', inplace=True)

                if timeframe in ['W', 'M']:
                    df_candle = df_candle.resample(timeframe).agg({
                        'open': 'first',
                        'high': 'max',
                        'low': 'min',
                        'close': 'last',
                        'volume': 'sum'
                    }).dropna()

                df_candle.reset_index(inplace=True)
                
                # T√≠nh to√°n c√°c thay ƒë·ªïi
                df_candle['delta_price'] = df_candle['close'] - df_candle['open']
                df_candle['delta_volume'] = df_candle['volume'].diff()
                # T√≠nh ph·∫ßn trƒÉm thay ƒë·ªïi theo ng√†y
                df_candle = df_candle.sort_values('time')
                df_candle['pct_change_price'] = df_candle['close'].pct_change() * 100
                df_candle['pct_change_volume'] = df_candle['volume'].pct_change() * 100

                # L√†m tr√≤n 2 ch·ªØ s·ªë
                df_candle['pct_change_price'] = df_candle['pct_change_price'].round(2)
                df_candle['pct_change_volume'] = df_candle['pct_change_volume'].round(2)

                # L·ªçc d·ªØ li·ªáu 30 v√† 90 ng√†y g·∫ßn nh·∫•t
                latest_time = df_candle['time'].max()
                df_box_30 = df_candle[df_candle['time'] >= latest_time - timedelta(days=30)].copy()
                df_box_90 = df_candle[df_candle['time'] >= latest_time - timedelta(days=90)].copy()

                # ‚úÖ C·ªôt th·ªùi gian hi·ªÉn th·ªã ƒë·ªÉ d√πng trong bi·ªÉu ƒë·ªì (d·∫°ng chu·ªói ng·∫Øn g·ªçn)
                df_candle['time_str'] = df_candle['time'].dt.strftime('%d-%m')

                # T√≠nh c√°c ƒë∆∞·ªùng MA
                df_candle['MA5'] = df_candle['close'].rolling(window=5).mean()
                df_candle['MA20'] = df_candle['close'].rolling(window=20).mean()
                df_candle['MA50'] = df_candle['close'].rolling(window=50).mean()

                fig = go.Figure(data=[go.Candlestick(
                    x=df_candle['time_str'],
                    open=df_candle['open'],
                    high=df_candle['high'],
                    low=df_candle['low'],
                    close=df_candle['close'],
                    increasing_line_color='green',
                    decreasing_line_color='red',
                    name='N·∫øn Nh·∫≠t'
                )])

                # Th√™m c√°c ƒë∆∞·ªùng MA n·∫øu ng∆∞·ªùi d√πng ch·ªçn hi·ªÉn th·ªã
                if show_ma5:
                    fig.add_trace(go.Scatter(
                        x=df_candle['time_str'],
                        y=df_candle['MA5'],
                        mode='lines',
                        name='MA 5',
                        line=dict(color='blue', width=2)
                    ))

                if show_ma20:
                    fig.add_trace(go.Scatter(
                        x=df_candle['time_str'],
                        y=df_candle['MA20'],
                        mode='lines',
                        name='MA 20',
                        line=dict(color='orange', width=2)
                    ))

                if show_ma50:
                    fig.add_trace(go.Scatter(
                        x=df_candle['time_str'],
                        y=df_candle['MA50'],
                        mode='lines',
                        name='MA 50',
                        line=dict(color='purple', width=2)
                    ))

                fig.update_layout(
                    title=f'Bi·ªÉu ƒë·ªì N·∫øn Nh·∫≠t: {symbol} ({ {"D":"Ng√†y","W":"Tu·∫ßn","M":"Th√°ng"}[timeframe] })',
                    xaxis_title='Ng√†y',
                    yaxis_title='Gi√°',
                    xaxis_rangeslider_visible=False,
                    height=500,
                    margin=dict(l=0, r=0, t=40, b=0),  # Lo·∫°i b·ªè c√°c kho·∫£ng tr·ªëng
                    xaxis=dict(
                        showgrid=False,
                        zeroline=False,
                        type='category',  # Lo·∫°i b·ªè c√°c ng√†y kh√¥ng c√≥ giao d·ªãch
                        tickmode='array',
                        tickvals=df_candle['time_str'],  # Hi·ªÉn th·ªã c√°c gi√° tr·ªã c√≥ d·ªØ li·ªáu
                        tickangle=45  # G√≥c quay c√°c nh√£n ƒë·ªÉ tr√°nh ch·ªìng ch√©o
                    ),
                    yaxis=dict(
                        showgrid=False,
                        zeroline=False
                    )
                )

                st.plotly_chart(fig, use_container_width=True)
                
                # Bi·ªÉu ƒë·ªì kh·ªëi l∆∞·ª£ng
                fig_volume = go.Figure()
                fig_volume.add_trace(go.Bar(
                    x=df_candle['time_str'],
                    y=df_candle['volume'],
                    marker_color='orange',
                    name='Kh·ªëi l∆∞·ª£ng'
                ))

                fig_volume.update_layout(
                    title='üìä Kh·ªëi L∆∞·ª£ng Giao D·ªãch',
                    xaxis_title='Ng√†y',
                    yaxis_title='Kh·ªëi l∆∞·ª£ng',
                    height=300,
                    margin=dict(l=0, r=0, t=40, b=0),  # Lo·∫°i b·ªè c√°c kho·∫£ng tr·ªëng
                    xaxis=dict(
                        showgrid=False,
                        zeroline=False,
                        type='category',  # Lo·∫°i b·ªè c√°c ng√†y kh√¥ng c√≥ giao d·ªãch
                        tickmode='array',
                        tickvals=df_candle['time_str'],  # Hi·ªÉn th·ªã c√°c gi√° tr·ªã c√≥ d·ªØ li·ªáu
                        tickangle=45  # G√≥c quay c√°c nh√£n ƒë·ªÉ tr√°nh ch·ªìng ch√©o
                    ),
                    yaxis=dict(
                        showgrid=False,
                        zeroline=False
                    )
                )

                # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì kh·ªëi l∆∞·ª£ng
                st.plotly_chart(fig_volume, use_container_width=True)
                
                
                ##‚úÖ V·∫Ω bi·ªÉu ƒë·ªì t∆∞∆°ng quan c√≥ y·∫øu t·ªë th·ªùi gian
                # Gi·ªõi h·∫°n d·ªØ li·ªáu trong 30 ng√†y g·∫ßn nh·∫•t
                last_30_days = df_candle['time'].max() - timedelta(days=30)
                # S·∫Øp x·∫øp theo th·ªùi gian gi·∫£m d·∫ßn v√† l·∫•y 30 d√≤ng g·∫ßn nh·∫•t
                df_corr = df_candle.sort_values("time", ascending=False).head(30).sort_values("time")
                
                
                
                # ‚úÖ V·∫Ω bi·ªÉu ƒë·ªì t∆∞∆°ng quan c√≥ y·∫øu t·ªë th·ªùi gian
                fig_corr = px.scatter(
                    df_corr,
                    x="close",
                    y="volume",
                    color="time",  # th·ªùi gian th·ªÉ hi·ªán b·∫±ng m√†u
                    labels={"close": "Gi√° ƒë√≥ng c·ª≠a", "volume": "Kh·ªëi l∆∞·ª£ng", "time": "Th·ªùi gian"},
                    title="T∆∞∆°ng quan gi·ªØa Gi√° ƒë√≥ng c·ª≠a v√† Kh·ªëi l∆∞·ª£ng (30 ng√†y g·∫ßn nh·∫•t)",
                    trendline="ols"
                )
                st.plotly_chart(fig_corr, use_container_width=True)   


                # Bi·ªÉu ƒë·ªì line gi√° & kh·ªëi l∆∞·ª£ng 
                # ‚úÖ Bi·ªÉu ƒë·ªì line v·ªõi c·∫£ close v√† volume (2 y-axis)
                fig_line = go.Figure()

                # Line 1: Gi√° ƒë√≥ng c·ª≠a (close)
                fig_line.add_trace(go.Scatter(
                    x=df_candle['time_str'],
                    y=df_candle['close'],
                    mode='lines+markers',
                    name='Gi√° ƒë√≥ng c·ª≠a',
                    line=dict(color='blue'),
                    yaxis='y1'
                ))

                # Line 2: Kh·ªëi l∆∞·ª£ng (volume) tr√™n tr·ª•c y th·ª© 2
                fig_line.add_trace(go.Scatter(
                    x=df_candle['time_str'],
                    y=df_candle['volume'],
                    mode='lines+markers',
                    name='Kh·ªëi l∆∞·ª£ng',
                    line=dict(color='orange'),
                    yaxis='y2'
                ))

                fig_line.update_layout(
                    title='Bi·ªÉu ƒë·ªì Gi√° v√† Kh·ªëi l∆∞·ª£ng theo Th·ªùi gian',
                    xaxis=dict(title='Ng√†y', type='category', tickangle=45),
                    yaxis=dict(
                        title='Gi√° ƒë√≥ng c·ª≠a',
                        showgrid=False
                    ),
                    yaxis2=dict(
                        title='Kh·ªëi l∆∞·ª£ng',
                        overlaying='y',
                        side='right',
                        showgrid=False
                    ),
                    legend=dict(x=0.01, y=0.99),
                    height=400,
                    margin=dict(l=0, r=0, t=40, b=0)
                )

                st.plotly_chart(fig_line, use_container_width=True)
                
                #‚úÖ Boxplot cho 30 v√† 90 ng√†y
                # T·∫°o bi·∫øn ng√†y gi·ªõi h·∫°n
                max_date = df_candle['time'].max()
                min_date_30 = max_date - pd.Timedelta(days=30)
                min_date_90 = max_date - pd.Timedelta(days=90)

                # L·ªçc d·ªØ li·ªáu
                df_30 = df_candle[(df_candle['time'] >= min_date_30) & (df_candle['time'] <= max_date)].copy()
                df_90 = df_candle[(df_candle['time'] >= min_date_90) & (df_candle['time'] <= max_date)].copy()

                # Ki·ªÉm tra d·ªØ li·ªáu kh√¥ng r·ªóng
                if not df_30.empty and not df_90.empty:
                    # Boxplot cho 30 ng√†y
                    fig_box_30 = make_subplots(rows=1, cols=2, subplot_titles=(
                        "üì¶ Bi·∫øn ƒë·ªông gi√° (%) ‚Äì 30 ng√†y", "üì¶ Bi·∫øn ƒë·ªông kh·ªëi l∆∞·ª£ng (%) ‚Äì 30 ng√†y"))

                    fig_box_30.add_trace(go.Box(
                        y=df_30['pct_change_price'],
                        boxpoints='outliers',
                        name="Gi√°",
                        marker_color='green'
                    ), row=1, col=1)

                    fig_box_30.add_trace(go.Box(
                        y=df_30['pct_change_volume'],
                        boxpoints='outliers',
                        name="Kh·ªëi l∆∞·ª£ng",
                        marker_color='orange'
                    ), row=1, col=2)

                    fig_box_30.update_layout(
                        title_text=f"Bi·∫øn ƒë·ªông theo ng√†y trong 30 ng√†y g·∫ßn nh·∫•t ‚Äì {symbol}",
                        height=500,
                        template='plotly_white'
                    )

                    st.plotly_chart(fig_box_30, use_container_width=True)

                    # Boxplot cho 90 ng√†y
                    fig_box_90 = make_subplots(rows=1, cols=2, subplot_titles=(
                        "üì¶ Bi·∫øn ƒë·ªông gi√° (%) ‚Äì 90 ng√†y", "üì¶ Bi·∫øn ƒë·ªông kh·ªëi l∆∞·ª£ng (%) ‚Äì 90 ng√†y"))

                    fig_box_90.add_trace(go.Box(
                        y=df_90['pct_change_price'],
                        boxpoints='outliers',
                        name="Gi√°",
                        marker_color='blue'
                    ), row=1, col=1)

                    fig_box_90.add_trace(go.Box(
                        y=df_90['pct_change_volume'],
                        boxpoints='outliers',
                        name="Kh·ªëi l∆∞·ª£ng",
                        marker_color='red'
                    ), row=1, col=2)

                    fig_box_90.update_layout(
                        title_text=f"Bi·∫øn ƒë·ªông theo ng√†y trong 90 ng√†y g·∫ßn nh·∫•t ‚Äì {symbol}",
                        height=500,
                        template='plotly_white'
                    )

                    st.plotly_chart(fig_box_90, use_container_width=True)
                else:
                    st.warning("Kh√¥ng ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ t·∫°o boxplot cho 30 ho·∫∑c 90 ng√†y.")        
                

                st.download_button(
                    label="üì• T·∫£i d·ªØ li·ªáu gi√° l·ªãch s·ª≠ (.CSV)",
                    data=df_candle.to_csv(index=False).encode("utf-8"),
                    file_name=f"{symbol}_gia_lich_su_{timeframe}.csv",
                    mime="text/csv"
                )

        except Exception as e:
            st.error(f"ƒê√£ x·∫£y ra l·ªói: {e}")

# ==== TAB 4 ====  
with tab4:
    st.title("üìà C·∫≠p nh·∫≠t Gi√° C·ªï Phi·∫øu Realtime")
    
    st.markdown("Nh·∫≠p m√£ c·ªï phi·∫øu ƒë·ªÉ xem d·ªØ li·ªáu giao d·ªãch realtime theo 5 ph√∫t.")
    
    symbol = st.text_input("Nh·∫≠p m√£ c·ªï phi·∫øu:", value="VNM", key="symbol_tab6").strip().upper()
    
    # T√πy ch·ªçn s·ªë l∆∞·ª£ng d·ªØ li·ªáu tr·∫£ v·ªÅ
    page_size = st.number_input("Ch·ªçn s·ªë l∆∞·ª£ng b·∫£n ghi:", min_value=1, max_value=50000, value=10000)
    
    # L·∫•y v√† hi·ªÉn th·ªã th√¥ng tin realtime khi nh·∫•n n√∫t
    if st.button("üìä Hi·ªÉn th·ªã gi√° c·ªï phi·∫øu realtime", key="btn_tab6"):
        try:
            # Kh·ªüi t·∫°o ƒë·ªëi t∆∞·ª£ng stock
            stock = Vnstock().stock(symbol=symbol, source='VCI')

            # L·∫•y d·ªØ li·ªáu giao d·ªãch intraday (th·ªùi gian th·ª±c)
            df_realtime = stock.quote.intraday(symbol=symbol, page_size=page_size)

            if df_realtime is None or df_realtime.empty:
                st.warning(f"Kh√¥ng c√≥ d·ªØ li·ªáu giao d·ªãch realtime cho m√£ c·ªï phi·∫øu {symbol}.")
            else:
                # Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu th·ªùi gian v·ªÅ ƒë√∫ng ƒë·ªãnh d·∫°ng
                df_realtime['time'] = pd.to_datetime(df_realtime['time'])
                
                # Thi·∫øt l·∫≠p th·ªùi gian 5 ph√∫t
                df_realtime.set_index('time', inplace=True)
                df_realtime['5_min_interval'] = df_realtime.index.floor('5T')  # Chuy·ªÉn c√°c th·ªùi gian v·ªÅ khung 5 ph√∫t
                
                # T√≠nh to√°n volume buy v√† volume sell d·ª±a tr√™n match_type
                df_realtime['volume_buy'] = df_realtime.apply(lambda row: row['volume'] if row['match_type'] == 'Buy' else 0, axis=1)
                df_realtime['volume_sell'] = df_realtime.apply(lambda row: row['volume'] if row['match_type'] == 'Sell' else 0, axis=1)
                
                # Nh√≥m theo khung th·ªùi gian 5 ph√∫t v√† t√≠nh to√°n c√°c gi√° tr·ªã c·∫ßn thi·∫øt
                df_grouped = df_realtime.groupby('5_min_interval').agg(
                    volume_buy=('volume_buy', 'sum'),  # T·ªïng volume c·ªßa c√°c giao d·ªãch mua
                    volume_sell=('volume_sell', 'sum'),  # T·ªïng volume c·ªßa c√°c giao d·ªãch b√°n
                    avg_price=('price', 'mean')  # T√≠nh gi√° trung b√¨nh (mean)
                ).reset_index()

                # T√≠nh to√°n net (volume_buy - volume_sell)
                df_grouped['net'] = df_grouped['volume_buy'] - df_grouped['volume_sell']
                
                
                # T√≠nh t·ªïng c√°c gi√° tr·ªã
                total_volume_buy = df_grouped['volume_buy'].sum()
                total_volume_sell = df_grouped['volume_sell'].sum()
                total_net = df_grouped['net'].sum()
                avg_price_total = df_grouped['avg_price'].mean()
                
                # Hi·ªÉn th·ªã t·ªïng c√°c gi√° tr·ªã
                st.markdown(f"### T·ªïng D·ªØ Li·ªáu Giao D·ªãch (C·ªï Phi·∫øu: {symbol})")
                st.markdown(f"- **T·ªïng volume mua:** {total_volume_buy:,.0f}")
                st.markdown(f"- **T·ªïng volume b√°n:** {total_volume_sell:,.0f}")
                st.markdown(f"- **T·ªïng net (Mua - B√°n):** {total_net:,.0f}")
                st.markdown(f"- **Gi√° trung b√¨nh:** {avg_price_total:,.2f}")

                # S·∫Øp x·∫øp c·ªôt theo th·ª© t·ª± y√™u c·∫ßu
                df_grouped = df_grouped[['5_min_interval', 'avg_price', 'volume_buy', 'volume_sell', 'net']]
                df_grouped.rename(columns={'5_min_interval': 'time'}, inplace=True)

                # Hi·ªÉn th·ªã b·∫£ng d·ªØ li·ªáu theo y√™u c·∫ßu
                st.write(f"Th√¥ng tin gi√° c·ªï phi·∫øu {symbol} realtime theo t·ª´ng kho·∫£ng 5 ph√∫t:")
                st.dataframe(df_grouped.style.format({'avg_price': '{:,.2f}', 'volume_buy': '{:,.0f}', 'volume_sell': '{:,.0f}', 'net': '{:,.0f}'}), use_container_width=True)
                
                # T√πy ch·ªçn t·∫£i v·ªÅ d·ªØ li·ªáu
                st.download_button(
                    label="üì• T·∫£i d·ªØ li·ªáu realtime (.CSV)",
                    data=df_grouped.to_csv(index=False).encode("utf-8"),
                    file_name=f"{symbol}_gia_realtime_5phut.csv",
                    mime="text/csv"
                )

        except Exception as e:
            st.error(f"ƒê√£ x·∫£y ra l·ªói khi l·∫•y d·ªØ li·ªáu realtime: {e}")
          


with tab6:
    st.title("üíπ Ph√¢n t√≠ch th·ªã tr∆∞·ªùng")

    st.markdown("Ch·ªçn nh√≥m ng√†nh ƒë·ªÉ ph√¢n t√≠ch d·ªØ li·ªáu bi·∫øn ƒë·ªông c·ªßa ng√†nh.")
    # Dropdown cho tab6 v√† tab7
    selected_dropdown = st.selectbox("Ch·ªçn ch·ª©c nƒÉng", ["Ph√¢n t√≠ch th·ªã tr∆∞·ªùng (realtime)", "Ph√¢n t√≠ch th·ªã tr∆∞·ªùng (offline)"])

    if selected_dropdown == "Ph√¢n t√≠ch th·ªã tr∆∞·ªùng (realtime)":
    # ==== TAB 6 ====
        with st.expander("üíπ Ph√¢n t√≠ch bi·∫øn ƒë·ªông nh√≥m ng√†nh", expanded=True):
            st.title("üíπ Ph√¢n t√≠ch bi·∫øn ƒë·ªông nh√≥m ng√†nh")
            st.markdown("Ch·ªçn nh√≥m ng√†nh v√† ng√†y ƒë·ªÉ xem bi·ªÉu ƒë·ªì gi√° tr·ªã giao d·ªãch c·ªßa c√°c c·ªï phi·∫øu.")      
            

            # Ch·ªçn nh√≥m ng√†nh t·ª´ dropdown
            selected_sector = st.selectbox('Ch·ªçn nh√≥m ng√†nh:', options=list(sector_map.keys()), index=0, key="sector_select_1_unique")

            # Ch·ªçn ng√†y
            selected_date = st.date_input("Ch·ªçn ng√†y", value=date.today(), key="date_input_1_unique")

            # L·∫•y danh s√°ch m√£ c·ªï phi·∫øu theo nh√≥m ng√†nh ƒë√£ ch·ªçn
            stock_symbols = sector_map.get(selected_sector, [])

            if st.button("üíπ Ph√¢n t√≠ch"):
                try:
                    # Kh·ªüi t·∫°o ƒë·ªëi t∆∞·ª£ng Vnstock
                    vn = Vnstock()

                    df_list = []
                    for symbol in stock_symbols:
                        stock = vn.stock(symbol=symbol, source='VCI')
                        df = stock.quote.history(start='2020-01-01', end=str(selected_date))
                        if df is not None and not df.empty:
                            df['symbol'] = symbol
                            df_list.append(df)

                    df_all = pd.concat(df_list, ignore_index=True)
                    df_all['time'] = pd.to_datetime(df_all['time'])

                    # L·ªçc ra c√°c d√≤ng d·ªØ li·ªáu tr∆∞·ªõc ho·∫∑c b·∫±ng ng√†y ƒë∆∞·ª£c ch·ªçn
                    df_filtered = df_all[df_all['time'] <= pd.to_datetime(selected_date)]

                    # L·∫•y 2 d√≤ng g·∫ßn nh·∫•t (ng√†y ƒë∆∞·ª£c ch·ªçn v√† ng√†y tr∆∞·ªõc ƒë√≥) cho m·ªói m√£
                    df_latest = df_filtered.sort_values(['symbol', 'time']).groupby('symbol').tail(2)

                    # T√≠nh close_previous
                    df_latest = df_latest.sort_values(['symbol', 'time'])
                    df_latest['close_previous'] = df_latest.groupby('symbol')['close'].shift(1)

                    # T√≠nh thay ƒë·ªïi
                    df_latest['change'] = df_latest['close'] - df_latest['close_previous']
                    df_latest['change_pct'] = ((df_latest['change'] / df_latest['close_previous']) * 100).round(2)
                    df_latest['color'] = df_latest['change'].apply(
                        lambda x: 'green' if x > 0 else ('red' if x < 0 else 'yellow')
                    )

                    # Ch·ªâ l·∫•y d√≤ng m·ªõi nh·∫•t ƒë·ªÉ v·∫Ω treemap
                    df_latest = df_latest.groupby('symbol').tail(1)

                    # Chu·∫©n b·ªã d·ªØ li·ªáu v·∫Ω treemap
                    treemap_data = df_latest[['symbol', 'color', 'close', 'change_pct', 'volume']]
                    
                    # ƒê·ªãnh d·∫°ng gi√° tr·ªã hi·ªÉn th·ªã
                    treemap_data['close_formatted'] = treemap_data['close'].apply(lambda x: f"{x:.2f}")
                    treemap_data['volume_formatted'] = treemap_data['volume'].apply(lambda x: f"{x:,.0f}")

                    # T·∫°o bi·ªÉu ƒë·ªì Treemap
                    fig = go.Figure(go.Treemap(
                        labels=treemap_data['symbol'],
                        parents=[''] * len(treemap_data),
                        values=treemap_data['volume'],
                        
                        text=treemap_data['change_pct'].apply(lambda x: f"({x:.2f}%)"),  # Ph·∫ßn trƒÉm thay ƒë·ªïi trong √¥
                        textinfo="label+text",
                        textfont=dict(color='white', size=16),

                        customdata=treemap_data[['change_pct', 'close_formatted', 'volume_formatted']].values,

                        hovertemplate=(
                            "<b>%{label}</b><br>"
                            "Thay ƒë·ªïi: (%{customdata[0]:.2f}%)<br>"
                            "Gi√° ƒë√≥ng c·ª≠a: %{customdata[1]}<br>"
                            "Kh·ªëi l∆∞·ª£ng: %{customdata[2]}<br>"
                            "<extra></extra>"
                        ),

                        marker=dict(
                            colors=treemap_data['color'].apply(
                                lambda x: '#2ECC71' if x == 'green' else ('#E74C3C' if x == 'red' else '#F1C40F')
                            )
                        )
                    ))

                    fig.update_layout(
                        title=f"Bi·ªÉu ƒë·ªì Treemap ‚Äì Ng√†nh: {selected_sector} | Ng√†y: {selected_date}",
                        margin=dict(t=50, l=25, r=25, b=25)
                    )

                    st.plotly_chart(fig, use_container_width=True)
                    
                    st.subheader("üìä Ph√¢n T√≠ch Chuy√™n S√¢u Theo Ng√†nh")
                                           
                    #1: So s√°nh % thay ƒë·ªïi gi·ªØa c√°c c·ªï phi·∫øu trong ng√†nh
                    fig_bar = px.bar(
                        df_latest.sort_values("change_pct", ascending=False),
                        x="symbol",
                        y="change_pct",
                        color="change_pct",
                        color_continuous_scale=["red", "yellow", "green"],
                        title=f"So s√°nh % thay ƒë·ªïi gi·ªØa c√°c c·ªï phi·∫øu ‚Äì {selected_sector}",
                        labels={"change_pct": "% thay ƒë·ªïi"}
                    )
                    fig_bar.update_layout(template="plotly_white")
                    st.plotly_chart(fig_bar, use_container_width=True)
                    
                    #2: Kh·ªëi l∆∞·ª£ng giao d·ªãch so v·ªõi % thay ƒë·ªïi
                    fig_scatter = px.scatter(
                        df_latest,
                        x="change_pct",
                        y="volume",
                        size="close",
                        color="change_pct",
                        color_continuous_scale="RdYlGn",
                        hover_name="symbol",
                        title=f"Kh·ªëi l∆∞·ª£ng giao d·ªãch vs % thay ƒë·ªïi ‚Äì {selected_sector}",
                        labels={"change_pct": "% thay ƒë·ªïi", "volume": "Kh·ªëi l∆∞·ª£ng"}
                    )
                    fig_scatter.update_layout(template="plotly_white")
                    st.plotly_chart(fig_scatter, use_container_width=True)
                    
                    #3: Xu h∆∞·ªõng gi√° top 5
                    # L·∫•y 5 m√£ c√≥ volume cao nh·∫•t
                    top_symbols = df_latest.sort_values("volume", ascending=False).head(5)['symbol'].tolist()
                    df_top = df_all[df_all['symbol'].isin(top_symbols)]

                    fig_line = px.line(
                        df_top,
                        x="time",
                        y="close",
                        color="symbol",
                        title=f"Xu h∆∞·ªõng gi√° ‚Äì Top 5 m√£ theo kh·ªëi l∆∞·ª£ng ({selected_sector})",
                        labels={"close": "Gi√° ƒë√≥ng c·ª≠a", "time": "Th·ªùi gian"}
                    )
                    fig_line.update_layout(template="plotly_white")
                    st.plotly_chart(fig_line, use_container_width=True)
                    
                    # ==== PH√ÇN T√çCH BOX PLOT ‚Äì BI·∫æN ƒê·ªòNG GI√Å ====

                    # C·ªë ƒë·ªãnh kho·∫£ng th·ªùi gian: 30 ng√†y g·∫ßn nh·∫•t tr∆∞·ªõc selected_date
                    max_date = pd.to_datetime(selected_date)
                    min_date_30 = max_date - pd.Timedelta(days=30)

                    # L·ªçc d·ªØ li·ªáu theo th·ªùi gian cho 30 ng√†y
                    df_boxplot_30 = df_all[(df_all['time'] >= min_date_30) & (df_all['time'] <= max_date)].copy()

                    # T√≠nh ph·∫ßn trƒÉm thay ƒë·ªïi gi√° (%) cho 30 ng√†y
                    df_boxplot_30 = df_boxplot_30.sort_values(['symbol', 'time'])
                    df_boxplot_30['pct_change'] = df_boxplot_30.groupby('symbol')['close'].pct_change() * 100

                    # L√†m tr√≤n ph·∫ßn trƒÉm thay ƒë·ªïi gi√° v·ªÅ 2 ch·ªØ s·ªë th·∫≠p ph√¢n
                    df_boxplot_30['pct_change'] = df_boxplot_30['pct_change'].round(2)

                    # Lo·∫°i b·ªè c√°c d√≤ng kh√¥ng c√≥ d·ªØ li·ªáu
                    df_boxplot_30_clean = df_boxplot_30.dropna(subset=['pct_change'])

                    # Hi·ªÉn th·ªã Boxplot cho 30 ng√†y
                    if df_boxplot_30_clean.empty:
                        st.warning("Kh√¥ng c√≥ ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ hi·ªÉn th·ªã bi·ªÉu ƒë·ªì cho 30 ng√†y.")
                    else:
                        fig_box_30 = px.box(
                            df_boxplot_30_clean,
                            x='symbol',
                            y='pct_change',
                            color='symbol',  # M·ªói m√£ c·ªï phi·∫øu m·ªôt m√†u
                            points="outliers",
                            title="üì¶ Boxplot ‚Äì Bi·∫øn ƒë·ªông gi√° (%) trong 30 ng√†y g·∫ßn nh·∫•t",
                            template="seaborn",  # Giao di·ªán ƒë·∫πp m·∫Øt h∆°n
                            color_discrete_sequence=px.colors.qualitative.Set2  # B·∫£ng m√†u nh·∫π nh√†ng
                        )

                        fig_box_30.update_layout(
                            xaxis_title="M√£ c·ªï phi·∫øu",
                            yaxis_title="% Thay ƒë·ªïi gi√° theo ng√†y",
                            height=600,
                            title_font_size=22,
                            title_x=0.0,  # CƒÉn gi·ªØa ti√™u ƒë·ªÅ
                            font=dict(size=14),
                            showlegend=False  # ·∫®n ch√∫ th√≠ch n·∫øu kh√¥ng c·∫ßn
                        )

                        st.plotly_chart(fig_box_30, use_container_width=True)


                    # C·ªë ƒë·ªãnh kho·∫£ng th·ªùi gian: 90 ng√†y g·∫ßn nh·∫•t tr∆∞·ªõc selected_date
                    min_date_90 = max_date - pd.Timedelta(days=90)

                    # L·ªçc d·ªØ li·ªáu theo th·ªùi gian cho 90 ng√†y
                    df_boxplot_90 = df_all[(df_all['time'] >= min_date_90) & (df_all['time'] <= max_date)].copy()

                    # T√≠nh ph·∫ßn trƒÉm thay ƒë·ªïi gi√° (%) cho 90 ng√†y
                    df_boxplot_90 = df_boxplot_90.sort_values(['symbol', 'time'])
                    df_boxplot_90['pct_change'] = df_boxplot_90.groupby('symbol')['close'].pct_change() * 100

                    # L√†m tr√≤n ph·∫ßn trƒÉm thay ƒë·ªïi gi√° v·ªÅ 2 ch·ªØ s·ªë th·∫≠p ph√¢n
                    df_boxplot_90['pct_change'] = df_boxplot_90['pct_change'].round(2)

                    # Lo·∫°i b·ªè c√°c d√≤ng kh√¥ng c√≥ d·ªØ li·ªáu
                    df_boxplot_90_clean = df_boxplot_90.dropna(subset=['pct_change'])

                    # Hi·ªÉn th·ªã Boxplot cho 90 ng√†y
                    if df_boxplot_90_clean.empty:
                        st.warning("Kh√¥ng c√≥ ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ hi·ªÉn th·ªã bi·ªÉu ƒë·ªì cho 90 ng√†y.")
                    else:
                        fig_box_90 = px.box(
                            df_boxplot_90_clean,
                            x='symbol',
                            y='pct_change',
                            color='symbol',
                            points="outliers",
                            title="üì¶ Boxplot ‚Äì Bi·∫øn ƒë·ªông gi√° (%) trong 90 ng√†y g·∫ßn nh·∫•t",
                            template="seaborn",
                            color_discrete_sequence=px.colors.qualitative.Set2
                        )

                        fig_box_90.update_layout(
                            xaxis_title="M√£ c·ªï phi·∫øu",
                            yaxis_title="% Thay ƒë·ªïi gi√° theo ng√†y",
                            height=600,
                            title_font_size=22,
                            title_x=0.0,
                            font=dict(size=14),
                            showlegend=False
                        )

                        st.plotly_chart(fig_box_90, use_container_width=True)
                        
                    
                    #4: Ma tr·∫≠n t∆∞∆°ng quan gi·ªØa c√°c c·ªï phi·∫øu trong ng√†nh    
                    # T√≠nh to√°n % thay ƒë·ªïi gi√° h√†ng ng√†y
                    df_all = df_all.sort_values(['symbol', 'time'])
                    df_all['pct_change'] = df_all.groupby('symbol')['close'].pct_change() * 100
                    # T√≠nh SMA 5 ng√†y
                    df_all['SMA_5'] = df_all.groupby('symbol')['close'].transform(lambda x: x.rolling(window=5).mean())

                    # T√≠nh EMA 5 ng√†y
                    df_all['EMA_5'] = df_all.groupby('symbol')['close'].transform(lambda x: x.ewm(span=5, adjust=False).mean())

                    # T√≠nh ph·∫ßn trƒÉm thay ƒë·ªïi gi√° d·ª±a tr√™n SMA ho·∫∑c EMA
                    df_all['pct_change_SMA'] = df_all.groupby('symbol')['SMA_5'].pct_change() * 100
                    df_all['pct_change_EMA'] = df_all.groupby('symbol')['EMA_5'].pct_change() * 100

                    # Pivot ƒë·ªÉ t·∫°o ma tr·∫≠n symbol x date
                    df_pct_matrix = df_all.pivot_table(
                        index='time', columns='symbol', values='pct_change_SMA'
                    )

                    # T√≠nh ma tr·∫≠n t∆∞∆°ng quan
                    corr_matrix = df_pct_matrix.corr()
                    
                    # Ki·ªÉm tra n·∫øu s·ªë l∆∞·ª£ng m√£ < 2 th√¨ kh√¥ng c·∫ßn v·∫Ω
                    if len(corr_matrix.columns) < 2:
                        st.warning("Kh√¥ng ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ v·∫Ω ma tr·∫≠n t∆∞∆°ng quan.")
                    else:
                        # T√≠nh s·ªë m√£ ƒë·ªÉ ƒë·∫∑t k√≠ch th∆∞·ªõc ph√π h·ª£p
                        n_symbols = len(corr_matrix.columns)
                        cell_size = 50  # pixels per cell

                        fig_corr = px.imshow(
                            corr_matrix,
                            text_auto=".2f",
                            color_continuous_scale='RdBu_r',
                            title=f"Ma tr·∫≠n t∆∞∆°ng quan ph·∫ßn trƒÉm thay ƒë·ªïi gi√° theo SMA 5 ng√†y ‚Äì {selected_sector}",
                            labels=dict(color="H·ªá s·ªë t∆∞∆°ng quan")
                        )

                        fig_corr.update_layout(
                            xaxis_title="M√£ c·ªï phi·∫øu",
                            yaxis_title="M√£ c·ªï phi·∫øu",
                            title_font=dict(size=22),
                            font=dict(size=14),
                            width=max(700, cell_size * n_symbols),   # chi·ªÅu r·ªông t·ªëi thi·ªÉu 700
                            height=max(700, cell_size * n_symbols),  # chi·ªÅu cao t∆∞∆°ng ƒë∆∞∆°ng
                            margin=dict(t=80, l=50, r=50, b=50),
                            template="plotly_white"
                        )

                        fig_corr.update_traces(
                            textfont=dict(size=14)
                        )

                        st.plotly_chart(fig_corr, use_container_width=True)
                        
                except Exception as e:
                    st.error(f"ƒê√£ x·∫£y ra l·ªói: {e}")   
                    
    # ==== TAB 7 ====            
    elif selected_dropdown == "Treemap realtime":
        with st.expander("üíπ Treemap realtime", expanded=True):
            st.title("üíπ Treemap ‚Äì Gi√° C·ªï Phi·∫øu Theo Ng√†nh (Realtime)")
            st.markdown("Ch·ªçn nh√≥m ng√†nh v√† ng√†y ƒë·ªÉ xem bi·ªÉu ƒë·ªì gi√° tr·ªã giao d·ªãch c·ªßa c√°c c·ªï phi·∫øu.")

            selected_sector = st.selectbox('Ch·ªçn nh√≥m ng√†nh:', options=list(sector_map.keys()), index=0, key="sector_select_2_unique")
            selected_date = st.date_input("Ch·ªçn ng√†y", value=date.today(), key="date_input_2_unique")
            stock_symbols = sector_map.get(selected_sector, [])

            if st.button("üíπ Hi·ªÉn th·ªã"):
                try:
                    vn = Vnstock()
                    df_hist_list = []
                    df_realtime_list = []

                    for symbol in stock_symbols:
                        stock = vn.stock(symbol=symbol, source='VCI')

                        # D·ªØ li·ªáu l·ªãch s·ª≠ ƒë·ªÉ l·∫•y gi√° h√¥m tr∆∞·ªõc
                        df_hist = stock.quote.history(start='2020-01-01', end=str(selected_date))
                        if df_hist is not None and not df_hist.empty:
                            df_hist['symbol'] = symbol
                            df_hist_list.append(df_hist)

                        # D·ªØ li·ªáu realtime ƒë·ªÉ l·∫•y gi√° cu·ªëi c√πng v√† volume l≈©y k·∫ø
                        df_intraday = stock.quote.intraday(symbol=symbol, page_size=10000)
                        if df_intraday is not None and not df_intraday.empty:
                            df_intraday['symbol'] = symbol
                            last_price = df_intraday.iloc[-1]['price']
                            total_volume = df_intraday['volume'].sum()
                            df_realtime_list.append({
                                'symbol': symbol,
                                'last_price': last_price,
                                'volume': total_volume
                            })

                    # T·ªïng h·ª£p d·ªØ li·ªáu realtime
                    df_realtime = pd.DataFrame(df_realtime_list)

                    # T√≠nh gi√° h√¥m tr∆∞·ªõc t·ª´ d·ªØ li·ªáu l·ªãch s·ª≠
                    df_all = pd.concat(df_hist_list, ignore_index=True)
                    df_all['time'] = pd.to_datetime(df_all['time'])
                    df_filtered = df_all[df_all['time'] <= pd.to_datetime(selected_date)]
                    df_latest = df_filtered.sort_values(['symbol', 'time']).groupby('symbol').tail(2)
                    df_latest = df_latest.sort_values(['symbol', 'time'])
                    df_latest['close_previous'] = df_latest.groupby('symbol')['close'].shift(1)
                    df_previous = df_latest.groupby('symbol').tail(1)[['symbol', 'close_previous']]

                    # G·ªôp d·ªØ li·ªáu realtime v√† close_previous
                    df_merged = pd.merge(df_realtime, df_previous, on='symbol', how='left')
                    df_merged['change'] = df_merged['last_price'] - df_merged['close_previous']
                    df_merged['change_pct'] = (df_merged['change'] / df_merged['close_previous']) * 100
                    df_merged['color'] = df_merged['change'].apply(
                        lambda x: 'green' if x > 0 else ('red' if x < 0 else 'yellow')
                    )

                    # ƒê·ªãnh d·∫°ng hi·ªÉn th·ªã
                    df_merged['close_formatted'] = df_merged['last_price'].apply(lambda x: f"{x:,.2f}")
                    df_merged['volume_formatted'] = df_merged['volume'].apply(lambda x: f"{x:,.0f}")
                    
                    # Chu·∫©n b·ªã b·∫£ng hi·ªÉn th·ªã
                    df_merged_display = df_merged[['symbol', 'last_price', 'volume', 'close_previous', 'change', 'change_pct']]
                    df_merged_display.columns = ['M√£ CP', 'Gi√° hi·ªán t·∫°i', 'Kh·ªëi l∆∞·ª£ng l≈©y k·∫ø', 'Gi√° h√¥m tr∆∞·ªõc', 'Thay ƒë·ªïi', 'Thay ƒë·ªïi (%)']
                    df_merged_display['Gi√° hi·ªán t·∫°i'] = df_merged_display['Gi√° hi·ªán t·∫°i'].apply(lambda x: f"{x:,.2f}")
                    df_merged_display['Kh·ªëi l∆∞·ª£ng l≈©y k·∫ø'] = df_merged_display['Kh·ªëi l∆∞·ª£ng l≈©y k·∫ø'].apply(lambda x: f"{x:,.0f}")
                    df_merged_display['Gi√° h√¥m tr∆∞·ªõc'] = df_merged_display['Gi√° h√¥m tr∆∞·ªõc'].apply(lambda x: f"{x:,.2f}")
                    df_merged_display['Thay ƒë·ªïi'] = df_merged_display['Thay ƒë·ªïi'].apply(lambda x: f"{x:,.2f}")
                    df_merged_display['Thay ƒë·ªïi (%)'] = df_merged_display['Thay ƒë·ªïi (%)'].apply(lambda x: f"{x:.2f}%")

                    # Hi·ªÉn th·ªã b·∫£ng
                    #st.markdown("### üìã B·∫£ng d·ªØ li·ªáu chi ti·∫øt")
                    #st.dataframe(df_merged_display, use_container_width=True)

                    # V·∫Ω Treemap
                    fig = go.Figure(go.Treemap(
                        labels=df_merged['symbol'],
                        parents=[''] * len(df_merged),
                        values=df_merged['volume'],
                        text=df_merged['change_pct'].apply(lambda x: f"({x:.2f}%)"),
                        textinfo="label+text",
                        textfont=dict(color='white', size=16),
                        customdata=df_merged[['change_pct', 'close_formatted', 'volume_formatted']].values,
                        hovertemplate=(
                            "<b>%{label}</b><br>"
                            "Thay ƒë·ªïi: (%{customdata[0]:.2f}%)<br>"
                            "Gi√° hi·ªán t·∫°i: %{customdata[1]}<br>"
                            "Kh·ªëi l∆∞·ª£ng: %{customdata[2]}<br>"
                            "<extra></extra>"
                        ),
                        marker=dict(
                            colors=df_merged['color'].apply(
                                lambda x: '#2ECC71' if x == 'green' else ('#E74C3C' if x == 'red' else '#F1C40F')
                            )
                        )
                    ))

                    fig.update_layout(
                        title=f"Bi·ªÉu ƒë·ªì Treemap ‚Äì Ng√†nh: {selected_sector} | Ng√†y: {selected_date}",
                        margin=dict(t=50, l=25, r=25, b=25)
                    )

                    st.plotly_chart(fig, use_container_width=True)

                except Exception as e:
                    st.error(f"ƒê√£ x·∫£y ra l·ªói: {e}")
                
    if selected_dropdown == "Ph√¢n t√≠ch th·ªã tr∆∞·ªùng (offline)":
    # ==== TAB 8 ====
        # ==== T·∫°o Tab m·ªõi cho ph√¢n t√≠ch d·ªØ li·ªáu CSV v·ªõi c·ªôt Industry ====
        
        # T·∫°o template CSV
        def create_csv_template():
            # T·∫°o m·ªôt DataFrame m·∫´u v·ªõi c√°c c·ªôt c·∫ßn thi·∫øt
            template_data = {
                'Ticker': [''],
                'Date/Time': [''],
                'Close': [0.0],
                'Change': [0.0],
                'Volume': [0]
            }
            
            df_template = pd.DataFrame(template_data)
            
            # Chuy·ªÉn DataFrame th√†nh CSV
            csv = df_template.to_csv(index=False, encoding='utf-8')
            return csv        
        
        # T·∫°o template th∆∞ vi·ªán nh√≥m ng√†nh
        def create_industry_library_template():
            template_data = {
                'Ticker': [''],     # v√≠ d·ª• m√£ c·ªï phi·∫øu
                'Industry': ['']  # v√≠ d·ª• nh√≥m ng√†nh t∆∞∆°ng ·ª©ng
            }
            df_template = pd.DataFrame(template_data)
            csv = df_template.to_csv(index=False, encoding='utf-8')
            return csv
            
        # T·∫°o m·ªôt n√∫t t·∫£i v·ªÅ CSV
        csv_template = create_csv_template()
        # T·∫°o n√∫t t·∫£i template th∆∞ vi·ªán nh√≥m ng√†nh
        csv_industry_template = create_industry_library_template()        
            
        # ==== HI·ªÇN TH·ªä HAI N√öT T·∫¢I SONG SONG ====
        col1, col2 = st.columns(2)
        
        with col1:   
            # N√∫t t·∫£i v·ªÅ template CSV
            st.download_button(
                label="T·∫£i template d·ªØ li·ªáu",
                data=csv_template,
                file_name="template.csv",
                mime="text/csv"
            )
            st.markdown("</div>", unsafe_allow_html=True)
        with col2:       
            st.download_button(
                label="üì• T·∫£i template th∆∞ vi·ªán nh√≥m ng√†nh",
                data=csv_industry_template,
                file_name="industry_library_template.csv",
                mime="text/csv"
            )
            st.markdown("</div>", unsafe_allow_html=True)
        
        # === 1. T·∫£i l√™n th∆∞ vi·ªán nh√≥m ng√†nh (upload & ghi ƒë√® n·∫øu c√≥) ===
        st.markdown("<h4>üìÅ Th∆∞ vi·ªán nh√≥m ng√†nh</h4>", unsafe_allow_html=True)

        industry_file = st.file_uploader("T·∫£i l√™n file th∆∞ vi·ªán nh√≥m ng√†nh (CSV)", type=["csv"], key="industry_upload")

        if industry_file is not None:
            with open("industry_library.csv", "wb") as f:
                f.write(industry_file.read())
            st.success("‚úÖ Th∆∞ vi·ªán nh√≥m ng√†nh ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t!")

        # ƒê·ªçc th∆∞ vi·ªán n·∫øu ƒë√£ c√≥
        if os.path.exists("industry_library.csv"):
            df_industry_library = pd.read_csv("industry_library.csv")
            last_update = pd.to_datetime(os.path.getmtime('industry_library.csv'), unit='s')
            st.markdown(f"<p style='font-size:18px; font-weight:500;'>üìÖ Th∆∞ vi·ªán ƒë∆∞·ª£c c·∫≠p nh·∫≠t l·∫ßn cu·ªëi: {last_update.strftime('%d/%m/%Y %H:%M:%S')}</h5>", unsafe_allow_html=True)

        else:
            st.error("‚ùå Ch∆∞a c√≥ th∆∞ vi·ªán nh√≥m ng√†nh. Vui l√≤ng t·∫£i l√™n tr∆∞·ªõc khi ph√¢n t√≠ch.")
            st.stop()


        # === 2. T·∫£i l√™n file d·ªØ li·ªáu c·ªï phi·∫øu ===
        # T·∫£i file CSV ch·ª©a d·ªØ li·ªáu c·ªï phi·∫øu
        st.markdown("<h4>üìà Ph√¢n t√≠ch C·ªï Phi·∫øu t·ª´ D·ªØ Li·ªáu CSV (Theo Nh√≥m Ng√†nh)</h4>", unsafe_allow_html=True)
        uploaded_file = st.file_uploader("T·∫£i l√™n file CSV ch·ª©a d·ªØ li·ªáu c·ªï phi·∫øu", type=["csv"])

        # N·∫øu c√≥ file m·ªõi ƒë∆∞·ª£c t·∫£i l√™n ‚Üí l∆∞u l·∫°i
        if uploaded_file is not None:
            with open("stock_data.csv", "wb") as f:
                f.write(uploaded_file.read())
            st.success("‚úÖ D·ªØ li·ªáu c·ªï phi·∫øu ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t!")

        # N·∫øu file ƒë√£ t·ªìn t·∫°i (t·ª´ upload ho·∫∑c ƒë√£ c√≥ tr∆∞·ªõc), th√¨ x·ª≠ l√Ω ti·∫øp
        if os.path.exists("stock_data.csv"):
            try:
                df = pd.read_csv("stock_data.csv")
            except Exception as e:
                st.error(f"‚ùå L·ªói khi ƒë·ªçc file CSV: {e}")
                st.stop()

            # Ki·ªÉm tra v√† hi·ªÉn th·ªã d·ªØ li·ªáu
            trading_date = pd.to_datetime(df['Date/Time'].iloc[0]).strftime("%d/%m/%Y")
            st.markdown(f"<p style='font-size:18px; font-weight:500;'>üìÖ D·ªØ li·ªáu ng√†y {trading_date} ƒë√£ t·∫£i l√™n</p>", unsafe_allow_html=True)
            st.dataframe(df.head())
            

            # X·ª≠ l√Ω d·ªØ li·ªáu: chuy·ªÉn ƒë·ªïi c·ªôt Date/Time sang ƒë·ªãnh d·∫°ng ng√†y th√°ng
            df['Date/Time'] = pd.to_datetime(df['Date/Time'], format='%m/%d/%Y')

            # C·∫£i thi·ªán ƒë·ªãnh d·∫°ng c·ªôt "close" v√† "Change" (l√†m tr√≤n ƒë·∫øn 2 ch·ªØ s·ªë th·∫≠p ph√¢n)
            df['close'] = df['Close'].round(2)
            df['Change'] = df['Change'].round(2)
            
            
            # === G·∫Øn nh√≥m ng√†nh t·ª´ th∆∞ vi·ªán ===
            df = df.merge(df_industry_library, on='Ticker', how='left')

            st.subheader("üîç D·ªØ li·ªáu sau khi g·∫Øn nh√≥m ng√†nh:")
            st.dataframe(df.head())

            # Ki·ªÉm tra m√£ ch∆∞a c√≥ ng√†nh
            missing = df[df['Industry'].isna()]['Ticker'].unique()
            if len(missing) > 0:
                st.warning(f"‚ö†Ô∏è C√≥ {len(missing)} m√£ ch∆∞a c√≥ nh√≥m ng√†nh trong th∆∞ vi·ªán.")
                st.write(missing)

            # ==== Dropdown cho ng∆∞·ªùi d√πng ch·ªçn Ph√¢n T√≠ch Ng√†nh hay Th·ªã Tr∆∞·ªùng ====
            analysis_options = ['Ph√¢n t√≠ch Th·ªã Tr∆∞·ªùng', 'Ph√¢n t√≠ch Ng√†nh']
            selected_analysis = st.selectbox("Ch·ªçn lo·∫°i ph√¢n t√≠ch", analysis_options)

            if selected_analysis == "Ph√¢n t√≠ch Ng√†nh":
                # ==== Ph√¢n t√≠ch Ng√†nh ====

                # Dropdown cho ng∆∞·ªùi d√πng ch·ªçn nh√≥m ng√†nh ho·∫∑c t·∫•t c·∫£ c√°c m√£
                industry_options = ['T·∫•t c·∫£'] + sorted(df['Industry'].dropna().unique().tolist())
                selected_industry = st.selectbox("Ch·ªçn nh√≥m ng√†nh ƒë·ªÉ ph√¢n t√≠ch", industry_options)

                # L·ªçc d·ªØ li·ªáu theo nh√≥m ng√†nh ƒë∆∞·ª£c ch·ªçn
                if selected_industry != 'T·∫•t c·∫£':
                    df_filtered = df[df['Industry'] == selected_industry]
                else:
                    df_filtered = df

                # ==== Bi·ªÉu ƒë·ªì 1: Tree Map theo ng√†nh ====
                st.subheader("üå≥ Tree Map ‚Äì Bi·∫øn ƒë·ªông gi√° v√† Kh·ªëi l∆∞·ª£ng giao d·ªãch")

                # ƒê·ªãnh nghƒ©a m√†u s·∫Øc d·ª±a tr√™n s·ª± thay ƒë·ªïi gi√°
                df_filtered['color'] = df_filtered['Change'].apply(
                    lambda x: 'green' if x > 0 else ('red' if x < 0 else 'yellow')
                )

                # T·∫°o bi·ªÉu ƒë·ªì Treemap
                fig_tree = go.Figure(go.Treemap(
                    labels=df_filtered['Ticker'],  # M√£ c·ªï phi·∫øu
                    parents=[selected_industry] * len(df_filtered),  # ƒê·∫∑t nh√≥m ng√†nh l√† cha m·∫π
                    values=df_filtered['Volume'],  # Kh·ªëi l∆∞·ª£ng giao d·ªãch
                    text=df_filtered['Change'].apply(lambda x: f"({x:.2f}%)"),  # Ph·∫ßn trƒÉm thay ƒë·ªïi
                    textinfo="label+text",  # Hi·ªÉn th·ªã nh√£n v√† text
                    textfont=dict(color='white', size=16),  # ƒê·ªãnh d·∫°ng ch·ªØ

                    # D·ªØ li·ªáu hi·ªÉn th·ªã khi hover
                    customdata=df_filtered[['Change', 'close', 'Volume']].values,
                    hovertemplate=(
                        "<b>%{label}</b><br>"
                        "Thay ƒë·ªïi: (%{customdata[0]:.2f}%)<br>"
                        "Gi√° ƒë√≥ng c·ª≠a: %{customdata[1]}<br>"
                        "Kh·ªëi l∆∞·ª£ng: %{customdata[2]}<br>"
                        "<extra></extra>"
                    ),

                    # M√†u s·∫Øc c·ªßa c√°c √¥ trong treemap
                    marker=dict(
                        colors=df_filtered['color'].apply(
                            lambda x: '#2ECC71' if x == 'green' else ('#E74C3C' if x == 'red' else '#F1C40F')
                        )
                    )
                ))

                # C·∫≠p nh·∫≠t b·ªë c·ª•c c·ªßa bi·ªÉu ƒë·ªì
                fig_tree.update_layout(
                    title="üå≥ Tree Map ‚Äì Bi·∫øn ƒë·ªông gi√° v√† Kh·ªëi l∆∞·ª£ng giao d·ªãch",
                    margin=dict(t=50, l=25, r=25, b=25)
                )

                # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì
                st.plotly_chart(fig_tree, use_container_width=True)

                # ==== Bi·ªÉu ƒë·ªì 2: So s√°nh % thay ƒë·ªïi gi·ªØa c√°c c·ªï phi·∫øu trong ng√†nh ====
                st.subheader(f"üìä So s√°nh % thay ƒë·ªïi gi·ªØa c√°c c·ªï phi·∫øu ‚Äì {selected_industry}")

                # Lo·∫°i b·ªè c√°c b·∫£n sao theo Ticker ƒë·ªÉ ƒë·∫£m b·∫£o kh√¥ng c√≥ c·ªï phi·∫øu n√†o b·ªã tr√πng
                df_filtered_unique = df_filtered.drop_duplicates(subset=["Ticker"])

                # S·∫Øp x·∫øp d·ªØ li·ªáu theo ph·∫ßn trƒÉm thay ƒë·ªïi
                df_sorted = df_filtered_unique.sort_values("Change", ascending=False)

                # N·∫øu s·ªë l∆∞·ª£ng m√£ c·ªï phi·∫øu l·ªõn h∆°n 30, l·∫•y 15 m√£ c√≥ % thay ƒë·ªïi l·ªõn nh·∫•t v√† nh·ªè nh·∫•t
                if len(df_sorted) > 30:
                    df_sorted = pd.concat([df_sorted.head(15), df_sorted.tail(15)])

                # T·∫°o bi·ªÉu ƒë·ªì thanh ƒë·ªÉ so s√°nh % thay ƒë·ªïi gi·ªØa c√°c c·ªï phi·∫øu
                fig_bar = px.bar(
                    df_sorted,
                    x="Ticker",  # M√£ c·ªï phi·∫øu
                    y="Change",  # Ph·∫ßn trƒÉm thay ƒë·ªïi
                    color="Change",  # M√†u s·∫Øc d·ª±a tr√™n % thay ƒë·ªïi
                    color_continuous_scale=["red", "yellow", "green"],  # M√†u s·∫Øc cho ph·∫ßn trƒÉm thay ƒë·ªïi
                    title=f"So s√°nh % thay ƒë·ªïi gi·ªØa c√°c c·ªï phi·∫øu ‚Äì {selected_industry}",
                    labels={"Change": "% thay ƒë·ªïi"}
                )

                # C·∫≠p nh·∫≠t b·ªë c·ª•c c·ªßa bi·ªÉu ƒë·ªì
                fig_bar.update_layout(
                    template="plotly_white",
                    xaxis_title="M√£ c·ªï phi·∫øu",
                    yaxis_title="% Thay ƒë·ªïi gi√°",
                    height=500,
                    xaxis={'categoryorder': 'total descending'}  # S·∫Øp x·∫øp theo gi√° tr·ªã % thay ƒë·ªïi
                )

                # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì thanh
                st.plotly_chart(fig_bar, use_container_width=True)

                # ==== Bi·ªÉu ƒë·ªì 3: Kh·ªëi l∆∞·ª£ng giao d·ªãch vs % thay ƒë·ªïi ====
                st.subheader(f"üìâ Kh·ªëi l∆∞·ª£ng giao d·ªãch vs % thay ƒë·ªïi ‚Äì {selected_industry}")

                # S·∫Øp x·∫øp d·ªØ li·ªáu theo ph·∫ßn trƒÉm thay ƒë·ªïi
                df_sorted = df_filtered.sort_values("Change", ascending=False)

                # N·∫øu s·ªë l∆∞·ª£ng m√£ c·ªï phi·∫øu l·ªõn h∆°n 30, l·∫•y 15 m√£ c√≥ % thay ƒë·ªïi l·ªõn nh·∫•t v√† 15 m√£ c√≥ % thay ƒë·ªïi nh·ªè nh·∫•t
                if len(df_sorted) > 30:
                    df_sorted = pd.concat([df_sorted.head(15), df_sorted.tail(15)])

                # T·∫°o bi·ªÉu ƒë·ªì scatter: Kh·ªëi l∆∞·ª£ng giao d·ªãch so v·ªõi % thay ƒë·ªïi
                fig_scatter = px.scatter(
                    df_sorted,
                    x="Change",  # Ph·∫ßn trƒÉm thay ƒë·ªïi
                    y="Volume",  # Kh·ªëi l∆∞·ª£ng giao d·ªãch
                    size="close",  # K√≠ch th∆∞·ªõc ƒëi·ªÉm bi·ªÉu th·ªã gi√° ƒë√≥ng c·ª≠a
                    color="Change",  # M√†u s·∫Øc d·ª±a tr√™n % thay ƒë·ªïi
                    color_continuous_scale="RdYlGn",  # Ch·ªçn b·∫£ng m√†u ƒë·ªè - v√†ng - xanh
                    hover_name="Ticker",  # Hi·ªÉn th·ªã m√£ c·ªï phi·∫øu khi hover
                    title=f"Kh·ªëi l∆∞·ª£ng giao d·ªãch vs % thay ƒë·ªïi ‚Äì {selected_industry}",
                    labels={"Change": "% thay ƒë·ªïi", "Volume": "Kh·ªëi l∆∞·ª£ng"}
                )

                # C·∫≠p nh·∫≠t b·ªë c·ª•c c·ªßa bi·ªÉu ƒë·ªì
                fig_scatter.update_layout(
                    template="plotly_white",
                    xaxis_title="% Thay ƒë·ªïi",
                    yaxis_title="Kh·ªëi l∆∞·ª£ng giao d·ªãch",
                    height=500
                )

                # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì scatter
                st.plotly_chart(fig_scatter, use_container_width=True)  


                # ==== Bi·ªÉu ƒë·ªì 4: Bi·ªÉu ƒë·ªì ph√¢n t√°n d·ªçc ‚Äì % thay ƒë·ªïi theo t·ª´ng m√£, nh√≥m theo ng√†nh ====
                st.subheader("üéØ Bi·ªÉu ƒë·ªì ph√¢n t√°n ‚Äì Thay ƒë·ªïi gi√° theo m√£ c·ªï phi·∫øu, nh√≥m theo ng√†nh")

                # L·ªçc c√°c d√≤ng kh√¥ng c√≥ gi√° tr·ªã thay ƒë·ªïi
                df_valid = df_filtered[df_filtered['Change'].notnull() & df_filtered['Industry'].notnull()]

                # T·∫°o bi·ªÉu ƒë·ªì scatter d·∫°ng strip plot
                fig_strip = px.scatter(
                    df_valid,
                    x="Ticker",          # Tr·ª•c X l√† m√£ c·ªï phi·∫øu
                    y="Change",          # Tr·ª•c Y l√† % thay ƒë·ªïi gi√°
                    size="Volume",       # K√≠ch th∆∞·ªõc ƒëi·ªÉm theo kh·ªëi l∆∞·ª£ng
                    color="Industry",    # T√¥ m√†u theo ng√†nh
                    hover_name="Ticker", # Hover hi·ªÉn th·ªã m√£ c·ªï phi·∫øu
                    hover_data={
                        "Change": True,
                        "Volume": True,
                        "Industry": True
                    },
                    title="M·ª©c thay ƒë·ªïi gi√° c√°c c·ªï phi·∫øu theo ng√†nh (k√≠ch th∆∞·ªõc = kh·ªëi l∆∞·ª£ng giao d·ªãch)",
                )

                # C·∫≠p nh·∫≠t hovertemplate ƒë·ªÉ ƒë·ªãnh d·∫°ng volume v·ªõi d·∫•u ph√¢n c√°ch h√†ng ngh√¨n
                fig_strip.update_traces(
                    hovertemplate="<b>%{hovertext}</b><br>%{x}: %{y:.2f}%<br>Volume: %{marker.size:,.0f}<extra></extra>"
                )

                # T√πy ch·ªânh giao di·ªán bi·ªÉu ƒë·ªì
                fig_strip.update_traces(marker=dict(opacity=0.7, line=dict(width=0.5, color='DarkSlateGrey')))
                fig_strip.update_layout(
                    template="plotly_white",
                    xaxis_title="M√£ c·ªï phi·∫øu",
                    yaxis_title="% Thay ƒë·ªïi gi√°",
                    height=600
                )

                # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì
                st.plotly_chart(fig_strip, use_container_width=True)                

                # ==== Bi·ªÉu ƒë·ªì 6: Boxplot ph√¢n b·ªë % thay ƒë·ªïi theo m√£ c·ªï phi·∫øu ====
                st.subheader("üì¶ Ph√¢n b·ªë % thay ƒë·ªïi theo t·ª´ng m√£ c·ªï phi·∫øu")

                # Lo·∫°i b·ªè gi√° tr·ªã NaN
                df_box = df_filtered.dropna(subset=["Ticker", "Change"])

                # V·∫Ω bi·ªÉu ƒë·ªì boxplot
                fig_box = px.box(
                    df_box,
                    x="Ticker",
                    y="Change",
                    points="all",  # Hi·ªÉn th·ªã to√†n b·ªô ƒëi·ªÉm
                    color="Ticker",
                    title="Ph√¢n b·ªë % thay ƒë·ªïi theo t·ª´ng m√£ c·ªï phi·∫øu",
                    labels={"Change": "% Thay ƒë·ªïi", "Ticker": "M√£ c·ªï phi·∫øu"}
                )

                # ƒê·ªãnh d·∫°ng hover v·ªõi 2 ch·ªØ s·ªë th·∫≠p ph√¢n
                fig_box.update_traces(
                    hovertemplate="<b>M√£ c·ªï phi·∫øu: %{x}</b><br>% Thay ƒë·ªïi: %{y:.2f}%<extra></extra>",
                    marker=dict(opacity=0.5, size=6)
                )

                # T√πy ch·ªânh giao di·ªán bi·ªÉu ƒë·ªì
                fig_box.update_layout(
                    template="plotly_white",
                    height=700,
                    xaxis_title="M√£ c·ªï phi·∫øu",
                    yaxis_title="% Thay ƒë·ªïi",
                    showlegend=False,
                    font=dict(size=14),
                    margin=dict(t=60, b=60, l=40, r=40)
                )

                # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì
                st.plotly_chart(fig_box, use_container_width=True)

                
            else:  # N·∫øu ch·ªçn ph√¢n t√≠ch Th·ªã Tr∆∞·ªùng
                # ==== Ph√¢n t√≠ch Th·ªã Tr∆∞·ªùng ====
                
                # T√≠nh to√°n theo t·ª´ng ng√†nh (Industry)
                df_market = df.groupby('Industry').agg({
                    'close': 'mean', 
                    'Change': 'mean', 
                    'Volume': 'sum'
                }).reset_index()
                
                # ==== Bi·ªÉu ƒë·ªì 1: Bi·ªÉu ƒë·ªì t·ªïng quan th·ªã tr∆∞·ªùng theo ng√†nh ====
                # ==== T√≠nh to√°n d·ªØ li·ªáu b·ªï sung ====
                # Ph√¢n lo·∫°i tƒÉng/gi·∫£m/kh√¥ng ƒë·ªïi
                df['change_category'] = pd.cut(
                    df['Change'],
                    bins=[-float('inf'), -0.01, 0.01, float('inf')],
                    labels=['Gi·∫£m', 'Kh√¥ng ƒë·ªïi', 'TƒÉng']
                )

                # ƒê·∫øm s·ªë l∆∞·ª£ng m√£ tƒÉng/gi·∫£m/kh√¥ng ƒë·ªïi theo ng√†nh
                industry_counts = df.groupby(['Industry', 'change_category']).size().unstack(fill_value=0).reset_index()

                # K·∫øt h·ª£p v·ªõi t·ªïng kh·ªëi l∆∞·ª£ng (ƒë√£ t√≠nh s·∫µn trong df_market)
                df_combined = pd.merge(df_market, industry_counts, on='Industry')

                # T·∫°o c·ªôt nh√£n hi·ªÉn th·ªã chi ti·∫øt
                df_combined['custom_label'] = df_combined.apply(
                    lambda row: f"{row['Industry']}<br>T·ªïng m√£: {row['TƒÉng'] + row['Gi·∫£m'] + row['Kh√¥ng ƒë·ªïi']}<br>"
                                f"TƒÉng: {row['TƒÉng']} | Gi·∫£m: {row['Gi·∫£m']} | Kh√¥ng ƒë·ªïi: {row['Kh√¥ng ƒë·ªïi']}", axis=1
                )

                # Bi·ªÉu ƒë·ªì H√¨nh Tr√≤n
                fig_market = px.pie(
                    df_combined,
                    names='Industry',
                    values='Volume',
                    title="T·ª∑ tr·ªçng kh·ªëi l∆∞·ª£ng giao d·ªãch theo ng√†nh",
                    hole=0.4,
                    color_discrete_sequence=px.colors.qualitative.Set3
                )

                # G√°n customdata th·ªß c√¥ng v√† ch·ªânh hovertemplate
                fig_market.update_traces(
                    customdata=df_combined[['custom_label']].values,  # Truy·ªÅn customdata ƒë√∫ng c√°ch, ch·ªâ l·∫•y custom_label
                    hovertemplate=(
                        "<b>%{label}</b><br>" +  # Hi·ªÉn th·ªã t√™n ng√†nh
                        "%{customdata[0]}<br>" +  # Hi·ªÉn th·ªã chi ti·∫øt t·ª´ customdata[0]
                        "Kh·ªëi l∆∞·ª£ng: %{value:,}<br>" +  # Hi·ªÉn th·ªã kh·ªëi l∆∞·ª£ng
                        "<extra></extra>"  # B·ªè ph·∫ßn th√¥ng tin th√™m (m·∫∑c ƒë·ªãnh)
                    ),
                    textinfo='label',  # Hi·ªÉn th·ªã ch·ªâ t√™n ng√†nh tr√™n nh√£n
                    textposition='inside'  # ƒê·∫∑t nh√£n b√™n trong h√¨nh tr√≤n
                )

                # Thay ƒë·ªïi layout ƒë·ªÉ bi·ªÉu ƒë·ªì l·ªõn h∆°n
                fig_market.update_layout(
                    title="T·ª∑ tr·ªçng kh·ªëi l∆∞·ª£ng giao d·ªãch theo ng√†nh",
                    margin=dict(t=50, l=50, r=50, b=50),  # ƒêi·ªÅu ch·ªânh l·ªÅ ƒë·ªÉ m·ªü r·ªông kh√¥ng gian
                    width=800,  # Chi·ªÅu r·ªông c·ªßa bi·ªÉu ƒë·ªì
                    height=600  # Chi·ªÅu cao c·ªßa bi·ªÉu ƒë·ªì
                )

                st.plotly_chart(fig_market, use_container_width=True)

                # ==== Bi·ªÉu ƒë·ªì 2: Bi·ªÉu ƒë·ªì thay ƒë·ªïi gi√° trung b√¨nh theo ng√†nh ====
                st.subheader("üìà Bi·ªÉu ƒë·ªì thay ƒë·ªïi gi√° trung b√¨nh theo ng√†nh")

                # T·∫°o bi·ªÉu ƒë·ªì c·ªôt
                fig_change = px.bar(
                    df_market,
                    x="Industry",
                    y="Change",
                    color="Industry",
                    title="Thay ƒë·ªïi gi√° trung b√¨nh theo ng√†nh",
                    labels={"Change": "% thay ƒë·ªïi gi√°"}
                )

                # C·∫≠p nh·∫≠t hovertemplate ƒë·ªÉ hi·ªÉn th·ªã 2 ch·ªØ s·ªë th·∫≠p ph√¢n
                fig_change.update_traces(
                    hovertemplate="<b>%{x}</b><br>% thay ƒë·ªïi: %{y:.2f}%<extra></extra>"
                )

                # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì
                st.plotly_chart(fig_change, use_container_width=True)
                
                # ==== T·∫°o bi·ªÉu ƒë·ªì t∆∞∆°ng quan v·ªÅ s·ªë m√£ tƒÉng, gi·∫£m, kh√¥ng ƒë·ªïi gi·ªØa c√°c ng√†nh c·ªßa th·ªã tr∆∞·ªùng ====

                # T√≠nh to√°n s·ªë l∆∞·ª£ng m√£ tƒÉng, gi·∫£m, kh√¥ng ƒë·ªïi trong t·ª´ng ng√†nh
                df['change_category'] = pd.cut(df['Change'], 
                                               bins=[-float('inf'), -0.01, 0.01, float('inf')], 
                                               labels=['Gi·∫£m', 'Kh√¥ng ƒë·ªïi', 'TƒÉng'])

                # T√≠nh s·ªë l∆∞·ª£ng m√£ cho t·ª´ng lo·∫°i thay ƒë·ªïi (TƒÉng, Gi·∫£m, Kh√¥ng ƒë·ªïi) trong t·ª´ng ng√†nh
                industry_change_count = df.groupby(['Industry', 'change_category']).size().unstack(fill_value=0)

                # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì Stacked Bar: T∆∞∆°ng quan s·ªë m√£ TƒÉng, Gi·∫£m, Kh√¥ng ƒë·ªïi gi·ªØa c√°c ng√†nh
                st.subheader("üìä T∆∞∆°ng quan s·ªë m√£ tƒÉng, gi·∫£m, kh√¥ng ƒë·ªïi gi·ªØa c√°c ng√†nh")

                # T·∫°o bi·ªÉu ƒë·ªì Stacked Bar v·ªõi Plotly
                fig_industry_change = px.bar(
                    industry_change_count,
                    x=industry_change_count.index,  # Nh√≥m ng√†nh
                    y=industry_change_count.columns,  # C√°c lo·∫°i thay ƒë·ªïi (TƒÉng, Gi·∫£m, Kh√¥ng ƒë·ªïi)
                    title="T∆∞∆°ng quan s·ªë m√£ TƒÉng, Gi·∫£m, Kh√¥ng ƒë·ªïi gi·ªØa c√°c Ng√†nh c·ªßa Th·ªã Tr∆∞·ªùng",
                    labels={"value": "S·ªë l∆∞·ª£ng m√£ c·ªï phi·∫øu", "Industry": "Nh√≥m Ng√†nh"},
                    color_discrete_map={"Gi·∫£m": "#E74C3C", "Kh√¥ng ƒë·ªïi": "#F1C40F", "TƒÉng": "#2ECC71"},
                    barmode="stack"  # Ch·∫ø ƒë·ªô bi·ªÉu ƒë·ªì ch·ªìng (Stacked)
                )

                # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì Plotly trong Streamlit
                st.plotly_chart(fig_industry_change, use_container_width=True)
                
                # ==== Bi·ªÉu ƒë·ªì 4: Bi·ªÉu ƒë·ªì ph√¢n t√°n d·ªçc ‚Äì % thay ƒë·ªïi theo t·ª´ng m√£, nh√≥m theo ng√†nh ====
                st.subheader("üéØ Bi·ªÉu ƒë·ªì ph√¢n t√°n ‚Äì Thay ƒë·ªïi gi√° theo nh√≥m ng√†nh")

                # L·ªçc c√°c d√≤ng kh√¥ng c√≥ gi√° tr·ªã thay ƒë·ªïi
                df_valid = df[df['Change'].notnull() & df['Industry'].notnull()]

                # T·∫°o bi·ªÉu ƒë·ªì scatter d·∫°ng strip plot
                fig_strip = px.scatter(
                    df_valid,
                    x="Industry",          # Tr·ª•c X l√† nh√≥m ng√†nh
                    y="Change",            # Tr·ª•c Y l√† % thay ƒë·ªïi gi√°
                    size="Volume",         # K√≠ch th∆∞·ªõc ƒëi·ªÉm theo kh·ªëi l∆∞·ª£ng
                    color="Industry",      # T√¥ m√†u theo ng√†nh
                    hover_name="Ticker",   # Hover hi·ªÉn th·ªã m√£ c·ªï phi·∫øu
                    hover_data={
                        "Change": True,
                        "Volume": True,
                        "Industry": True
                    },
                    title="M·ª©c thay ƒë·ªïi gi√° c√°c c·ªï phi·∫øu theo ng√†nh (k√≠ch th∆∞·ªõc = kh·ªëi l∆∞·ª£ng giao d·ªãch)",
                )
                
                # C·∫≠p nh·∫≠t hovertemplate ƒë·ªÉ ƒë·ªãnh d·∫°ng volume v·ªõi d·∫•u ph√¢n c√°ch h√†ng ngh√¨n
                fig_strip.update_traces(
                    hovertemplate="<b>%{hovertext}</b><br>%{x}: %{y:.2f}%<br>Volume: %{marker.size:,.0f}<extra></extra>"
                )

                # T√πy ch·ªânh giao di·ªán bi·ªÉu ƒë·ªì
                fig_strip.update_traces(marker=dict(opacity=0.7, line=dict(width=0.5, color='DarkSlateGrey')))
                fig_strip.update_layout(
                    template="plotly_white",
                    xaxis_title="Nh√≥m ng√†nh",
                    yaxis_title="% Thay ƒë·ªïi gi√°",
                    height=600
                )

                # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì
                st.plotly_chart(fig_strip, use_container_width=True)
                
                # ==== Bi·ªÉu ƒë·ªì 5: ƒê·ªô l·ªách chu·∫©n c·ªßa % thay ƒë·ªïi theo t·ª´ng ng√†nh (Line Chart) ====
                st.subheader("üìà ƒê·ªô l·ªách chu·∫©n % thay ƒë·ªïi theo t·ª´ng ng√†nh (Line Chart)")

                # T√≠nh to√°n ƒë·ªô l·ªách chu·∫©n cho t·ª´ng ng√†nh
                industry_std = df.groupby("Industry")["Change"].std().reset_index()
                industry_std.columns = ["Industry", "Std_Change"]
                industry_std = industry_std.dropna().sort_values("Std_Change", ascending=False)

                # V·∫Ω bi·ªÉu ƒë·ªì ƒë∆∞·ªùng
                fig_line = px.line(
                    industry_std,
                    x="Industry",
                    y="Std_Change",
                    markers=True,
                    title="üìà ƒê·ªô l·ªách chu·∫©n % thay ƒë·ªïi theo t·ª´ng ng√†nh",
                    labels={"Industry": "Ng√†nh", "Std_Change": "ƒê·ªô l·ªách chu·∫©n (%)"},
                    color_discrete_sequence=["#2ECC71"]  # M√†u xanh ng·ªçc
                )

                # Hi·ªÉn th·ªã gi√° tr·ªã hover d·∫°ng 2 s·ªë th·∫≠p ph√¢n
                fig_line.update_traces(
                    line=dict(width=3),
                    marker=dict(size=8, color="#27AE60", line=dict(width=1, color="#1E8449")),
                    hovertemplate="<b>%{x}</b><br>ƒê·ªô l·ªách chu·∫©n: %{y:.2f}%<extra></extra>"
                )

                # T√πy ch·ªânh giao di·ªán
                fig_line.update_layout(
                    template="plotly_white",
                    xaxis_title="Ng√†nh",
                    yaxis_title="ƒê·ªô l·ªách chu·∫©n (%)",
                    height=500,
                    font=dict(size=14),
                    title_font=dict(size=20, color="#145A32", family="Arial"),
                    margin=dict(t=60, b=60, l=40, r=40)
                )

                # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì
                st.plotly_chart(fig_line, use_container_width=True)
                
                # ==== Bi·ªÉu ƒë·ªì 6: Boxplot ph√¢n b·ªë % thay ƒë·ªïi theo ng√†nh ====
                st.subheader("üì¶ Ph√¢n b·ªë % thay ƒë·ªïi theo t·ª´ng ng√†nh (Boxplot)")

                # Lo·∫°i b·ªè gi√° tr·ªã NaN
                df_box = df.dropna(subset=["Industry", "Change"])

                # V·∫Ω bi·ªÉu ƒë·ªì boxplot
                fig_box = px.box(
                    df_box,
                    x="Industry",
                    y="Change",
                    points="all",  # Hi·ªÉn th·ªã to√†n b·ªô ƒëi·ªÉm
                    color="Industry",
                    title="Ph√¢n b·ªë % thay ƒë·ªïi theo t·ª´ng ng√†nh",
                    labels={"Change": "% Thay ƒë·ªïi", "Industry": "Ng√†nh"}
                )
                
                # ƒê·ªãnh d·∫°ng hover v·ªõi 2 ch·ªØ s·ªë th·∫≠p ph√¢n
                fig_box.update_traces(
                    hovertemplate="<b>Ng√†nh: %{x}</b><br>% Thay ƒë·ªïi: %{y:.2f}%<extra></extra>",
                    marker=dict(opacity=0.5, size=6)
                )

                # T√πy ch·ªânh giao di·ªán bi·ªÉu ƒë·ªì
                fig_box.update_layout(
                    template="plotly_white",
                    height=700,
                    xaxis_title="Ng√†nh",
                    yaxis_title="% Thay ƒë·ªïi",
                    showlegend=False,
                    font=dict(size=14),
                    margin=dict(t=60, b=60, l=40, r=40)
                )

                st.plotly_chart(fig_box, use_container_width=True)
                
                # ==== Bi·ªÉu ƒë·ªì 7: Trung b√¨nh v√† ƒê·ªô l·ªách chu·∫©n theo ng√†nh ====
                st.subheader("üìä Trung b√¨nh v√† ƒê·ªô l·ªách chu·∫©n % thay ƒë·ªïi theo t·ª´ng ng√†nh")

                # T√≠nh to√°n th·ªëng k√™
                industry_stats = df.groupby("Industry")["Change"].agg(["mean", "std"]).reset_index()
                industry_stats = industry_stats.dropna().sort_values("mean", ascending=False)
                industry_stats = industry_stats.rename(columns={"mean": "Mean_Change", "std": "Std_Change"})

                # Bi·ªÉu ƒë·ªì combo c·ªôt
                fig_combo = go.Figure()

                # C·ªôt Trung b√¨nh
                fig_combo.add_trace(go.Bar(
                    x=industry_stats["Industry"],
                    y=industry_stats["Mean_Change"],
                    name="Trung b√¨nh (%)",
                    marker_color='#2ECC71',
                    hovertemplate="<b>%{x}</b><br>Trung b√¨nh: %{y:.2f}%<extra></extra>"
                ))

                # C·ªôt ƒê·ªô l·ªách chu·∫©n
                fig_combo.add_trace(go.Bar(
                    x=industry_stats["Industry"],
                    y=industry_stats["Std_Change"],
                    name="ƒê·ªô l·ªách chu·∫©n (%)",
                    marker_color='#F5B041',
                    hovertemplate="<b>%{x}</b><br>ƒê·ªô l·ªách chu·∫©n: %{y:.2f}%<extra></extra>"
                ))

                # Layout t√πy ch·ªânh
                fig_combo.update_layout(
                    title="üìä Trung b√¨nh v√† ƒê·ªô l·ªách chu·∫©n % thay ƒë·ªïi theo t·ª´ng ng√†nh",
                    barmode='group',
                    xaxis_title="Ng√†nh",
                    yaxis_title="Gi√° tr·ªã (%)",
                    height=600,
                    template="plotly_white",
                    font=dict(size=14),
                    margin=dict(t=60, b=60, l=40, r=40)
                )

                # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì
                st.plotly_chart(fig_combo, use_container_width=True)         
                
                
with tab8:
    st.title("üìù Ph√¢n t√≠ch t√†i ch√≠nh doanh nghi·ªáp")

    st.markdown("Ch·ªçn nh√≥m ng√†nh ƒë·ªÉ ph√¢n t√≠ch d·ªØ li·ªáu bi·∫øn ƒë·ªông c·ªßa ng√†nh.")
    # Dropdown cho tab5 v√† tab9
    selected_dropdown = st.selectbox("Ch·ªçn ch·ª©c nƒÉng", ["L·∫•y d·ªØ li·ªáu", "Ph√¢n t√≠ch t√†i ch√≠nh doanh nghi·ªáp"])

    if selected_dropdown == "L·∫•y d·ªØ li·ªáu":
    # ==== TAB 5 ====
        with st.expander("L·∫•y d·ªØ li·ªáu", expanded=True):
            st.title("üìã L·∫•y d·ªØ li·ªáu")

            st.markdown("""
            Nh·∫≠p m√£ c·ªï phi·∫øu ƒë·ªÉ xem c√°c ch·ªâ s·ªë t√†i ch√≠nh nh∆∞ ROE, ROA, EPS, N·ª£/V·ªën ch·ªß s·ªü h·ªØu, v.v.  
            Ngu·ªìn d·ªØ li·ªáu: VCI (vnstock)
            """)

            symbol = st.text_input("Nh·∫≠p m√£ c·ªï phi·∫øu:", value="VNM", key="symbol_tab4").strip().upper()
            period = st.selectbox("Ch·ªçn chu k·ª≥:", ["year", "quarter"], index=0)
            lang = st.radio("Ng√¥n ng·ªØ hi·ªÉn th·ªã:", ["vi", "en"], horizontal=True)
            
            def format_number(x):
                """ƒê·ªãnh d·∫°ng s·ªë v·ªõi d·∫•u ch·∫•m ph√¢n c√°ch h√†ng ngh√¨n"""
                if isinstance(x, (int, float)):
                    return f"{x:,.0f}".replace(",", ".")  # ƒê·ªãnh d·∫°ng s·ªë v√† thay d·∫•u ph·∫©y b·∫±ng d·∫•u ch·∫•m
                return x

            if st.button("üîç L·∫•y d·ªØ li·ªáu", key="analyze_tab4"):
                try:
                    from vnstock import Vnstock
                    stock = Vnstock().stock(symbol=symbol, source='VCI')
                    
                    
                    # 1. Hi·ªÉn th·ªã b·∫£ng ch·ªâ s·ªë t√†i ch√≠nh
                    st.subheader("üìà Ch·ªâ s·ªë t√†i ch√≠nh")
                    df_ratio = stock.finance.ratio(period=period, lang=lang, dropna=True)
                    
                    if df_ratio is not None and not df_ratio.empty:
                        st.success("D·ªØ li·ªáu ch·ªâ s·ªë t√†i ch√≠nh ƒë√£ ƒë∆∞·ª£c l·∫•y th√†nh c√¥ng!")
                        st.dataframe(df_ratio, use_container_width=True)
                                                        
                    else:
                        st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu ch·ªâ s·ªë t√†i ch√≠nh cho m√£ n√†y.")

                            
                    # 2. B·∫£ng c√¢n ƒë·ªëi k·∫ø to√°n
                    st.subheader("üí∞ B·∫£ng c√¢n ƒë·ªëi k·∫ø to√°n")
                    df_balance = stock.finance.balance_sheet(period=period, lang=lang, dropna=True)
                    if df_balance is not None and not df_balance.empty:
                        st.dataframe(df_balance, use_container_width=True)
                    else:
                        st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu b·∫£ng c√¢n ƒë·ªëi k·∫ø to√°n.")
                    
                    # 3. B√°o c√°o k·∫øt qu·∫£ kinh doanh
                    st.subheader("üìä B√°o c√°o k·∫øt qu·∫£ kinh doanh")
                    df_income = stock.finance.income_statement(period=period, lang=lang, dropna=True)
                    if df_income is not None and not df_income.empty:
                        st.dataframe(df_income, use_container_width=True)
                    else:
                        st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu b√°o c√°o k·∫øt qu·∫£ kinh doanh.")
                    
                    # 4. B√°o c√°o l∆∞u chuy·ªÉn ti·ªÅn t·ªá
                    st.subheader("üíµ B√°o c√°o l∆∞u chuy·ªÉn ti·ªÅn t·ªá")
                    df_cashflow = stock.finance.cash_flow(period=period, lang=lang, dropna=True)
                    if df_cashflow is not None and not df_cashflow.empty:
                        st.dataframe(df_cashflow, use_container_width=True)
                    else:
                        st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu b√°o c√°o l∆∞u chuy·ªÉn ti·ªÅn t·ªá.")
                    
                except Exception as e:
                    st.error(f"ƒê√£ x·∫£y ra l·ªói khi l·∫•y d·ªØ li·ªáu: {e}")


    if selected_dropdown == "Ph√¢n t√≠ch t√†i ch√≠nh doanh nghi·ªáp":
    # ==== TAB 9 ====
        with st.expander("Ph√¢n t√≠ch t√†i ch√≠nh doanh nghi·ªáp", expanded=True):
            st.title("Ph√¢n t√≠ch t√†i ch√≠nh doanh nghi·ªáp")

            def clean_column(col):
                col = col.strip()
                col = re.sub(r'\s+', '_', col)
                col = re.sub(r'[^\w/]', '', col)  # Lo·∫°i b·ªè k√Ω t·ª± ƒë·∫∑c bi·ªát, tr·ª´ d·∫•u "/"
                return col
              
            # H√†m ƒë·ªçc v√† chu·∫©n h√≥a d·ªØ li·ªáu cho ch·ªâ s·ªë t√†i ch√≠nh
            def load_data(file, num_periods=8):
                df = pd.read_csv(file)
                df.columns = [clean_column(col) for col in df.columns]

                # T·∫°o c·ªôt 'K·ª≥_hi·ªÉn_th·ªã'
                def format_period(row):
                    if int(row['K·ª≥']) == 5:
                        return f"NƒÉm {int(row['NƒÉm'])}"
                    else:
                        return f"Q{int(row['K·ª≥'])}/{int(row['NƒÉm'])}"

                df["K·ª≥_hi·ªÉn_th·ªã"] = df.apply(format_period, axis=1)

                # L·∫•y 8 k·ª≥ g·∫ßn nh·∫•t
                df = df.sort_values(by=["NƒÉm", "K·ª≥"], ascending=[False, False]).head(num_periods)

                # Sau ƒë√≥ s·∫Øp x·∫øp l·∫°i tƒÉng d·∫ßn ƒë·ªÉ bi·ªÉu ƒë·ªì ƒë√∫ng th·ª© t·ª± th·ªùi gian
                df = df.sort_values(by=["NƒÉm", "K·ª≥"], ascending=[True, True]).reset_index(drop=True)

                return df

            # H√†m v·∫Ω bi·ªÉu ƒë·ªì b·∫±ng Plotly (gi·ªØ nguy√™n theo y√™u c·∫ßu)
            def plot_data(df, x_col, y_cols, plot_type, title):
                # L·∫•y t√™n c·ªï phi·∫øu t·ª´ c·ªôt 'CP' (t√™n c·ªï phi·∫øu trong d·ªØ li·ªáu)
                stock_name = df['CP'].iloc[0]  # Gi·∫£ s·ª≠ t·∫•t c·∫£ c√°c d√≤ng c√≥ c√πng t√™n c·ªï phi·∫øu

                # C·∫≠p nh·∫≠t ti√™u ƒë·ªÅ ƒë·ªÉ bao g·ªìm t√™n c·ªï phi·∫øu
                title = f"{stock_name} - {title}"

                fig = None
                if plot_type == "Line":
                    fig = px.line(df, x=x_col, y=y_cols, markers=True, title=title)
                elif plot_type == "Bar":
                    fig = px.bar(df, x=x_col, y=y_cols, barmode='group', title=title)
                elif plot_type == "Area":
                    fig = px.area(df, x=x_col, y=y_cols, title=title)

                if fig:
                    fig.update_layout(xaxis_title=x_col, yaxis_title="Gi√° tr·ªã")
                    st.plotly_chart(fig)
            # L·ª±a ch·ªçn s·ªë k·ª≥ ngay trong tab
            num_periods = st.slider("Ch·ªçn s·ªë k·ª≥ g·∫ßn nh·∫•t ƒë·ªÉ hi·ªÉn th·ªã", min_value=4, max_value=20, value=8)        

            # T·∫£i l√™n file CSV cho ch·ªâ s·ªë t√†i ch√≠nh
            financial_file = st.file_uploader("T·∫£i l√™n file CSV cho ch·ªâ s·ªë t√†i ch√≠nh", type=["csv"])
            if financial_file is not None:
                try:
                    df = load_data(financial_file, num_periods)
                    st.subheader("D·ªØ li·ªáu ch·ªâ s·ªë t√†i ch√≠nh k·ª≥")
                    st.dataframe(df)

                    # C√°c nh√≥m ch·ªâ s·ªë (sau khi chu·∫©n h√≥a)
                    financial_ratios = ['N·ª£/VCSH', 'ROE_', 'ROA_', 'ROIC_', 'Bi√™n_EBIT_', 'Bi√™n_l·ª£i_nhu·∫≠n_g·ªôp_', 'Bi√™n_l·ª£i_nhu·∫≠n_r√≤ng_', 
                                        'Ch·ªâ_s·ªë_thanh_to√°n_hi·ªán_th·ªùi', 'Ch·ªâ_s·ªë_thanh_to√°n_nhanh']
                    efficiency_metrics = ['V√≤ng_quay_t√†i_s·∫£n', 'V√≤ng_quay_TSCƒê', 'S·ªë_ng√†y_thu_ti·ªÅn_b√¨nh_qu√¢n', 
                                          'S·ªë_ng√†y_t·ªìn_kho_b√¨nh_qu√¢n', 'V√≤ng_quay_h√†ng_t·ªìn_kho']
                    valuation_metrics = ['P/E', 'P/B', 'P/S', 'EV/EBITDA', 'EPS_VND', 'BVPS_VND']

                    metric_group = st.sidebar.selectbox("Nh√≥m ch·ªâ s·ªë", 
                                                        ['Ch·ªâ s·ªë t√†i ch√≠nh', 'Hi·ªáu qu·∫£ ho·∫°t ƒë·ªông', 'ƒê·ªãnh gi√°'])

                    if metric_group == 'Ch·ªâ s·ªë t√†i ch√≠nh':
                        selected_metrics = st.sidebar.multiselect("Ch·ªçn ch·ªâ s·ªë", financial_ratios, default=financial_ratios[:3])
                    elif metric_group == 'Hi·ªáu qu·∫£ ho·∫°t ƒë·ªông':
                        selected_metrics = st.sidebar.multiselect("Ch·ªçn ch·ªâ s·ªë", efficiency_metrics, default=efficiency_metrics[:3])
                    else:
                        selected_metrics = st.sidebar.multiselect("Ch·ªçn ch·ªâ s·ªë", valuation_metrics, default=valuation_metrics[:3])

                    plot_type = st.sidebar.selectbox("Lo·∫°i bi·ªÉu ƒë·ªì", ['Line', 'Bar', 'Area'])

                    # V·∫Ω bi·ªÉu ƒë·ªì
                    if selected_metrics:
                        available_cols = df.columns.tolist()
                        valid_metrics = [col for col in selected_metrics if col in available_cols]

                        if valid_metrics:
                            plot_data(df, "K·ª≥_hi·ªÉn_th·ªã", valid_metrics, plot_type,
                                      f"Bi·ªÉu ƒë·ªì {plot_type} cho c√°c ch·ªâ s·ªë ƒë√£ ch·ªçn")
                        else:
                            st.warning("Kh√¥ng c√≥ ch·ªâ s·ªë h·ª£p l·ªá trong d·ªØ li·ªáu.")

                        # Cho ph√©p t·∫£i xu·ªëng d·ªØ li·ªáu ƒë√£ ch·ªçn
                        if st.button("Xu·∫•t d·ªØ li·ªáu ƒë√£ ch·ªçn"):
                            output = df[["K·ª≥_hi·ªÉn_th·ªã"] + selected_metrics]
                            st.download_button(
                                label="T·∫£i xu·ªëng CSV",
                                data=output.to_csv(index=False).encode('utf-8'),
                                file_name='selected_financial_data.csv',
                                mime='text/csv',
                            )

                except Exception as e:
                    st.error(f"C√≥ l·ªói x·∫£y ra: {str(e)}")
            else:
                st.info("Vui l√≤ng t·∫£i l√™n file CSV cho ch·ªâ s·ªë t√†i ch√≠nh ƒë·ªÉ b·∫Øt ƒë·∫ßu ph√¢n t√≠ch")

            # T·∫£i l√™n file CSV cho b·∫£ng c√¢n ƒë·ªëi k·∫ø to√°n
            balance_sheet_file = st.file_uploader("T·∫£i l√™n file CSV cho b·∫£ng c√¢n ƒë·ªëi k·∫ø to√°n", type=["csv"])
            if balance_sheet_file is not None:
                try:
                    df_balance_sheet = load_data(balance_sheet_file, num_periods)
                    st.subheader("D·ªØ li·ªáu b·∫£ng c√¢n ƒë·ªëi k·∫ø to√°n")
                    st.dataframe(df_balance_sheet)

                    # C√°c nh√≥m ch·ªâ s·ªë b·∫£ng c√¢n ƒë·ªëi k·∫ø to√°n
                    balance_sheet_metrics = {
                        'T√†i s·∫£n': [
                            'T√ÄI_S·∫¢N_NG·∫ÆN_H·∫†N_ƒë·ªìng', 'Ti·ªÅn_v√†_t∆∞∆°ng_ƒë∆∞∆°ng_ti·ªÅn_ƒë·ªìng', 'Gi√°_tr·ªã_thu·∫ßn_ƒë·∫ßu_t∆∞_ng·∫Øn_h·∫°n_ƒë·ªìng', 
                            'C√°c_kho·∫£n_ph·∫£i_thu_ng·∫Øn_h·∫°n_ƒë·ªìng', 'H√†ng_t·ªìn_kho_r√≤ng', 'T√†i_s·∫£n_l∆∞u_ƒë·ªông_kh√°c', 
                            'T√ÄI_S·∫¢N_D√ÄI_H·∫†N_ƒë·ªìng', 'Ph·∫£i_thu_v·ªÅ_cho_vay_d√†i_h·∫°n_ƒë·ªìng', 'T√†i_s·∫£n_c·ªë_ƒë·ªãnh_ƒë·ªìng', 
                            'Gi√°_tr·ªã_r√≤ng_t√†i_s·∫£n_ƒë·∫ßu_t∆∞', 'ƒê·∫ßu_t∆∞_d√†i_h·∫°n_ƒë·ªìng', 'L·ª£i_th·∫ø_th∆∞∆°ng_m·∫°i', 'T√†i_s·∫£n_d√†i_h·∫°n_kh√°c'
                        ],
                        'N·ª£ ph·∫£i tr·∫£': [
                            'N·ª¢_PH·∫¢I_TR·∫¢_ƒë·ªìng', 'N·ª£_ng·∫Øn_h·∫°n_ƒë·ªìng', 'N·ª£_d√†i_h·∫°n_ƒë·ªìng', 'Tr·∫£_tr∆∞·ªõc_cho_ng∆∞·ªùi_b√°n_ng·∫Øn_h·∫°n_ƒë·ªìng', 
                            'Ph·∫£i_thu_v·ªÅ_cho_vay_ng·∫Øn_h·∫°n_ƒë·ªìng', 'Vay_v√†_n·ª£_thu√™_t√†i_ch√≠nh_d√†i_h·∫°n_ƒë·ªìng', 
                            'Ng∆∞·ªùi_mua_tr·∫£_ti·ªÅn_tr∆∞·ªõc_ng·∫Øn_h·∫°n_ƒë·ªìng', 'Vay_v√†_n·ª£_thu√™_t√†i_ch√≠nh_ng·∫Øn_h·∫°n_ƒë·ªìng'
                        ],
                        'V·ªën ch·ªß s·ªü h·ªØu': [
                            'V·ªêN_CH·ª¶_S·ªû_H·ªÆU_ƒë·ªìng', 'V·ªën_v√†_c√°c_qu·ªπ_ƒë·ªìng', 'C√°c_qu·ªπ_kh√°c', 'L√£i_ch∆∞a_ph√¢n_ph·ªëi_ƒë·ªìng', 
                            'L·ª¢I_√çCH_C·ª¶A_C·ªî_ƒê√îNG_THI·ªÇU_S·ªê', 'T·ªîNG_C·ªòNG_NGU·ªíN_V·ªêN_ƒë·ªìng', 'Qu·ªπ_ƒë·∫ßu_t∆∞_v√†_ph√°t_tri·ªÉn_ƒë·ªìng', 
                            'C·ªï_phi·∫øu_ph·ªï_th√¥ng_ƒë·ªìng', 'V·ªën_g√≥p_c·ªßa_ch·ªß_s·ªü_h·ªØu_ƒë·ªìng', 'L·ª£i_th·∫ø_th∆∞∆°ng_m·∫°i_ƒë·ªìng', 
                            'Tr·∫£_tr∆∞·ªõc_d√†i_h·∫°n_ƒë·ªìng', 'T√†i_s·∫£n_d√†i_h·∫°n_kh√°c_ƒë·ªìng', 'Ph·∫£i_thu_d√†i_h·∫°n_kh√°c_ƒë·ªìng', 
                            'Ph·∫£i_thu_d√†i_h·∫°n_ƒë·ªìng'
                        ]
                    }

                    metric_group_balance_sheet = st.sidebar.selectbox("Nh√≥m ch·ªâ s·ªë b·∫£ng c√¢n ƒë·ªëi k·∫ø to√°n", 
                                                                      ['T√†i s·∫£n', 'N·ª£ ph·∫£i tr·∫£', 'V·ªën ch·ªß s·ªü h·ªØu'])

                    if metric_group_balance_sheet == 'T√†i s·∫£n':
                        selected_metrics_balance_sheet = st.sidebar.multiselect("Ch·ªçn ch·ªâ s·ªë", balance_sheet_metrics['T√†i s·∫£n'], default=balance_sheet_metrics['T√†i s·∫£n'][:3])
                    elif metric_group_balance_sheet == 'N·ª£ ph·∫£i tr·∫£':
                        selected_metrics_balance_sheet = st.sidebar.multiselect("Ch·ªçn ch·ªâ s·ªë", balance_sheet_metrics['N·ª£ ph·∫£i tr·∫£'], default=balance_sheet_metrics['N·ª£ ph·∫£i tr·∫£'][:3])
                    else:
                        selected_metrics_balance_sheet = st.sidebar.multiselect("Ch·ªçn ch·ªâ s·ªë", balance_sheet_metrics['V·ªën ch·ªß s·ªü h·ªØu'], default=balance_sheet_metrics['V·ªën ch·ªß s·ªü h·ªØu'][:3])

                    # Th·ª±c hi·ªán c√°c b∆∞·ªõc x·ª≠ l√Ω v√† v·∫Ω bi·ªÉu ƒë·ªì nh∆∞ tr∆∞·ªõc

                    plot_type_balance_sheet = st.sidebar.selectbox("Lo·∫°i bi·ªÉu ƒë·ªì b·∫£ng c√¢n ƒë·ªëi k·∫ø to√°n", ['Line', 'Bar', 'Area'])

                    # V·∫Ω bi·ªÉu ƒë·ªì b·∫£ng c√¢n ƒë·ªëi k·∫ø to√°n
                    if selected_metrics_balance_sheet:
                        available_cols_balance_sheet = df_balance_sheet.columns.tolist()
                        valid_metrics_balance_sheet = [col for col in selected_metrics_balance_sheet if col in available_cols_balance_sheet]

                        if valid_metrics_balance_sheet:
                            plot_data(df_balance_sheet, "K·ª≥_hi·ªÉn_th·ªã", valid_metrics_balance_sheet, plot_type_balance_sheet,
                                                    f"Bi·ªÉu ƒë·ªì {plot_type_balance_sheet} cho c√°c ch·ªâ s·ªë b·∫£ng c√¢n ƒë·ªëi k·∫ø to√°n ƒë√£ ch·ªçn")
                        else:
                            st.warning("Kh√¥ng c√≥ ch·ªâ s·ªë h·ª£p l·ªá trong d·ªØ li·ªáu.")

                        # Cho ph√©p t·∫£i xu·ªëng d·ªØ li·ªáu b·∫£ng c√¢n ƒë·ªëi k·∫ø to√°n ƒë√£ ch·ªçn
                        if st.button("Xu·∫•t d·ªØ li·ªáu b·∫£ng c√¢n ƒë·ªëi k·∫ø to√°n ƒë√£ ch·ªçn"):
                            output_balance_sheet = df_balance_sheet[["K·ª≥_hi·ªÉn_th·ªã"] + selected_metrics_balance_sheet]
                            st.download_button(
                                label="T·∫£i xu·ªëng CSV",
                                data=output_balance_sheet.to_csv(index=False).encode('utf-8'),
                                file_name='selected_balance_sheet_data.csv',
                                mime='text/csv',
                            )

                except Exception as e:
                    st.error(f"C√≥ l·ªói x·∫£y ra khi t·∫£i b·∫£ng c√¢n ƒë·ªëi k·∫ø to√°n: {str(e)}")
            else:
                st.info("Vui l√≤ng t·∫£i l√™n file CSV cho b·∫£ng c√¢n ƒë·ªëi k·∫ø to√°n ƒë·ªÉ b·∫Øt ƒë·∫ßu ph√¢n t√≠ch")

            # T·∫£i l√™n file CSV cho b√°o c√°o k·∫øt qu·∫£ kinh doanh
            income_statement_file = st.file_uploader("T·∫£i l√™n file CSV cho b√°o c√°o k·∫øt qu·∫£ kinh doanh", type=["csv"])
            if income_statement_file is not None:
                try:
                    df_income_statement = load_data(income_statement_file, num_periods)
                    st.subheader("D·ªØ li·ªáu b√°o c√°o k·∫øt qu·∫£ kinh doanh")
                    st.dataframe(df_income_statement)

                    # C√°c nh√≥m ch·ªâ s·ªë b√°o c√°o k·∫øt qu·∫£ kinh doanh
                    income_statement_metrics = {
                        'Doanh thu v√† l·ª£i nhu·∫≠n': [
                            'Doanh_thu_ƒë·ªìng', 'Doanh_thu_b√°n_h√†ng_v√†_cung_c·∫•p_d·ªãch_v·ª•', 'C√°c_kho·∫£n_gi·∫£m_tr·ª´_doanh_thu',
                            'Doanh_thu_thu·∫ßn', 'Gi√°_v·ªën_h√†ng_b√°n', 'L√£i_g·ªôp', 'L√£i_L·ªó_t·ª´_ho·∫°t_ƒë·ªông_kinh_doanh',
                            'L·ª£i_nhu·∫≠n_thu·∫ßn', 'LN_tr∆∞·ªõc_thu·∫ø', 'L·ª£i_nhu·∫≠n_sau_thu·∫ø_c·ªßa_C·ªï_ƒë√¥ng_c√¥ng_ty_m·∫π_ƒë·ªìng',
                            'C·ªï_ƒë√¥ng_thi·ªÉu_s·ªë', 'C·ªï_ƒë√¥ng_c·ªßa_C√¥ng_ty_m·∫π'
                        ],
                        'Chi ph√≠ v√† t√†i ch√≠nh': [
                            'Chi_ph√≠_t√†i_ch√≠nh', 'Chi_ph√≠_ti·ªÅn_l√£i_vay', 'Chi_ph√≠_b√°n_h√†ng', 'Chi_ph√≠_qu·∫£n_l√Ω_DN',
                            'Chi_ph√≠_thu·∫ø_TNDN_hi·ªán_h√†nh', 'Chi_ph√≠_thu·∫ø_TNDN_ho√£n_l·∫°i',
                            'Thu_nh·∫≠p_t√†i_ch√≠nh', 'Thu_nh·∫≠p_kh√°c', 'Thu_nh·∫≠p/Chi_ph√≠_kh√°c'
                        ],
                        'L·ª£i nhu·∫≠n v√† tƒÉng tr∆∞·ªüng': [
                            'TƒÉng_tr∆∞·ªüng_doanh_thu_', 'TƒÉng_tr∆∞·ªüng_l·ª£i_nhu·∫≠n_',
                            'L·ª£i_nhu·∫≠n_kh√°c', 'L√£i/l·ªó_t·ª´_c√¥ng_ty_li√™n_doanh', 'L√£i_l·ªó_trong_c√¥ng_ty_li√™n_doanh_li√™n_k·∫øt'
                        ]
                    }

                    # Ch·ªçn nh√≥m ch·ªâ s·ªë
                    metric_group_income = st.sidebar.selectbox("Nh√≥m ch·ªâ s·ªë b√°o c√°o KQKD", list(income_statement_metrics.keys()))

                    # Hi·ªÉn th·ªã multiselect ch·ªâ s·ªë
                    selected_metrics_income = st.sidebar.multiselect(
                        "Ch·ªçn ch·ªâ s·ªë",
                        income_statement_metrics[metric_group_income],
                        default=income_statement_metrics[metric_group_income][:3]
                    )

                    # Lo·∫°i bi·ªÉu ƒë·ªì
                    plot_type_income = st.sidebar.selectbox("Lo·∫°i bi·ªÉu ƒë·ªì b√°o c√°o KQKD", ['Line', 'Bar', 'Area'])

                    # V·∫Ω bi·ªÉu ƒë·ªì
                    if selected_metrics_income:
                        available_cols_income = df_income_statement.columns.tolist()
                        valid_metrics_income = [col for col in selected_metrics_income if col in available_cols_income]

                        if valid_metrics_income:
                            plot_data(
                                df_income_statement,
                                "K·ª≥_hi·ªÉn_th·ªã",  # C·ªôt th·ªÉ hi·ªán th·ªùi gian ‚Äî h√£y ch·∫Øc ch·∫Øn file c·ªßa b·∫°n c√≥ c·ªôt n√†y
                                valid_metrics_income,
                                plot_type_income,
                                f"Bi·ªÉu ƒë·ªì {plot_type_income} cho c√°c ch·ªâ s·ªë KQKD ƒë√£ ch·ªçn"
                            )
                        else:
                            st.warning("Kh√¥ng c√≥ ch·ªâ s·ªë h·ª£p l·ªá trong d·ªØ li·ªáu.")

                        # Cho ph√©p t·∫£i xu·ªëng d·ªØ li·ªáu
                        if st.button("Xu·∫•t d·ªØ li·ªáu b√°o c√°o KQKD ƒë√£ ch·ªçn"):
                            output_income = df_income_statement[["K·ª≥_hi·ªÉn_th·ªã"] + valid_metrics_income]
                            st.download_button(
                                label="T·∫£i xu·ªëng CSV",
                                data=output_income.to_csv(index=False).encode('utf-8'),
                                file_name='selected_income_statement_data.csv',
                                mime='text/csv',
                            )

                except Exception as e:
                    st.error(f"C√≥ l·ªói x·∫£y ra khi t·∫£i b√°o c√°o k·∫øt qu·∫£ kinh doanh: {str(e)}")
            else:
                st.info("Vui l√≤ng t·∫£i l√™n file CSV cho b√°o c√°o k·∫øt qu·∫£ kinh doanh ƒë·ªÉ b·∫Øt ƒë·∫ßu ph√¢n t√≠ch")
          
            # T·∫£i l√™n file CSV cho b√°o c√°o l∆∞u chuy·ªÉn ti·ªÅn t·ªá
            cash_flow_file = st.file_uploader("T·∫£i l√™n file CSV cho b√°o c√°o l∆∞u chuy·ªÉn ti·ªÅn t·ªá", type=["csv"])
            if cash_flow_file is not None:
                try:
                    df_cash_flow = load_data(cash_flow_file, num_periods)
                    st.subheader("D·ªØ li·ªáu b√°o c√°o l∆∞u chuy·ªÉn ti·ªÅn t·ªá")
                    st.dataframe(df_cash_flow)

                    # C√°c nh√≥m ch·ªâ s·ªë b√°o c√°o l∆∞u chuy·ªÉn ti·ªÅn t·ªá
                    cash_flow_metrics = {
                        'Ho·∫°t ƒë·ªông kinh doanh': [
                            'L√£i/L·ªó_r√≤ng_tr∆∞·ªõc_thu·∫ø', 'Kh·∫•u_hao_TSCƒê', 'D·ª±_ph√≤ng_RR_t√≠n_d·ª•ng',
                            'L√£i/L·ªó_ch√™nh_l·ªách_t·ª∑_gi√°_ch∆∞a_th·ª±c_hi·ªán', 'L√£i/L·ªó_t·ª´_thanh_l√Ω_t√†i_s·∫£n_c·ªë_ƒë·ªãnh',
                            'L√£i/L·ªó_t·ª´_ho·∫°t_ƒë·ªông_ƒë·∫ßu_t∆∞', 'Thu_nh·∫≠p_l√£i', 'Thu_l√£i_v√†_c·ªï_t·ª©c',
                            'L∆∞u_chuy·ªÉn_ti·ªÅn_thu·∫ßn_t·ª´_HƒêKD_tr∆∞·ªõc_thay_ƒë·ªïi_VLƒê',
                            'TƒÉng/Gi·∫£m_c√°c_kho·∫£n_ph·∫£i_thu', 'TƒÉng/Gi·∫£m_h√†ng_t·ªìn_kho',
                            'TƒÉng/Gi·∫£m_c√°c_kho·∫£n_ph·∫£i_tr·∫£', 'TƒÉng/Gi·∫£m_chi_ph√≠_tr·∫£_tr∆∞·ªõc',
                            'Chi_ph√≠_l√£i_vay_ƒë√£_tr·∫£', 'Ti·ªÅn_thu_nh·∫≠p_doanh_nghi·ªáp_ƒë√£_tr·∫£',
                            'Ti·ªÅn_thu_kh√°c_t·ª´_c√°c_ho·∫°t_ƒë·ªông_kinh_doanh', 'Ti·ªÅn_chi_kh√°c_t·ª´_c√°c_ho·∫°t_ƒë·ªông_kinh_doanh',
                            'L∆∞u_chuy·ªÉn_ti·ªÅn_t·ªá_r√≤ng_t·ª´_c√°c_ho·∫°t_ƒë·ªông_SXKD'
                        ],
                        'Ho·∫°t ƒë·ªông ƒë·∫ßu t∆∞': [
                            'Mua_s·∫Øm_TSCƒê', 'Ti·ªÅn_thu_ƒë∆∞·ª£c_t·ª´_thanh_l√Ω_t√†i_s·∫£n_c·ªë_ƒë·ªãnh',
                            'Ti·ªÅn_chi_cho_vay_mua_c√¥ng_c·ª•_n·ª£_c·ªßa_ƒë∆°n_v·ªã_kh√°c_ƒë·ªìng',
                            'Ti·ªÅn_thu_h·ªìi_cho_vay_b√°n_l·∫°i_c√°c_c√¥ng_c·ª•_n·ª£_c·ªßa_ƒë∆°n_v·ªã_kh√°c_ƒë·ªìng',
                            'ƒê·∫ßu_t∆∞_v√†o_c√°c_doanh_nghi·ªáp_kh√°c', 'Ti·ªÅn_thu_t·ª´_vi·ªác_b√°n_c√°c_kho·∫£n_ƒë·∫ßu_t∆∞_v√†o_doanh_nghi·ªáp_kh√°c',
                            'Ti·ªÅn_thu_c·ªï_t·ª©c_v√†_l·ª£i_nhu·∫≠n_ƒë∆∞·ª£c_chia',
                            'L∆∞u_chuy·ªÉn_t·ª´_ho·∫°t_ƒë·ªông_ƒë·∫ßu_t∆∞'
                        ],
                        'Ho·∫°t ƒë·ªông t√†i ch√≠nh': [
                            'TƒÉng_v·ªën_c·ªï_ph·∫ßn_t·ª´_g√≥p_v·ªën_v√†_ho·∫∑c_ph√°t_h√†nh_c·ªï_phi·∫øu',
                            'Chi_tr·∫£_cho_vi·ªác_mua_l·∫°i_tr·∫£_c·ªï_phi·∫øu', 'Ti·ªÅn_thu_ƒë∆∞·ª£c_c√°c_kho·∫£n_ƒëi_vay',
                            'Ti·ªÅn_tr·∫£_c√°c_kho·∫£n_ƒëi_vay', 'C·ªï_t·ª©c_ƒë√£_tr·∫£',
                            'L∆∞u_chuy·ªÉn_ti·ªÅn_t·ª´_ho·∫°t_ƒë·ªông_t√†i_ch√≠nh'
                        ],
                        'D√≤ng ti·ªÅn cu·ªëi k·ª≥': [
                            'L∆∞u_chuy·ªÉn_ti·ªÅn_thu·∫ßn_trong_k·ª≥', 'Ti·ªÅn_v√†_t∆∞∆°ng_ƒë∆∞∆°ng_ti·ªÅn',
                            '·∫¢nh_h∆∞·ªüng_c·ªßa_ch√™nh_l·ªách_t·ª∑_gi√°', 'Ti·ªÅn_v√†_t∆∞∆°ng_ƒë∆∞∆°ng_ti·ªÅn_cu·ªëi_k·ª≥'
                        ]
                    }

                    # Ch·ªçn nh√≥m ch·ªâ s·ªë
                    metric_group_cash_flow = st.sidebar.selectbox("Nh√≥m ch·ªâ s·ªë l∆∞u chuy·ªÉn ti·ªÅn t·ªá", list(cash_flow_metrics.keys()))

                    # Hi·ªÉn th·ªã multiselect ch·ªâ s·ªë
                    selected_metrics_cash_flow = st.sidebar.multiselect(
                        "Ch·ªçn ch·ªâ s·ªë",
                        cash_flow_metrics[metric_group_cash_flow],
                        default=cash_flow_metrics[metric_group_cash_flow][:3]
                    )

                    # Lo·∫°i bi·ªÉu ƒë·ªì
                    plot_type_cash_flow = st.sidebar.selectbox("Lo·∫°i bi·ªÉu ƒë·ªì l∆∞u chuy·ªÉn ti·ªÅn t·ªá", ['Line', 'Bar', 'Area'])

                    # V·∫Ω bi·ªÉu ƒë·ªì
                    if selected_metrics_cash_flow:
                        available_cols_cash = df_cash_flow.columns.tolist()
                        valid_metrics_cash = [col for col in selected_metrics_cash_flow if col in available_cols_cash]

                        if valid_metrics_cash:
                            plot_data(
                                df_cash_flow,
                                "K·ª≥_hi·ªÉn_th·ªã",  # ƒê·∫£m b·∫£o file c√≥ c·ªôt n√†y
                                valid_metrics_cash,
                                plot_type_cash_flow,
                                f"Bi·ªÉu ƒë·ªì {plot_type_cash_flow} cho c√°c ch·ªâ s·ªë l∆∞u chuy·ªÉn ti·ªÅn t·ªá ƒë√£ ch·ªçn"
                            )
                        else:
                            st.warning("Kh√¥ng c√≥ ch·ªâ s·ªë h·ª£p l·ªá trong d·ªØ li·ªáu.")

                        # Cho ph√©p t·∫£i xu·ªëng d·ªØ li·ªáu
                        if st.button("Xu·∫•t d·ªØ li·ªáu b√°o c√°o l∆∞u chuy·ªÉn ti·ªÅn t·ªá ƒë√£ ch·ªçn"):
                            output_cash = df_cash_flow[["K·ª≥_hi·ªÉn_th·ªã"] + valid_metrics_cash]
                            st.download_button(
                                label="T·∫£i xu·ªëng CSV",
                                data=output_cash.to_csv(index=False).encode('utf-8'),
                                file_name='selected_cash_flow_data.csv',
                                mime='text/csv',
                            )

                except Exception as e:
                    st.error(f"C√≥ l·ªói x·∫£y ra khi t·∫£i b√°o c√°o l∆∞u chuy·ªÉn ti·ªÅn t·ªá: {str(e)}")
            else:
                st.info("Vui l√≤ng t·∫£i l√™n file CSV cho b√°o c√°o l∆∞u chuy·ªÉn ti·ªÅn t·ªá ƒë·ªÉ b·∫Øt ƒë·∫ßu ph√¢n t√≠ch")
            
            
