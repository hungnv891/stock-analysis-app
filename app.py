# app.py

import streamlit as st
from analyzer import analyze_stock, export_to_excel
import os
from datetime import date

st.set_page_config(page_title="Ph√¢n T√≠ch C·ªï Phi·∫øu", layout="wide")
st.title("üìä Ph√¢n T√≠ch D√≤ng Ti·ªÅn C·ªï Phi·∫øu")

st.markdown("""
Nh·∫≠p m√£ c·ªï phi·∫øu (v√≠ d·ª•: **VNM**, **SSI**, **FPT**) v√† ch·ªçn ng√†y ƒë·ªÉ ph√¢n t√≠ch giao d·ªãch t·ª´ ngu·ªìn TCBS.
""")

symbol = st.text_input("Nh·∫≠p m√£ c·ªï phi·∫øu:", value="VNM").strip().upper()
selected_date = st.date_input("Ch·ªçn ng√†y giao d·ªãch:", value=date.today())

if st.button("Ph√¢n T√≠ch"):
    if symbol:
        with st.spinner("ƒêang t·∫£i v√† ph√¢n t√≠ch d·ªØ li·ªáu..."):
            result = analyze_stock(symbol, selected_date)

        if result is not None:
            summary = result['summary']
            resampled = result['resampled']
            df = result['df']
            chart_paths = result['chart_paths']

            st.success("Ph√¢n t√≠ch ho√†n t·∫•t!")
            
            # Hi·ªÉn th·ªã ph·∫ßn t√≥m t·∫Øt
            st.subheader("üìä T√≥m T·∫Øt Ph√¢n T√≠ch")
            
            # T·∫°o 2 c·ªôt ƒë·ªÉ hi·ªÉn th·ªã d·ªØ li·ªáu c√¢n ƒë·ªëi
            col1, col2 = st.columns(2)
            
            with col1:
                st.metric("T·ªïng d√≤ng ti·ªÅn v√†o (VND)", summary['T·ªïng d√≤ng ti·ªÅn v√†o (VND)'])
                st.metric("T·ªïng d√≤ng ti·ªÅn ra (VND)", summary['T·ªïng d√≤ng ti·ªÅn ra (VND)'])
                st.metric("D√≤ng ti·ªÅn r√≤ng (VND)", summary['D√≤ng ti·ªÅn r√≤ng (VND)'])
                st.metric("T·ªïng s·ªë l·ªánh mua", summary['T·ªïng s·ªë l·ªánh mua'])
                st.metric("T·ªïng s·ªë l·ªánh b√°n", summary['T·ªïng s·ªë l·ªánh b√°n'])
                st.metric("T·ª∑ l·ªá mua/b√°n", f"{summary['T·ª∑ l·ªá kh·ªëi l∆∞·ª£ng trung b√¨nh mua/b√°n']:,.2f}")
                
            with col2:
                st.metric("T·ªïng kh·ªëi l∆∞·ª£ng", f"{summary['T·ªïng kh·ªëi l∆∞·ª£ng giao d·ªãch']:,.0f}")
                st.metric("Kh·ªëi l∆∞·ª£ng TB l·ªánh mua", f"{summary['Kh·ªëi l∆∞·ª£ng trung b√¨nh l·ªánh mua']:,.2f}")
                st.metric("Kh·ªëi l∆∞·ª£ng TB l·ªánh b√°n", f"{summary['Kh·ªëi l∆∞·ª£ng trung b√¨nh l·ªánh b√°n']:,.2f}")                
                st.metric("Gi√° cao nh·∫•t", f"{summary['Gi√° cao nh·∫•t']:,.2f}")
                st.metric("Gi√° th·∫•p nh·∫•t", f"{summary['Gi√° th·∫•p nh·∫•t']:,.2f}")

            if chart_paths:
                st.subheader("üìà Bi·ªÉu ƒë·ªì ph√¢n t√≠ch:")
                for path in chart_paths:
                    if os.path.exists(path):
                        st.image(path, use_container_width=True)
                    else:
                        st.warning(f"Kh√¥ng t√¨m th·∫•y bi·ªÉu ƒë·ªì: {path}")

            excel_path = export_to_excel(resampled, df, symbol, selected_date)
            if excel_path and os.path.exists(excel_path):
                st.subheader("üì• T·∫£i xu·ªëng d·ªØ li·ªáu:")
                with open(excel_path, "rb") as f:
                    st.download_button(
                        label="üìä T·∫£i Excel k·∫øt qu·∫£",
                        data=f,
                        file_name=os.path.basename(excel_path),
                        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                    )
            else:
                st.warning("Kh√¥ng th·ªÉ t·∫°o file Excel.")
        else:
            st.error("Kh√¥ng th·ªÉ ph√¢n t√≠ch m√£ c·ªï phi·∫øu n√†y. H√£y th·ª≠ l·∫°i v·ªõi m√£ kh√°c.")
    else:
        st.warning("Vui l√≤ng nh·∫≠p m√£ c·ªï phi·∫øu.")
