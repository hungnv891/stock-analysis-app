import streamlit as st
from analyzer import analyze_stock, export_to_excel
import os
import pandas as pd
from datetime import date
from vnstock import Vnstock
import plotly.graph_objects as go
import plotly.express as px
import matplotlib.pyplot as plt
import seaborn as sns
from concurrent.futures import ThreadPoolExecutor


st.set_page_config(page_title='Ph√¢n T√≠ch C·ªï Phi·∫øu', layout='wide')
tab2, tab3, tab4, tab5, tab6, tab7 = st.tabs([
    'üè≠ D√≤ng Ti·ªÅn Theo Nh√≥m Ng√†nh',
    'üìù Nh·∫≠p M√£ T√πy Ch·ªçn',
    'üìä Ph√¢n T√≠ch C∆° B·∫£n',
    'üìâ Bi·ªÉu ƒê·ªì Gi√°',
    'üìà C·∫≠p nh·∫≠t Gi√° C·ªï Phi·∫øu Realtime',
    'üíß Ph√¢n T√≠ch D√≤ng Ti·ªÅn Theo Ph√∫t'
])


# ==== TAB 2 ====
with tab2:
    st.title('üè≠ Theo D√µi D√≤ng Ti·ªÅn Theo Nh√≥m Ng√†nh')

    sector_map = {
        'Ng√¢n h√†ng': ['VCB', 'CTG', 'BID', 'TCB', 'MBB', 'ACB', 'HDB', 'LPB', 'SHB', 'STB'],
        'Ch·ª©ng kho√°n': ['SSI', 'VND', 'HCM', 'VCI', 'FTS', 'CTS', 'MBS', 'SHS', 'BSI', 'VIX'],
        'Th√©p': ['HPG', 'HSG', 'NKG', 'TLH'],
        'B·∫•t ƒë·ªông s·∫£n': ['VIC', 'VHM', 'NLG', 'KDH', 'DXG', 'HDG', 'LDG', 'HDC', 'NVL', 'LHG'],
        'C√¥ng ngh·ªá': ['FPT', 'CMG', 'CTR', 'VGI'],
        'B√°n l·∫ª': ['MSN', 'MWG', 'DGW', 'PNJ', 'FRT'],
        'ƒêi·ªán n∆∞·ªõc': ['BWE', 'NT2', 'POW', 'PC1', 'DQC'],
        'D·∫ßu kh√≠': ['PVS', 'PVD', 'GAS', 'PLX', 'BSR'],
        'X√¢y d·ª±ng': ['CTD', 'HBC', 'CII', 'VCG', 'FCN'],
        'ƒê·∫ßu t∆∞ c√¥ng': ['HHV', 'LCG', 'HTI', 'DPG', 'EVG'],
        'Th·ª±c ph·∫©m': ['DBC', 'QNS', 'NAF', 'SBT', 'MCH', 'VNM', 'SAB'],
        'B·∫£o hi·ªÉm': ['BVH', 'BMI', 'MIG', 'BIC', 'PVI'],
        'Th·ªßy s·∫£n': ['VHC', 'ANV', 'FMC', 'ASM'],
        'D·ªát may': ['MSH', 'TCM', 'TNG', 'VGT', 'STK'],
        'Cao su': ['GVR', 'DPR', 'HRC', 'PHR'],
        'D∆∞·ª£c ph·∫©m': ['DCL', 'DHG', 'IMP', 'TRA', 'DVN'],
        'V·∫≠n t·∫£i': ['PVT', 'HAH', 'GMD', 'VNS', 'VSC'],
        'Nh·ª±a': ['AAA', 'BMP', 'NTP', 'DNP'],
        'Khu CN': ['KBC', 'SZC', 'TIP', 'BCM', 'VGC', 'IDC'],
        'Ph√¢n b√≥n': ['DGC', 'DPM', 'DCM', 'BFC', 'LAS']
    }

    selected_date = st.date_input('Ch·ªçn ng√†y giao d·ªãch:', value=date.today(), key='date_sector')
    selected_sector = st.selectbox('Ch·ªçn nh√≥m ng√†nh:', options=list(sector_map.keys()))
    analyze_button = st.button('üîç Ph√¢n T√≠ch Nh√≥m Ng√†nh', key='analyze_sector')

    def process_symbol(symbol, selected_date):
        try:
            # Kh·ªüi t·∫°o ƒë·ªëi t∆∞·ª£ng l·∫•y d·ªØ li·ªáu intraday
            stock = Vnstock().stock(symbol=symbol, source='VCI')
            df_intraday = stock.quote.intraday(symbol=symbol, page_size=10000)

            if df_intraday is None or df_intraday.empty:
                st.warning(f"Kh√¥ng c√≥ d·ªØ li·ªáu intraday cho m√£ {symbol}.")
                return None

            # Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu v·ªÅ d·∫°ng th·ªùi gian
            df_intraday['time'] = pd.to_datetime(df_intraday['time'])
            df_intraday.set_index('time', inplace=True)

            # G·ªôp theo t·ª´ng ph√∫t
            df_intraday['minute'] = df_intraday.index.floor('T')  # 'T' l√† vi·∫øt t·∫Øt cho 'minutely'

            # T√≠nh volume mua & b√°n
            df_intraday['volume_buy'] = df_intraday.apply(lambda x: x['volume'] if x['match_type'] == 'Buy' else 0, axis=1)
            df_intraday['volume_sell'] = df_intraday.apply(lambda x: x['volume'] if x['match_type'] == 'Sell' else 0, axis=1)

            # Nh√≥m theo t·ª´ng ph√∫t
            df_min = df_intraday.groupby('minute').agg(
                volume_buy=('volume_buy', 'sum'),
                volume_sell=('volume_sell', 'sum'),
                avg_price=('price', 'mean')
            ).reset_index()

            # T√≠nh d√≤ng ti·ªÅn (Value = Gi√° * Volume)
            df_min['value_buy'] = df_min['volume_buy'] * df_min['avg_price'] * 1000
            df_min['value_sell'] = df_min['volume_sell'] * df_min['avg_price'] * 1000
            df_min['net'] = df_min['volume_buy'] - df_min['volume_sell']
            df_min['net_value'] = df_min['value_buy'] - df_min['value_sell']

            # T√≠nh kh·ªëi l∆∞·ª£ng mua/b√°n l≈©y k·∫ø
            df_min['cumulative_value_buy'] = df_min['value_buy'].cumsum()
            df_min['cumulative_value_sell'] = df_min['value_sell'].cumsum()
            df_min['cumulative_value_net'] = df_min['net_value'].cumsum()

            # T√≠nh d√≤ng ti·ªÅn l≈©y k·∫ø
            df_min['cumulative_net'] = df_min['cumulative_value_buy'] - df_min['cumulative_value_sell']

            # L·∫•y c√°c d√≤ng ti·ªÅn l≈©y k·∫ø cu·ªëi c√πng
            cumulative_buy = df_min['cumulative_value_buy'].iloc[-1] if not df_min.empty else 0
            cumulative_sell = df_min['cumulative_value_sell'].iloc[-1] if not df_min.empty else 0
            cumulative_net = df_min['cumulative_net'].iloc[-1] if not df_min.empty else 0

            return {
                "symbol": symbol,
                "cumulative_value_buy": cumulative_buy,
                "cumulative_value_sell": cumulative_sell,
                "cumulative_value_net": cumulative_net
            }
        except Exception:
            return None

    if analyze_button and selected_sector:
        symbols = sector_map[selected_sector]
        st.info(f"ƒêang ph√¢n t√≠ch {len(symbols)} m√£ trong nh√≥m '{selected_sector}'...")

        with st.spinner("ƒêang x·ª≠ l√Ω..."):
            with ThreadPoolExecutor(max_workers=6) as executor:
                futures = [executor.submit(process_symbol, sym, selected_date) for sym in symbols]
                results = [f.result() for f in futures if f.result() is not None]

        if results:
            df_sector = pd.DataFrame(results)
            # T·∫°o b·∫£n hi·ªÉn th·ªã ƒë√£ ƒë·ªãnh d·∫°ng s·ªë ki·ªÉu 1.000.000
            df_display = df_sector.copy()
            for col in ['cumulative_value_buy', 'cumulative_value_sell', 'cumulative_value_net']:
                df_display[col] = df_display[col].map(lambda x: f"{x:,.0f}".replace(",", "."))

            # Hi·ªÉn th·ªã b·∫£ng ƒë·ªãnh d·∫°ng
            st.subheader("üìã B·∫£ng D√≤ng Ti·ªÅn Mua/B√°n/R√≤ng L≈©y K·∫ø (VND)")
            st.dataframe(df_display, use_container_width=True)

            import altair as alt         
            
            st.subheader(f'üìä Bi·ªÉu ƒê·ªì D√≤ng Ti·ªÅn l≈©y k·∫ø Nh√≥m: {selected_sector}')

            # D·ªØ li·ªáu d·∫°ng long cho bi·ªÉu ƒë·ªì c·ªôt
            df_melted = df_sector.melt(id_vars="symbol", value_vars=["cumulative_value_buy", "cumulative_value_sell"], var_name="type", value_name="value")

            bars = alt.Chart(df_melted).mark_bar().encode(
                x=alt.X('symbol:N', title='M√£ c·ªï phi·∫øu'),
                xOffset='type:N',
                y=alt.Y('value:Q', title='VND'),
                color=alt.Color('type:N', scale=alt.Scale(domain=['cumulative_value_buy', 'cumulative_value_sell'], range=['#2E86AB', '#E74C3C'])),
                tooltip=['symbol', 'type', alt.Tooltip('value:Q', format=',')]
            ).properties(
                width=700,
                height=400
            )

            line = alt.Chart(df_sector).mark_line(color='purple', strokeWidth=3).encode(
                x=alt.X('symbol:N', title='M√£ c·ªï phi·∫øu'),
                y=alt.Y('cumulative_value_net:Q', title='VND'),
                tooltip=['symbol', alt.Tooltip('cumulative_value_net:Q', format=',')]
            )

            chart = (bars + line).properties(
                width=700,
                height=400
            ).resolve_scale(
                y='shared'
            )

            st.altair_chart(chart, use_container_width=True)
        else:
            st.warning("Kh√¥ng th·ªÉ ph√¢n t√≠ch d√≤ng ti·ªÅn nh√≥m ng√†nh n√†y.")



# ==== TAB 3 ====
with tab3:
    # Define the function for processing stock data
    def process_symbol(symbol, selected_date):
        try:
            # Kh·ªüi t·∫°o ƒë·ªëi t∆∞·ª£ng l·∫•y d·ªØ li·ªáu intraday
            stock = Vnstock().stock(symbol=symbol, source='VCI')
            df_intraday = stock.quote.intraday(symbol=symbol, page_size=10000)

            if df_intraday is None or df_intraday.empty:
                st.warning(f"Kh√¥ng c√≥ d·ªØ li·ªáu intraday cho m√£ {symbol}.")
                return None

            # Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu v·ªÅ d·∫°ng th·ªùi gian
            df_intraday['time'] = pd.to_datetime(df_intraday['time'])
            df_intraday.set_index('time', inplace=True)

            # G·ªôp theo t·ª´ng ph√∫t
            df_intraday['minute'] = df_intraday.index.floor('T')

            # T√≠nh volume mua & b√°n
            df_intraday['volume_buy'] = df_intraday.apply(lambda x: x['volume'] if x['match_type'] == 'Buy' else 0, axis=1)
            df_intraday['volume_sell'] = df_intraday.apply(lambda x: x['volume'] if x['match_type'] == 'Sell' else 0, axis=1)

            # Nh√≥m theo t·ª´ng ph√∫t
            df_min = df_intraday.groupby('minute').agg(
                volume_buy=('volume_buy', 'sum'),
                volume_sell=('volume_sell', 'sum'),
                avg_price=('price', 'mean')
            ).reset_index()

            # T√≠nh d√≤ng ti·ªÅn (Value = Gi√° * Volume)
            df_min['value_buy'] = df_min['volume_buy'] * df_min['avg_price'] * 1000
            df_min['value_sell'] = df_min['volume_sell'] * df_min['avg_price'] * 1000
            df_min['net'] = df_min['volume_buy'] - df_min['volume_sell']
            df_min['net_value'] = df_min['value_buy'] - df_min['value_sell']

            # T√≠nh kh·ªëi l∆∞·ª£ng mua/b√°n l≈©y k·∫ø
            df_min['cumulative_value_buy'] = df_min['value_buy'].cumsum()
            df_min['cumulative_value_sell'] = df_min['value_sell'].cumsum()
            df_min['cumulative_value_net'] = df_min['net_value'].cumsum()

            # T√≠nh d√≤ng ti·ªÅn l≈©y k·∫ø
            df_min['cumulative_net'] = df_min['cumulative_value_buy'] - df_min['cumulative_value_sell']

            # L·∫•y c√°c d√≤ng ti·ªÅn l≈©y k·∫ø cu·ªëi c√πng
            cumulative_buy = df_min['cumulative_value_buy'].iloc[-1] if not df_min.empty else 0
            cumulative_sell = df_min['cumulative_value_sell'].iloc[-1] if not df_min.empty else 0
            cumulative_net = df_min['cumulative_net'].iloc[-1] if not df_min.empty else 0

            return {
                "symbol": symbol,
                "cumulative_value_buy": cumulative_buy,
                "cumulative_value_sell": cumulative_sell,
                "cumulative_value_net": cumulative_net
            }
        except Exception:
            return None

    # Main Streamlit code
    st.title('üìä Ph√¢n T√≠ch D√≤ng Ti·ªÅn C·ªï Phi·∫øu')

    # Option 1: Upload CSV file with stock symbols
    uploaded_file = st.file_uploader("T·∫£i l√™n file CSV ch·ª©a m√£ c·ªï phi·∫øu", type="csv")

    # Option 2: Manual input of stock symbols
    manual_input = st.text_input("Nh·∫≠p m√£ c·ªï phi·∫øu (c√°ch nhau b·∫±ng d·∫•u ph·∫©y):", "")

    # Option 3: Select sector (optional)
    sector_map = {
        'Ng√¢n h√†ng': ['VCB', 'CTG', 'BID', 'TCB', 'MBB', 'ACB', 'HDB', 'LPB', 'SHB', 'STB'],
        'Ch·ª©ng kho√°n': ['SSI', 'VND', 'HCM', 'VCI', 'FTS', 'CTS', 'MBS', 'SHS', 'BSI', 'VIX'],
        'Ng√¢n h√†ng': ['VCB', 'CTG', 'BID', 'TCB', 'MBB', 'ACB', 'HDB', 'LPB', 'SHB', 'STB'],
        'Ch·ª©ng kho√°n': ['SSI', 'VND', 'HCM', 'VCI', 'FTS', 'CTS', 'MBS', 'SHS', 'BSI', 'VIX'],
        'Th√©p': ['HPG', 'HSG', 'NKG', 'TLH'],
        'B·∫•t ƒë·ªông s·∫£n': ['VIC', 'VHM', 'NLG', 'KDH', 'DXG', 'HDG', 'LDG', 'HDC', 'NVL', 'LHG'],
        'C√¥ng ngh·ªá': ['FPT', 'CMG', 'CTR', 'VGI'],
        'B√°n l·∫ª': ['MSN', 'MWG', 'DGW', 'PNJ', 'FRT'],
        'ƒêi·ªán n∆∞·ªõc': ['BWE', 'NT2', 'POW', 'PC1', 'DQC'],
        'D·∫ßu kh√≠': ['PVS', 'PVD', 'GAS', 'PLX', 'BSR'],
        'X√¢y d·ª±ng': ['CTD', 'HBC', 'CII', 'VCG', 'FCN'],
        'ƒê·∫ßu t∆∞ c√¥ng': ['HHV', 'LCG', 'HTI', 'DPG', 'EVG'],
        'Th·ª±c ph·∫©m': ['DBC', 'QNS', 'NAF', 'SBT', 'MCH', 'VNM', 'SAB'],
        'B·∫£o hi·ªÉm': ['BVH', 'BMI', 'MIG', 'BIC', 'PVI'],
        'Th·ªßy s·∫£n': ['VHC', 'ANV', 'FMC', 'ASM'],
        'D·ªát may': ['MSH', 'TCM', 'TNG', 'VGT', 'STK'],
        'Cao su': ['GVR', 'DPR', 'HRC', 'PHR'],
        'D∆∞·ª£c ph·∫©m': ['DCL', 'DHG', 'IMP', 'TRA', 'DVN'],
        'V·∫≠n t·∫£i': ['PVT', 'HAH', 'GMD', 'VNS', 'VSC'],
        'Nh·ª±a': ['AAA', 'BMP', 'NTP', 'DNP'],
        'Khu CN': ['KBC', 'SZC', 'TIP', 'BCM', 'VGC', 'IDC'],
        'Ph√¢n b√≥n': ['DGC', 'DPM', 'DCM', 'BFC', 'LAS']
        # Add other sectors as required...
    }

    selected_sector = st.selectbox('Ch·ªçn nh√≥m ng√†nh:', options=list(sector_map.keys()), index=0, key="sector_select")

    # Select a date for analysis
    selected_date = st.date_input('Ch·ªçn ng√†y giao d·ªãch:', value=date.today(), key='date')

    # Define button to trigger analysis
    analyze_button = st.button('üîç Ph√¢n T√≠ch D√≤ng Ti·ªÅn')

    # Process the symbols based on the input
    if analyze_button:
        st.info(f"ƒêang ph√¢n t√≠ch c√°c m√£ c·ªï phi·∫øu...")

        if uploaded_file is not None:
            # Read CSV file and extract stock symbols
            df_csv = pd.read_csv(uploaded_file)
            symbols = df_csv['symbol'].dropna().tolist()  # Assuming the CSV has a column 'symbol'
        elif manual_input:
            # Process manual input
            symbols = [sym.strip() for sym in manual_input.split(',')]
        elif selected_sector:
            # Default to selected sector symbols if no CSV or manual input
            symbols = sector_map.get(selected_sector, [])
        else:
            st.warning("Vui l√≤ng nh·∫≠p m√£ c·ªï phi·∫øu ho·∫∑c ch·ªçn nh√≥m ng√†nh.")
            symbols = []

        if symbols:
            with st.spinner("ƒêang x·ª≠ l√Ω..."):
                with ThreadPoolExecutor(max_workers=6) as executor:
                    futures = [executor.submit(process_symbol, sym, selected_date) for sym in symbols]
                    results = [f.result() for f in futures if f.result() is not None]

            if results:
                df_symbols = pd.DataFrame(results)

                # Format the numbers to display as "1.000.000" instead of "1000000"
                df_display = df_symbols.copy()
                for col in ['cumulative_value_buy', 'cumulative_value_sell', 'cumulative_value_net']:
                    df_display[col] = df_display[col].map(lambda x: f"{x:,.0f}".replace(",", "."))

                # Display the formatted table
                st.subheader("üìã B·∫£ng D√≤ng Ti·ªÅn Mua/B√°n/R√≤ng L≈©y K·∫ø (VND)")
                st.dataframe(df_display, use_container_width=True)

                # Split the screen into two columns
                col1, col2 = st.columns(2)

                with col1:
                    # Top 10 stocks with the highest net cash flow
                    top_10_net_positive = df_symbols.nlargest(10, 'cumulative_value_net')
                    st.subheader("üîù Top 10 C·ªï Phi·∫øu C√≥ D√≤ng Ti·ªÅn R√≤ng L·ªõn Nh·∫•t")
                    top_10_net_positive_display = top_10_net_positive[['symbol', 'cumulative_value_net']]
                    top_10_net_positive_display['cumulative_value_net'] = top_10_net_positive_display['cumulative_value_net'].map(lambda x: f"{x:,.0f}".replace(",", "."))
                    st.dataframe(top_10_net_positive_display, use_container_width=True)

                with col2:
                    # Top 10 stocks with the lowest net cash flow
                    top_10_net_negative = df_symbols.nsmallest(10, 'cumulative_value_net')
                    st.subheader("üîª Top 10 C·ªï Phi·∫øu C√≥ D√≤ng Ti·ªÅn R√≤ng Th·∫•p Nh·∫•t")
                    top_10_net_negative_display = top_10_net_negative[['symbol', 'cumulative_value_net']]
                    top_10_net_negative_display['cumulative_value_net'] = top_10_net_negative_display['cumulative_value_net'].map(lambda x: f"{x:,.0f}".replace(",", "."))
                    st.dataframe(top_10_net_negative_display, use_container_width=True)

            else:
                st.warning("Kh√¥ng th·ªÉ ph√¢n t√≠ch d√≤ng ti·ªÅn c√°c m√£ c·ªï phi·∫øu n√†y.")
        else:
            st.warning("Kh√¥ng c√≥ m√£ c·ªï phi·∫øu n√†o ƒë·ªÉ ph√¢n t√≠ch.")

                
# ==== TAB 4 ====

with tab4:
    st.title("üìä Ph√¢n T√≠ch Ch·ªâ S·ªë T√†i Ch√≠nh C∆° B·∫£n")

    st.markdown("""
    Nh·∫≠p m√£ c·ªï phi·∫øu ƒë·ªÉ xem c√°c ch·ªâ s·ªë t√†i ch√≠nh nh∆∞ ROE, ROA, EPS, N·ª£/V·ªën ch·ªß s·ªü h·ªØu, v.v.  
    Ngu·ªìn d·ªØ li·ªáu: VCI (vnstock)
    """)

    symbol = st.text_input("Nh·∫≠p m√£ c·ªï phi·∫øu:", value="VNM", key="symbol_tab4").strip().upper()
    period = st.selectbox("Ch·ªçn chu k·ª≥:", ["year", "quarter"], index=0)
    lang = st.radio("Ng√¥n ng·ªØ hi·ªÉn th·ªã:", ["vi", "en"], horizontal=True)

    if st.button("üîç L·∫•y d·ªØ li·ªáu", key="analyze_tab4"):
        try:
            from vnstock import Vnstock
            stock = Vnstock().stock(symbol=symbol, source='VCI')
            
            
            # 1. Hi·ªÉn th·ªã b·∫£ng ch·ªâ s·ªë t√†i ch√≠nh
            st.subheader("üìà Ch·ªâ s·ªë t√†i ch√≠nh")
            df_ratio = stock.finance.ratio(period=period, lang=lang, dropna=True)
            if df_ratio is not None and not df_ratio.empty:
                st.success("D·ªØ li·ªáu ch·ªâ s·ªë t√†i ch√≠nh ƒë√£ ƒë∆∞·ª£c l·∫•y th√†nh c√¥ng!")
                st.dataframe(df_ratio, use_container_width=True)
            else:
                st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu ch·ªâ s·ªë t√†i ch√≠nh cho m√£ n√†y.")
                    
                # 2. B·∫£ng c√¢n ƒë·ªëi k·∫ø to√°n
            st.subheader("üí∞ B·∫£ng c√¢n ƒë·ªëi k·∫ø to√°n")
            df_balance = stock.finance.balance_sheet(period=period, lang=lang, dropna=True)
            if df_balance is not None and not df_balance.empty:
                st.dataframe(df_balance, use_container_width=True)
            else:
                st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu b·∫£ng c√¢n ƒë·ªëi k·∫ø to√°n.")
            
            # 3. B√°o c√°o k·∫øt qu·∫£ kinh doanh
            st.subheader("üìä B√°o c√°o k·∫øt qu·∫£ kinh doanh")
            df_income = stock.finance.income_statement(period=period, lang=lang, dropna=True)
            if df_income is not None and not df_income.empty:
                st.dataframe(df_income, use_container_width=True)
            else:
                st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu b√°o c√°o k·∫øt qu·∫£ kinh doanh.")
            
            # 4. B√°o c√°o l∆∞u chuy·ªÉn ti·ªÅn t·ªá
            st.subheader("üíµ B√°o c√°o l∆∞u chuy·ªÉn ti·ªÅn t·ªá")
            df_cashflow = stock.finance.cash_flow(period=period, lang=lang, dropna=True)
            if df_cashflow is not None and not df_cashflow.empty:
                st.dataframe(df_cashflow, use_container_width=True)
            else:
                st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu b√°o c√°o l∆∞u chuy·ªÉn ti·ªÅn t·ªá.")
            
        except Exception as e:
            st.error(f"ƒê√£ x·∫£y ra l·ªói khi l·∫•y d·ªØ li·ªáu: {e}")
            
            
          
# ==== TAB 5 ====            
with tab5:
    st.title("üìâ Bi·ªÉu ƒê·ªì N·∫øn Nh·∫≠t ‚Äì Gi√° C·ªï Phi·∫øu")

    st.markdown("Ch·ªçn m√£ c·ªï phi·∫øu, kho·∫£ng th·ªùi gian v√† khung th·ªùi gian ƒë·ªÉ xem bi·ªÉu ƒë·ªì gi√°.")

    symbol = st.text_input("Nh·∫≠p m√£ c·ªï phi·∫øu:", value="VNM", key="symbol_tab5").strip().upper()
    start_date = st.date_input("Ng√†y b·∫Øt ƒë·∫ßu", value=date(2025, 1, 1))
    end_date = st.date_input("Ng√†y k·∫øt th√∫c", value=date.today())

    timeframe = st.selectbox("Khung th·ªùi gian:", options=["D", "W", "M"], index=0, 
                             format_func=lambda x: {"D": "Ng√†y", "W": "Tu·∫ßn", "M": "Th√°ng"}[x])

    # T√πy ch·ªçn hi·ªÉn th·ªã c√°c ƒë∆∞·ªùng MA
    show_ma5 = st.checkbox("Hi·ªÉn th·ªã MA 5", value=True)
    show_ma20 = st.checkbox("Hi·ªÉn th·ªã MA 20", value=True)
    show_ma50 = st.checkbox("Hi·ªÉn th·ªã MA 50", value=True)

    if st.button("üìä Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì", key="btn_tab5"):
        try:
            from vnstock import Vnstock
            import plotly.graph_objects as go

            stock = Vnstock().stock(symbol=symbol, source='VCI')
            df_candle = stock.quote.history(start=str(start_date), end=str(end_date))

            if df_candle is None or df_candle.empty or 'time' not in df_candle.columns:
                st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu cho m√£ c·ªï phi·∫øu v√† kho·∫£ng th·ªùi gian ƒë√£ ch·ªçn.")
            else:
                df_candle['time'] = pd.to_datetime(df_candle['time'])
                df_candle.set_index('time', inplace=True)

                if timeframe in ['W', 'M']:
                    df_candle = df_candle.resample(timeframe).agg({
                        'open': 'first',
                        'high': 'max',
                        'low': 'min',
                        'close': 'last',
                        'volume': 'sum'
                    }).dropna()

                df_candle.reset_index(inplace=True)
                
                # Chuy·ªÉn ƒë·ªïi th·ªùi gian sang ƒë·ªãnh d·∫°ng ng√†y ng·∫Øn g·ªçn
                df_candle['time'] = pd.to_datetime(df_candle['time']).dt.strftime('%d-%m')

                # T√≠nh c√°c ƒë∆∞·ªùng MA
                df_candle['MA5'] = df_candle['close'].rolling(window=5).mean()
                df_candle['MA20'] = df_candle['close'].rolling(window=20).mean()
                df_candle['MA50'] = df_candle['close'].rolling(window=50).mean()

                fig = go.Figure(data=[go.Candlestick(
                    x=df_candle['time'],
                    open=df_candle['open'],
                    high=df_candle['high'],
                    low=df_candle['low'],
                    close=df_candle['close'],
                    increasing_line_color='green',
                    decreasing_line_color='red',
                    name='N·∫øn Nh·∫≠t'
                )])

                # Th√™m c√°c ƒë∆∞·ªùng MA n·∫øu ng∆∞·ªùi d√πng ch·ªçn hi·ªÉn th·ªã
                if show_ma5:
                    fig.add_trace(go.Scatter(
                        x=df_candle['time'],
                        y=df_candle['MA5'],
                        mode='lines',
                        name='MA 5',
                        line=dict(color='blue', width=2)
                    ))

                if show_ma20:
                    fig.add_trace(go.Scatter(
                        x=df_candle['time'],
                        y=df_candle['MA20'],
                        mode='lines',
                        name='MA 20',
                        line=dict(color='orange', width=2)
                    ))

                if show_ma50:
                    fig.add_trace(go.Scatter(
                        x=df_candle['time'],
                        y=df_candle['MA50'],
                        mode='lines',
                        name='MA 50',
                        line=dict(color='purple', width=2)
                    ))

                fig.update_layout(
                    title=f'Bi·ªÉu ƒë·ªì N·∫øn Nh·∫≠t: {symbol} ({ {"D":"Ng√†y","W":"Tu·∫ßn","M":"Th√°ng"}[timeframe] })',
                    xaxis_title='Ng√†y',
                    yaxis_title='Gi√°',
                    xaxis_rangeslider_visible=False,
                    height=500,
                    margin=dict(l=0, r=0, t=40, b=0),  # Lo·∫°i b·ªè c√°c kho·∫£ng tr·ªëng
                    xaxis=dict(
                        showgrid=False,
                        zeroline=False,
                        type='category',  # Lo·∫°i b·ªè c√°c ng√†y kh√¥ng c√≥ giao d·ªãch
                        tickmode='array',
                        tickvals=df_candle['time'],  # Hi·ªÉn th·ªã c√°c gi√° tr·ªã c√≥ d·ªØ li·ªáu
                        tickangle=45  # G√≥c quay c√°c nh√£n ƒë·ªÉ tr√°nh ch·ªìng ch√©o
                    ),
                    yaxis=dict(
                        showgrid=False,
                        zeroline=False
                    )
                )

                st.plotly_chart(fig, use_container_width=True)
                
                # Bi·ªÉu ƒë·ªì kh·ªëi l∆∞·ª£ng
                fig_volume = go.Figure()
                fig_volume.add_trace(go.Bar(
                    x=df_candle['time'],
                    y=df_candle['volume'],
                    marker_color='orange',
                    name='Kh·ªëi l∆∞·ª£ng'
                ))

                fig_volume.update_layout(
                    title='üìä Kh·ªëi L∆∞·ª£ng Giao D·ªãch',
                    xaxis_title='Ng√†y',
                    yaxis_title='Kh·ªëi l∆∞·ª£ng',
                    height=300,
                    margin=dict(l=0, r=0, t=40, b=0),  # Lo·∫°i b·ªè c√°c kho·∫£ng tr·ªëng
                    xaxis=dict(
                        showgrid=False,
                        zeroline=False,
                        type='category',  # Lo·∫°i b·ªè c√°c ng√†y kh√¥ng c√≥ giao d·ªãch
                        tickmode='array',
                        tickvals=df_candle['time'],  # Hi·ªÉn th·ªã c√°c gi√° tr·ªã c√≥ d·ªØ li·ªáu
                        tickangle=45  # G√≥c quay c√°c nh√£n ƒë·ªÉ tr√°nh ch·ªìng ch√©o
                    ),
                    yaxis=dict(
                        showgrid=False,
                        zeroline=False
                    )
                )

                # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì kh·ªëi l∆∞·ª£ng
                st.plotly_chart(fig_volume, use_container_width=True)

                st.download_button(
                    label="üì• T·∫£i d·ªØ li·ªáu gi√° l·ªãch s·ª≠ (.CSV)",
                    data=df_candle.to_csv(index=False).encode("utf-8"),
                    file_name=f"{symbol}_gia_lich_su_{timeframe}.csv",
                    mime="text/csv"
                )

        except Exception as e:
            st.error(f"ƒê√£ x·∫£y ra l·ªói: {e}")

# ==== TAB 6 ====  
with tab6:
    st.title("üìà C·∫≠p nh·∫≠t Gi√° C·ªï Phi·∫øu Realtime")
    
    st.markdown("Nh·∫≠p m√£ c·ªï phi·∫øu ƒë·ªÉ xem d·ªØ li·ªáu giao d·ªãch realtime theo 5 ph√∫t.")
    
    symbol = st.text_input("Nh·∫≠p m√£ c·ªï phi·∫øu:", value="VNM", key="symbol_tab6").strip().upper()
    
    # T√πy ch·ªçn s·ªë l∆∞·ª£ng d·ªØ li·ªáu tr·∫£ v·ªÅ
    page_size = st.number_input("Ch·ªçn s·ªë l∆∞·ª£ng b·∫£n ghi:", min_value=1, max_value=50000, value=10000)
    
    # L·∫•y v√† hi·ªÉn th·ªã th√¥ng tin realtime khi nh·∫•n n√∫t
    if st.button("üìä Hi·ªÉn th·ªã gi√° c·ªï phi·∫øu realtime", key="btn_tab6"):
        try:
            # Kh·ªüi t·∫°o ƒë·ªëi t∆∞·ª£ng stock
            stock = Vnstock().stock(symbol=symbol, source='VCI')

            # L·∫•y d·ªØ li·ªáu giao d·ªãch intraday (th·ªùi gian th·ª±c)
            df_realtime = stock.quote.intraday(symbol=symbol, page_size=page_size)

            if df_realtime is None or df_realtime.empty:
                st.warning(f"Kh√¥ng c√≥ d·ªØ li·ªáu giao d·ªãch realtime cho m√£ c·ªï phi·∫øu {symbol}.")
            else:
                # Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu th·ªùi gian v·ªÅ ƒë√∫ng ƒë·ªãnh d·∫°ng
                df_realtime['time'] = pd.to_datetime(df_realtime['time'])
                
                # Thi·∫øt l·∫≠p th·ªùi gian 5 ph√∫t
                df_realtime.set_index('time', inplace=True)
                df_realtime['5_min_interval'] = df_realtime.index.floor('5T')  # Chuy·ªÉn c√°c th·ªùi gian v·ªÅ khung 5 ph√∫t
                
                # T√≠nh to√°n volume buy v√† volume sell d·ª±a tr√™n match_type
                df_realtime['volume_buy'] = df_realtime.apply(lambda row: row['volume'] if row['match_type'] == 'Buy' else 0, axis=1)
                df_realtime['volume_sell'] = df_realtime.apply(lambda row: row['volume'] if row['match_type'] == 'Sell' else 0, axis=1)
                
                # Nh√≥m theo khung th·ªùi gian 5 ph√∫t v√† t√≠nh to√°n c√°c gi√° tr·ªã c·∫ßn thi·∫øt
                df_grouped = df_realtime.groupby('5_min_interval').agg(
                    volume_buy=('volume_buy', 'sum'),  # T·ªïng volume c·ªßa c√°c giao d·ªãch mua
                    volume_sell=('volume_sell', 'sum'),  # T·ªïng volume c·ªßa c√°c giao d·ªãch b√°n
                    avg_price=('price', 'mean')  # T√≠nh gi√° trung b√¨nh (mean)
                ).reset_index()

                # T√≠nh to√°n net (volume_buy - volume_sell)
                df_grouped['net'] = df_grouped['volume_buy'] - df_grouped['volume_sell']
                
                
                # T√≠nh t·ªïng c√°c gi√° tr·ªã
                total_volume_buy = df_grouped['volume_buy'].sum()
                total_volume_sell = df_grouped['volume_sell'].sum()
                total_net = df_grouped['net'].sum()
                avg_price_total = df_grouped['avg_price'].mean()
                
                # Hi·ªÉn th·ªã t·ªïng c√°c gi√° tr·ªã
                st.markdown(f"### T·ªïng D·ªØ Li·ªáu Giao D·ªãch (C·ªï Phi·∫øu: {symbol})")
                st.markdown(f"- **T·ªïng volume mua:** {total_volume_buy:,.0f}")
                st.markdown(f"- **T·ªïng volume b√°n:** {total_volume_sell:,.0f}")
                st.markdown(f"- **T·ªïng net (Mua - B√°n):** {total_net:,.0f}")
                st.markdown(f"- **Gi√° trung b√¨nh:** {avg_price_total:,.2f}")

                # S·∫Øp x·∫øp c·ªôt theo th·ª© t·ª± y√™u c·∫ßu
                df_grouped = df_grouped[['5_min_interval', 'avg_price', 'volume_buy', 'volume_sell', 'net']]
                df_grouped.rename(columns={'5_min_interval': 'time'}, inplace=True)

                # Hi·ªÉn th·ªã b·∫£ng d·ªØ li·ªáu theo y√™u c·∫ßu
                st.write(f"Th√¥ng tin gi√° c·ªï phi·∫øu {symbol} realtime theo t·ª´ng kho·∫£ng 5 ph√∫t:")
                st.dataframe(df_grouped.style.format({'avg_price': '{:,.2f}', 'volume_buy': '{:,.0f}', 'volume_sell': '{:,.0f}', 'net': '{:,.0f}'}), use_container_width=True)
                
                # T√πy ch·ªçn t·∫£i v·ªÅ d·ªØ li·ªáu
                st.download_button(
                    label="üì• T·∫£i d·ªØ li·ªáu realtime (.CSV)",
                    data=df_grouped.to_csv(index=False).encode("utf-8"),
                    file_name=f"{symbol}_gia_realtime_5phut.csv",
                    mime="text/csv"
                )

        except Exception as e:
            st.error(f"ƒê√£ x·∫£y ra l·ªói khi l·∫•y d·ªØ li·ªáu realtime: {e}")

            
# ==== TAB 7 ====
with tab7:
    st.title("üìä Ph√¢n T√≠ch C·ªï Phi·∫øu (D·ªØ li·ªáu Intraday)")

    st.markdown("Nh·∫≠p m√£ c·ªï phi·∫øu v√† s·ªë b·∫£n ghi ƒë·ªÉ ph√¢n t√≠ch d·ªØ li·ªáu c·ªï phi·∫øu theo t·ª´ng ph√∫t.")

    symbol = st.text_input("Nh·∫≠p m√£ c·ªï phi·∫øu:", value="VNM", key="symbol_tab7").strip().upper()
    page_size = st.number_input("Ch·ªçn s·ªë l∆∞·ª£ng b·∫£n ghi (giao d·ªãch):", min_value=1, max_value=50000, value=10000)

    if st.button("üìà Ph√¢n t√≠ch c·ªï phi·∫øu", key="btn_tab7"):
        try:
            # Kh·ªüi t·∫°o ƒë·ªëi t∆∞·ª£ng l·∫•y d·ªØ li·ªáu
            stock = Vnstock().stock(symbol=symbol, source='VCI')
            df_intraday = stock.quote.intraday(symbol=symbol, page_size=page_size)

            if df_intraday is None or df_intraday.empty:
                st.warning(f"Kh√¥ng c√≥ d·ªØ li·ªáu intraday cho m√£ {symbol}.")
            else:
                df_intraday['time'] = pd.to_datetime(df_intraday['time'])
                df_intraday.set_index('time', inplace=True)

                # G·ªôp theo t·ª´ng ph√∫t
                df_intraday['minute'] = df_intraday.index.floor('T')  # 'T' l√† vi·∫øt t·∫Øt cho 'minutely'

                # T√≠nh volume mua & b√°n
                df_intraday['volume_buy'] = df_intraday.apply(lambda x: x['volume'] if x['match_type'] == 'Buy' else 0, axis=1)
                df_intraday['volume_sell'] = df_intraday.apply(lambda x: x['volume'] if x['match_type'] == 'Sell' else 0, axis=1)

                # Nh√≥m theo t·ª´ng ph√∫t
                df_min = df_intraday.groupby('minute').agg(
                    volume_buy=('volume_buy', 'sum'),
                    volume_sell=('volume_sell', 'sum'),
                    avg_price=('price', 'mean')
                ).reset_index()

                # T√≠nh d√≤ng ti·ªÅn (Value = Gi√° * Volume)
                df_min['value_buy'] = df_min['volume_buy'] * df_min['avg_price'] * 1000
                df_min['value_sell'] = df_min['volume_sell'] * df_min['avg_price'] * 1000
                df_min['net'] = df_min['volume_buy'] - df_min['volume_sell']
                df_min['net_value'] = df_min['value_buy'] - df_min['value_sell'] 
                
                # T√≠nh kh·ªëi l∆∞·ª£ng mua/b√°n l≈©y k·∫ø
                df_min['cumulative_volume_buy'] = df_min['volume_buy'].cumsum()
                df_min['cumulative_volume_sell'] = df_min['volume_sell'].cumsum()
                df_min['cumulative_volume_net'] = df_min['cumulative_volume_buy'] - df_min['cumulative_volume_sell']

                # T√≠nh d√≤ng ti·ªÅn l≈©y k·∫ø
                df_min['cumulative_volume_net'] = df_min['net'].cumsum()
                df_min['cumulative_net'] = df_min['net_value'].cumsum()
                
                
                # Hi·ªÉn th·ªã b·∫£ng
                st.markdown(f"### D·ªØ li·ªáu c·ªï phi·∫øu theo ph√∫t cho m√£: **{symbol}**")
                st.dataframe(df_min.style.format({'avg_price': '{:,.2f}', 'volume_buy': '{:,.0f}', 'volume_sell': '{:,.0f}', 'net': '{:,.0f}', 'value_buy': '{:,.2f}',
                'value_sell': '{:,.2f}', 'net_value': '{:,.2f}', 'cumulative_volume_buy': '{:,.2f}','cumulative_volume_sell': '{:,.2f}','cumulative_volume_net': '{:,.2f}', 'cumulative_net': '{:,.2f}'}), use_container_width=True)

                #1 Bi·ªÉu ƒë·ªì d√≤ng ti·ªÅn theo Volume
                st.markdown("### üìä Bi·ªÉu ƒë·ªì d√≤ng ti·ªÅn theo ph√∫t")

                fig = go.Figure()

                # Volume mua - m√†u xanh (d∆∞∆°ng)
                fig.add_trace(go.Bar(
                    x=df_min['minute'],
                    y=df_min['volume_buy'],
                    name='Volume Mua',
                    marker=dict(color='#2ECC71', line=dict(width=0))
                ))

                # Volume b√°n - m√†u ƒë·ªè (√¢m)
                fig.add_trace(go.Bar(
                    x=df_min['minute'],
                    y=-df_min['volume_sell'],  # √¢m ƒë·ªÉ hi·ªÉn th·ªã b√™n d∆∞·ªõi tr·ª•c
                    name='Volume B√°n',
                    marker=dict(color='#E74C3C', line=dict(width=0))
                ))

                # Net Volume - ch·ªâ l√† line kh√¥ng c√≥ markers
                fig.add_trace(go.Scatter(
                    x=df_min['minute'],
                    y=df_min['volume_buy'] - df_min['volume_sell'],  # Net Volume
                    mode='lines',
                    name='Net Volume',
                    line=dict(color='#9B59B6', width=2),
                    yaxis='y2'
                ))

                # C·∫≠p nh·∫≠t layout
                fig.update_layout(
                    barmode='relative',
                    title=f"üìä D√≤ng ti·ªÅn theo ph√∫t - {symbol}",
                    xaxis_title="Th·ªùi gian",
                    yaxis=dict(
                        title="Volume (C·ªï phi·∫øu)",
                        side="left"
                    ),
                    yaxis2=dict(
                        title="Net Volume",
                        overlaying='y',
                        side='right',
                        showgrid=False
                    ),
                    template='plotly_dark',
                    hovermode='x unified',
                    legend=dict(orientation='h', yanchor='bottom', y=1.02, xanchor='right', x=1)
                )

                st.plotly_chart(fig, use_container_width=True)
                
                
                #2 Bi·ªÉu ƒë·ªì d√≤ng ti·ªÅn theo gi√° tr·ªã
                fig2 = go.Figure()

                # Gi√° tr·ªã mua - c·ªôt m√†u xanh
                fig2.add_trace(go.Bar(
                    x=df_min['minute'],
                    y=df_min['value_buy'],
                    name='Gi√° tr·ªã Mua (VND)',
                    marker=dict(color='#2ECC71', line=dict(width=0)),
                    yaxis='y'
                ))

                # Gi√° tr·ªã b√°n - c·ªôt m√†u ƒë·ªè
                fig2.add_trace(go.Bar(
                    x=df_min['minute'],
                    y=-df_min['value_sell'],  # Hi·ªÉn th·ªã gi√° tr·ªã b√°n d∆∞·ªõi tr·ª•c
                    name='Gi√° tr·ªã B√°n (VND)',
                    marker=dict(color='#E74C3C', line=dict(width=0)),
                    yaxis='y'
                ))

                # Net Value - ƒë∆∞·ªùng m√†u t√≠m
                fig2.add_trace(go.Scatter(
                    x=df_min['minute'],
                    y=df_min['value_buy'] - df_min['value_sell'],
                    mode='lines',
                    name='Net Value (VND)',
                    line=dict(color='#9B59B6', width=2),
                    yaxis='y'
                ))

                # C·∫≠p nh·∫≠t layout
                fig2.update_layout(
                    title="üí∞ D√≤ng ti·ªÅn theo gi√° tr·ªã (VND) theo ph√∫t",
                    xaxis_title="Th·ªùi gian",
                    yaxis_title="Gi√° tr·ªã (VND)",
                    template='plotly_dark',
                    barmode='relative',  # Cho ph√©p c·ªôt √¢m v√† d∆∞∆°ng ch·ªìng l√™n nhau
                    hovermode='x unified',
                    legend=dict(orientation='h', yanchor='bottom', y=1.02, xanchor='right', x=1)
                )

                st.plotly_chart(fig2, use_container_width=True)
                
                              

                # Bi·ªÉu ƒë·ªì Kh·ªëi l∆∞·ª£ng l≈©y k·∫ø
                fig5 = go.Figure()

                # Kh·ªëi l∆∞·ª£ng mua l≈©y k·∫ø - c·ªôt d∆∞∆°ng
                fig5.add_trace(go.Bar(
                    x=df_min['minute'],
                    y=df_min['cumulative_volume_buy'],
                    name='Kh·ªëi l∆∞·ª£ng Mua l≈©y k·∫ø',
                    marker=dict(color='#2ECC71', line=dict(width=0)),
                    yaxis='y'
                ))

                # Kh·ªëi l∆∞·ª£ng b√°n l≈©y k·∫ø - c·ªôt √¢m
                fig5.add_trace(go.Bar(
                    x=df_min['minute'],
                    y=-df_min['cumulative_volume_sell'],
                    name='Kh·ªëi l∆∞·ª£ng B√°n l≈©y k·∫ø',
                    marker=dict(color='#E74C3C', line=dict(width=0)),
                    yaxis='y'
                ))

                # Kh·ªëi l∆∞·ª£ng r√≤ng l≈©y k·∫ø - line m√†u xanh d∆∞∆°ng ƒë·∫≠m
                fig5.add_trace(go.Scatter(
                    x=df_min['minute'],
                    y=df_min['cumulative_volume_net'],
                    mode='lines',
                    name='Kh·ªëi l∆∞·ª£ng r√≤ng l≈©y k·∫ø',
                    line=dict(color='#9B59B6', width=2),
                    yaxis='y'
                ))

                fig5.update_layout(
                    title="üìà Kh·ªëi l∆∞·ª£ng r√≤ng l≈©y k·∫ø theo ph√∫t",
                    xaxis_title="Th·ªùi gian",
                    yaxis_title="Kh·ªëi l∆∞·ª£ng (C·ªï phi·∫øu)",
                    template='plotly_dark',
                    barmode='relative',
                    hovermode='x unified',
                    legend=dict(orientation='h', yanchor='bottom', y=1.02, xanchor='right', x=1)
                )

                st.plotly_chart(fig5, use_container_width=True)
                
                #4 Bi·ªÉu ƒë·ªì d√≤ng ti·ªÅn l≈©y k·∫ø
                fig6 = px.line(
                    df_min, x='minute', y='cumulative_net',
                    title="üìà Gi√° tr·ªã D√≤ng ti·ªÅn r√≤ng l≈©y k·∫ø theo ph√∫t",
                    labels={'cumulative_net': 'D√≤ng ti·ªÅn r√≤ng l≈©y k·∫ø (VND)', 'minute': 'Th·ªùi gian'}
                )
                fig6.update_traces(line=dict(color='#2980B9', width=2))
                st.plotly_chart(fig6, use_container_width=True)

                                
                

        except Exception as e:
            st.error(f"ƒê√£ x·∫£y ra l·ªói: {str(e)}")


           
