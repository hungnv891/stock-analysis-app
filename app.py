import streamlit as st
from analyzer import analyze_stock, export_to_excel
import os
import pandas as pd
from datetime import date

st.set_page_config(page_title='Ph√¢n T√≠ch C·ªï Phi·∫øu', layout='wide')
tab1, tab2 = st.tabs(['üìà Ph√¢n T√≠ch T·ª´ng M√£', 'üè≠ D√≤ng Ti·ªÅn Theo Nh√≥m Ng√†nh'])

# ==== TAB 1 ====
with tab1:
    st.title("üìä Ph√¢n T√≠ch D√≤ng Ti·ªÅn C·ªï Phi·∫øu")

    st.markdown("""
    Nh·∫≠p m√£ c·ªï phi·∫øu (v√≠ d·ª•: **VNM**, **SSI**, **FPT**) v√† ch·ªçn ng√†y ƒë·ªÉ ph√¢n t√≠ch giao d·ªãch t·ª´ ngu·ªìn TCBS.
    """)

    symbol = st.text_input("Nh·∫≠p m√£ c·ªï phi·∫øu:", value="VNM").strip().upper()
    selected_date = st.date_input("Ch·ªçn ng√†y giao d·ªãch:", value=date.today())

    if st.button("Ph√¢n T√≠ch"):
        if symbol:
            with st.spinner("ƒêang t·∫£i v√† ph√¢n t√≠ch d·ªØ li·ªáu..."):
                result = analyze_stock(symbol, selected_date)

            if result is not None:
                summary = result['summary']
                resampled = result['resampled']
                df = result['df']
                chart_paths = result['chart_paths']

                st.success("Ph√¢n t√≠ch ho√†n t·∫•t!")
                
                # Hi·ªÉn th·ªã ph·∫ßn t√≥m t·∫Øt
                st.subheader("üìä T√≥m T·∫Øt Ph√¢n T√≠ch")
                
                col1, col2 = st.columns(2)
                with col1:
                    st.metric("T·ªïng d√≤ng ti·ªÅn v√†o (VND)", summary['T·ªïng d√≤ng ti·ªÅn v√†o (VND)'])
                    st.metric("T·ªïng d√≤ng ti·ªÅn ra (VND)", summary['T·ªïng d√≤ng ti·ªÅn ra (VND)'])
                    st.metric("D√≤ng ti·ªÅn r√≤ng (VND)", summary['D√≤ng ti·ªÅn r√≤ng (VND)'])
                    st.metric("T·ªïng s·ªë l·ªánh mua", summary['T·ªïng s·ªë l·ªánh mua'])
                    st.metric("T·ªïng s·ªë l·ªánh b√°n", summary['T·ªïng s·ªë l·ªánh b√°n'])

                with col2:
                    st.metric("Kh·ªëi l∆∞·ª£ng TB l·ªánh mua", f"{summary['Kh·ªëi l∆∞·ª£ng trung b√¨nh l·ªánh mua']:,.2f}")
                    st.metric("Kh·ªëi l∆∞·ª£ng TB l·ªánh b√°n", f"{summary['Kh·ªëi l∆∞·ª£ng trung b√¨nh l·ªánh b√°n']:,.2f}")
                    st.metric("T·ª∑ l·ªá mua/b√°n", f"{summary['T·ª∑ l·ªá kh·ªëi l∆∞·ª£ng trung b√¨nh mua/b√°n']:,.2f}")
                    st.metric("Gi√° cao nh·∫•t", f"{summary['Gi√° cao nh·∫•t']:,.2f}")
                    st.metric("Gi√° th·∫•p nh·∫•t", f"{summary['Gi√° th·∫•p nh·∫•t']:,.2f}")

                if chart_paths:
                    st.subheader("üìà Bi·ªÉu ƒë·ªì ph√¢n t√≠ch:")
                    for path in chart_paths:
                        if os.path.exists(path):
                            st.image(path, use_container_width=True)
                        else:
                            st.warning(f"Kh√¥ng t√¨m th·∫•y bi·ªÉu ƒë·ªì: {path}")

                excel_path = export_to_excel(resampled, df, symbol, selected_date)
                if excel_path and os.path.exists(excel_path):
                    st.subheader("üì• T·∫£i xu·ªëng d·ªØ li·ªáu:")
                    with open(excel_path, "rb") as f:
                        st.download_button(
                            label="üìä T·∫£i Excel k·∫øt qu·∫£",
                            data=f,
                            file_name=os.path.basename(excel_path),
                            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                        )
                else:
                    st.warning("Kh√¥ng th·ªÉ t·∫°o file Excel.")
            else:
                st.error("Kh√¥ng th·ªÉ ph√¢n t√≠ch m√£ c·ªï phi·∫øu n√†y. H√£y th·ª≠ l·∫°i v·ªõi m√£ kh√°c.")
        else:
            st.warning("Vui l√≤ng nh·∫≠p m√£ c·ªï phi·∫øu.")

# ==== TAB 2 ====
from concurrent.futures import ThreadPoolExecutor

with tab2:
    st.title('üè≠ Theo D√µi D√≤ng Ti·ªÅn Theo Nh√≥m Ng√†nh')

    sector_map = {
        'Ng√¢n h√†ng': ['VCB', 'CTG', 'BID', 'TCB', 'MBB', 'ACB', 'HDB'],
        'Ch·ª©ng kho√°n': ['SSI', 'VND', 'HCM', 'VCI', 'FTS', 'CTS'],
        'Th√©p': ['HPG', 'HSG', 'NKG', 'TLH'],
        'B·∫•t ƒë·ªông s·∫£n': ['VIC', 'VHM', 'NLG', 'KDH', 'DXG', 'HDG'],
        'C√¥ng ngh·ªá': ['FPT', 'CMG', 'CTR', 'VGI'],
        'B√°n l·∫ª': ['MSN', 'MWG', 'DGW', 'PNJ', 'FRT'],
        'ƒêi·ªán n∆∞·ªõc': ['BWE', 'NT2', 'POW', 'PC1', 'DQC'],
        'D·∫ßu kh√≠': ['PVS', 'PVD', 'GAS', 'PLX', 'BSR'],
        'X√¢y d·ª±ng': ['CTD', 'HBC', 'CII', 'VCG', 'FCN'],
        'ƒê·∫ßu t∆∞ c√¥ng': ['HHV', 'LCG', 'HTI', 'DPG', 'EVG'],
        'Th·ª±c ph·∫©m': ['DBC', 'QNS', 'NAF', 'SBT', 'MCH', 'VNM', 'SAB'],
        'B·∫£o hi·ªÉm': ['BVH', 'BMI', 'MIG', 'BIC', 'PVI'],
        'Th·ªßy s·∫£n': ['VHC', 'ANV', 'FMC', 'ASM'],
        'D·ªát may': ['MSH', 'TCM', 'TNG', 'VGT', 'STK'],
        'Cao su': ['GVR', 'DPR', 'HRC', 'PHR'],
        'D∆∞·ª£c ph·∫©m': ['DCL', 'DHG', 'IMP', 'TRA', 'DVN'],
        'V·∫≠n t·∫£i': ['PVT', 'HAH', 'GMD', 'VNS'],
        'Nh·ª±a': ['AAA', 'BMP', 'NTP', 'DNP'],
        'Ph√¢n b√≥n': ['DGC', 'DPM', 'DCM', 'BFC', 'LAS']
    }

    selected_date = st.date_input('Ch·ªçn ng√†y giao d·ªãch:', value=date.today(), key='date_sector')
    selected_sector = st.selectbox('Ch·ªçn nh√≥m ng√†nh:', options=list(sector_map.keys()))
    analyze_button = st.button('üîç Ph√¢n T√≠ch Nh√≥m Ng√†nh', key='analyze_sector')

    def process_symbol(symbol, selected_date):
        try:
            result = analyze_stock(symbol, selected_date)
            if result:
                def parse_currency(value):
                    if isinstance(value, str):
                        return float(value.replace(".", "").replace(",", "").replace("‚àí", "-"))
                    return float(value)

                in_flow = parse_currency(result['summary']['T·ªïng d√≤ng ti·ªÅn v√†o (VND)'])
                out_flow = parse_currency(result['summary']['T·ªïng d√≤ng ti·ªÅn ra (VND)'])
                net_flow = parse_currency(result['summary']['D√≤ng ti·ªÅn r√≤ng (VND)'])
                return {"symbol": symbol, "in": in_flow, "out": out_flow, "net": net_flow}
        except Exception:
            return None

    if analyze_button and selected_sector:
        symbols = sector_map[selected_sector]
        st.info(f"ƒêang ph√¢n t√≠ch {len(symbols)} m√£ trong nh√≥m '{selected_sector}'...")

        with st.spinner("ƒêang x·ª≠ l√Ω..."):
            with ThreadPoolExecutor(max_workers=6) as executor:
                futures = [executor.submit(process_symbol, sym, selected_date) for sym in symbols]
                results = [f.result() for f in futures if f.result() is not None]

        if results:
            df_sector = pd.DataFrame(results)
            st.dataframe(df_sector, use_container_width=True)

            import altair as alt

            st.subheader(f'üìä Bi·ªÉu ƒê·ªì D√≤ng Ti·ªÅn Nh√≥m: {selected_sector}')

            # T·∫°o DataFrame d·∫°ng long format cho bi·ªÉu ƒë·ªì
            df_melted = df_sector.melt(id_vars="symbol", value_vars=["in", "out"], var_name="type", value_name="value")
            
            # T·∫°o bi·ªÉu ƒë·ªì c·ªôt cho d√≤ng ti·ªÅn v√†o v√† ra
            bars = alt.Chart(df_melted).mark_bar().encode(
                x=alt.X('symbol:N', title='M√£ c·ªï phi·∫øu'),
                y=alt.Y('value:Q', title='VND'),
                color=alt.Color('type:N', scale=alt.Scale(domain=['in', 'out'], range=['green', 'red'])),
                tooltip=['symbol', 'type', 'value']
            ).properties(
                width=700,
                height=400
            )
            
            # T·∫°o bi·ªÉu ƒë·ªì ƒë∆∞·ªùng cho d√≤ng ti·ªÅn r√≤ng
            line = alt.Chart(df_sector).mark_line(color='purple', strokeWidth=3).encode(
                x=alt.X('symbol:N', title='M√£ c·ªï phi·∫øu'),
                y=alt.Y('net:Q', title='VND'),
                tooltip=['symbol', 'net']
            )
            
            # K·∫øt h·ª£p bi·ªÉu ƒë·ªì
            chart = (bars + line).properties(
                width=700,
                height=400
            ).resolve_scale(
                y='shared'
            )
            
            st.altair_chart(chart, use_container_width=True)
        else:
            st.warning("Kh√¥ng th·ªÉ ph√¢n t√≠ch d√≤ng ti·ªÅn nh√≥m ng√†nh n√†y.")
